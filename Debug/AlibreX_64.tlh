// Created by Microsoft (R) C/C++ Compiler Version 14.44.35207.1 (4b2992dc).
//
// T:\3-alibredesign\SelectionAddOnSample\Debug\AlibreX_64.tlh
//
// C++ source equivalent of type library C:\Program Files\Alibre Design 28.0.4.28141\Program\AlibreX_64.tlb
// compiler-generated file - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace AlibreX {

//
// Forward references and typedefs
//

struct __declspec(uuid("649aba85-187f-47da-ba37-b5a3563b21dc"))
/* LIBID */ __AlibreX;
enum ADAccuracySetting : int;
enum ADAssemblyConstraintBoundType : int;
enum ADAssemblyConstraintParameterRole : int;
enum ADAssemblyConstraintType : int;
enum ADAssemblyFeatureType : int;
enum ADBOMDataType : int;
enum ADBOMTableStyle : int;
enum ADBOMTextAlignment : int;
enum ADBooleanOperator : int;
enum ADConfigurationLockType : int;
enum ADDesignGeometryType : int;
enum ADDetailingOption : int;
enum ADDimensionType : int;
enum ADDirectionType : int;
enum ADDrawingViewType : int;
enum ADEdgeChamferType : int;
enum ADEntityPointRelation : int;
enum ADEventChangeType : int;
enum ADExtendedDesignProperty : int;
enum ADFaceProcessingType : int;
enum ADGeometryType : int;
enum ADHelixConditionType : int;
enum ADHelixType : int;
enum ADHoleDepthCondition : int;
enum ADHoleType : int;
enum ADLoftGuideType : int;
enum ADMaterialPropertyKey : int;
enum ADObjectSubType : int;
enum ADObjectType : int;
enum ADSketchConstraintType : int;
enum ADViewOrientation : int;
enum ADParameterType : int;
enum ADPartFeatureEndCondition : int;
enum ADPartFeatureType : int;
enum ADPitchType : int;
enum ADSecureObjectType : int;
enum ADSelectionFilterOption : int;
enum ADTappedThreadType : int;
enum ADTopologyType : int;
enum ADUnits : int;
enum ADWrapFocusType : int;
struct /* coclass */ AutomationHook;
enum CustomError : int;
struct __declspec(uuid("05efe169-12b2-4d17-a729-a19aec3bed80"))
/* dual interface */ DIEnum;
struct /* coclass */ EventManager;
struct __declspec(uuid("125bf6dc-6d67-46ad-b388-bdb8e8cb379c"))
/* dual interface */ IAD2DPoint;
struct __declspec(uuid("aea88a0f-a6f2-4d6e-9f1c-b2d55005b19a"))
/* dual interface */ IAD3DSketch;
struct __declspec(uuid("7447dfeb-de86-4467-8178-49cc3c4f705f"))
/* dual interface */ IAD3DSketchCircle;
struct __declspec(uuid("677bb101-6dc2-43ea-9375-816dfe7955a8"))
/* dual interface */ IAD3DSketchCircularArc;
struct __declspec(uuid("3e2213b0-4872-4c5c-8116-db87fbd3267a"))
/* dual interface */ IAD3DSketchEllipse;
struct __declspec(uuid("164c2f64-8b15-4a9b-bbb4-35e4b8ae61ef"))
/* dual interface */ IAD3DSketchEllipticArc;
struct __declspec(uuid("bf71b7d1-28a6-4f10-a94c-85efdd2d9139"))
/* dual interface */ IAD3DSketches;
struct __declspec(uuid("f3d516e7-794e-41b7-8cf8-25a7be4e10f3"))
/* dual interface */ IAD3DSketchFigure;
struct __declspec(uuid("315a9c4d-0a6a-408f-bce4-231b968b9af5"))
/* dual interface */ IAD3DSketchFigures;
struct __declspec(uuid("a6c72bc8-8b4e-4209-81ab-3904a74c2ef2"))
/* dual interface */ IAD3DSketchLine;
struct __declspec(uuid("92b1a723-c999-425e-b55b-21d750aa79dd"))
/* dual interface */ IAD3DSketchPoint;
struct __declspec(uuid("bada48fa-05be-4387-a97d-02d571eac1e6"))
/* dual interface */ IAD3DSketchBspline;
struct __declspec(uuid("922a4936-c391-4598-b7c8-57a3b8a7bbe5"))
/* dual interface */ IADAddOns;
struct __declspec(uuid("e533c0a8-2b68-454b-a2d9-14b0dd11712e"))
/* dual interface */ IADAlignConstraint;
struct __declspec(uuid("382717fe-9dda-4e12-892c-26521f55c1f8"))
/* dual interface */ IADAngleConstraint;
struct __declspec(uuid("118ebc42-7d5c-491f-b98c-ed9f95d1f5f9"))
/* dual interface */ IADAssemblyConstraint;
struct __declspec(uuid("362d8986-814b-4654-9423-290236532604"))
/* dual interface */ IADAssemblyConstraints;
struct __declspec(uuid("334e50f5-1095-425b-bb61-9fa3c1ff1eb5"))
/* dual interface */ IADAssemblyExtrusionFeature;
struct __declspec(uuid("9c3735ad-3f04-4d24-95e8-eeb24a98980b"))
/* dual interface */ IADAssemblyFeature;
struct __declspec(uuid("0946b7dd-9f78-45cb-8d1a-9cf8b7a90485"))
/* dual interface */ IADAssemblyFeatures;
struct __declspec(uuid("87bc908e-8dba-49c5-ba69-1dbddc7a6e6d"))
/* dual interface */ IADAssemblyHoleFeature;
struct __declspec(uuid("28ec7410-0b7b-4bb3-a652-6efecf9cd465"))
/* dual interface */ IADAssemblyPath;
struct __declspec(uuid("c34bfce9-e873-497c-95ef-38c441157296"))
/* dual interface */ IADAssemblySession;
struct __declspec(uuid("c3bac24b-21cf-451e-ae31-050653f84ced"))
/* dual interface */ IADAutoBrepImportSummary;
struct __declspec(uuid("f7674e6c-128c-4ce4-b944-faee4875b78c"))
/* dual interface */ IADBodies;
struct __declspec(uuid("d0d4354c-f6c5-4d57-b389-ffd07f46adc2"))
/* dual interface */ IADBody;
struct __declspec(uuid("28721880-03b0-46e0-b222-8c88cbb65d9c"))
/* dual interface */ IADBOMColumn;
struct __declspec(uuid("40deeb34-d1ef-4471-837f-dfc991557f6b"))
/* dual interface */ IADBOMColumns;
struct __declspec(uuid("7a5f43a8-4b77-444a-ad34-d911a1561a80"))
/* dual interface */ IADBOMRow;
struct __declspec(uuid("fb125f4e-aed1-47cf-b3da-146de501a428"))
/* dual interface */ IADBOMRows;
struct __declspec(uuid("c95c0286-f202-4406-a359-870007a06f90"))
/* dual interface */ IADBOMTableSession;
struct __declspec(uuid("2189aeee-ce55-45c9-bac5-3eb0c1982920"))
/* dual interface */ IADBsplineCurve;
struct __declspec(uuid("2e07232d-aece-41a8-98db-d5911c87fc52"))
/* dual interface */ IADBsplineSurface;
struct __declspec(uuid("2ba59e06-69c9-4d02-a616-0563470506c7"))
/* dual interface */ IADChamferFeature;
struct __declspec(uuid("10e20f0a-cccf-49aa-af6f-af9b6eb852b5"))
/* dual interface */ IADCircle;
struct __declspec(uuid("6da4dfb1-1e62-4efd-8ebb-a61edf2feba9"))
/* dual interface */ IADCircularArc;
struct __declspec(uuid("20f4b817-8b15-4b2c-85b5-02ed227a2a30"))
/* dual interface */ IADCoedge;
struct __declspec(uuid("87e8ec4b-6e89-4383-8fc8-e05ef3fd9ce9"))
/* dual interface */ IADCoedges;
struct __declspec(uuid("e159e8b5-53f9-4fa5-8d14-c097f27758d4"))
/* dual interface */ IADComplexSketchFigure;
struct __declspec(uuid("635d96e7-2593-479a-8fd3-e7a354bb1d98"))
/* dual interface */ IADCompositeFigure;
struct __declspec(uuid("71b4a236-5ae1-4209-96db-c8a45c384294"))
/* dual interface */ IADCone;
struct __declspec(uuid("cb30884c-9c67-4e4b-ab96-67ab54a7a804"))
/* dual interface */ IADConfiguration;
struct __declspec(uuid("b54d57d2-b64b-44e7-9fb2-f458ea22c243"))
/* dual interface */ IADConfigurations;
struct __declspec(uuid("6b2179a3-d4dc-43e6-9c80-c0ca030b1a05"))
/* dual interface */ IADCurve;
struct __declspec(uuid("db731a14-374f-41ac-bebe-f5fc0199f655"))
/* dual interface */ IADCylinder;
struct __declspec(uuid("d6395b93-e317-4637-9451-c5ffa61d3509"))
/* dual interface */ IADDataFont;
struct __declspec(uuid("6b1e45da-6086-4db3-85c0-ef8f2121a555"))
/* dual interface */ IADDeleteLumpsFeature;
struct __declspec(uuid("dfe9f38a-a24e-4194-b23f-146d285f6ee5"))
/* dual interface */ IADDesignAxes;
struct __declspec(uuid("b4190f49-05d2-413a-bc68-6864b2437798"))
/* dual interface */ IADDesignAxis;
struct __declspec(uuid("c4290bae-59c1-4541-909c-a7e8887fa815"))
/* dual interface */ IADDesignBooleanFeature;
struct __declspec(uuid("bf3ec6d9-85ca-4ffe-99a8-694c3d1189b5"))
/* dual interface */ IADDesignMesh;
struct __declspec(uuid("e5f10486-f6bf-4aae-847a-6728b9ae18dd"))
/* dual interface */ IADDesignMeshes;
struct __declspec(uuid("b2435cea-af54-47ac-ae75-4119bbecb4c5"))
/* dual interface */ IADDesignPlane;
struct __declspec(uuid("0357e5eb-7e85-4a90-b52f-99948809806e"))
/* dual interface */ IADDesignPlanes;
struct __declspec(uuid("4930ed59-e3ed-4c13-b5d5-38ddb76a5763"))
/* dual interface */ IADDesignPoint;
struct __declspec(uuid("52daabb5-628c-4fbf-a18a-36f3773fa935"))
/* dual interface */ IADDesignPoints;
struct __declspec(uuid("0098b123-abe9-45b3-b9a7-a94838579f9d"))
/* dual interface */ IADDesignProperties;
struct __declspec(uuid("591b330b-4af7-4dc5-b7ca-e68e6cbe12e8"))
/* dual interface */ IADDesignSession;
struct __declspec(uuid("709b53a8-baa4-4f0d-8213-8fd1ff85dd92"))
/* dual interface */ IADDesignSurface;
struct __declspec(uuid("0b7191e7-2b8f-4f34-8b9e-4f483db8a8fc"))
/* dual interface */ IADDesignSurfaces;
struct __declspec(uuid("fe5c1bbb-3725-422e-9f10-dfbb03d72334"))
/* dual interface */ IADDimension;
struct __declspec(uuid("035f84bc-46b0-42de-84e7-713b9cd01f24"))
/* dual interface */ IADDimensions;
struct __declspec(uuid("e1032973-2d79-4ff9-8865-802671f47fb8"))
/* dual interface */ IADDraftFeature;
struct __declspec(uuid("4d585754-d354-4243-815e-a48263b4f3d1"))
/* dual interface */ IADDrawingProperties;
struct __declspec(uuid("905490d0-dd47-444c-b503-64764b8eca2f"))
/* dual interface */ IADDrawingSelectionFilter;
struct __declspec(uuid("134ea0f1-f368-4c02-ad49-cd4592d53ae4"))
/* dual interface */ IADDrawingSession;
struct __declspec(uuid("8a4c85c2-0ecf-41eb-87a8-3b112d757cfe"))
/* dual interface */ IADDrawingView;
struct __declspec(uuid("e92d76b0-7eab-4ea7-812b-f8f8f2b4c11c"))
/* dual interface */ IADDrawingViews;
struct __declspec(uuid("3cbb1377-a7bb-4f01-8948-59cb0d02046a"))
/* dual interface */ IADEdge;
struct __declspec(uuid("5993b2b1-7555-4bd5-951c-9e9d5977717b"))
/* dual interface */ IADEdges;
struct __declspec(uuid("a4d47c2e-5e16-403f-ba59-2f8245d6b151"))
/* dual interface */ IADEllipse;
struct __declspec(uuid("01ee5fac-c570-4563-9c50-22a0ea76b96d"))
/* dual interface */ IADEllipticalArc;
struct __declspec(uuid("67215708-25cf-484a-b462-8cb7fd341d82"))
/* interface */ IADEventsCallback;
struct __declspec(uuid("9485de5f-6f27-4db0-bcac-22ce8b9f70c7"))
/* dual interface */ IADExplodedView;
struct __declspec(uuid("f9713e78-2365-4644-95c4-7dd2193b8e0a"))
/* dual interface */ IADExplodedViews;
struct __declspec(uuid("93b4cac6-7cea-40d6-837c-e434926f28c5"))
/* dual interface */ IADExplodedViewStep;
struct __declspec(uuid("0896c891-8a11-443f-b4c9-7527c0148942"))
/* dual interface */ IADExplodedViewSteps;
struct __declspec(uuid("4293c34f-8d37-4dfe-b410-6bde754211b4"))
/* dual interface */ IADExternalThreadFeature;
struct __declspec(uuid("2db974d2-b951-425e-9210-85da8789a49a"))
/* dual interface */ IADExtrusionFeature;
struct __declspec(uuid("9e8e4df7-4d59-49a5-8a26-4c4b86689176"))
/* dual interface */ IADFace;
struct __declspec(uuid("71012787-a91f-4d00-be8d-f8c0b9958a8c"))
/* dual interface */ IADFaces;
struct __declspec(uuid("42b4cf71-f9e0-4b61-a618-6cbbaf40304d"))
/* dual interface */ IADFastenerConstraint;
struct __declspec(uuid("ff940ad5-4025-4eee-80d1-387dab509cbe"))
/* dual interface */ IADFilletFeature;
struct __declspec(uuid("e5a7fcf8-e423-499f-b2fd-8ca23068a805"))
/* dual interface */ IADFolder;
struct __declspec(uuid("38e67368-99d0-4e58-9c99-c7965106441f"))
/* dual interface */ IADFolderItem;
struct __declspec(uuid("52d03117-57e8-48bf-8d85-782d0a7d989c"))
/* dual interface */ IADFolderItems;
struct __declspec(uuid("0af38d3c-9752-40c8-bdb5-03fa2030a92b"))
/* dual interface */ IADFolders;
struct __declspec(uuid("c7201542-30cb-4e69-a428-df0ff0f59290"))
/* dual interface */ IADGearConstraint;
struct __declspec(uuid("21220515-42da-402f-9e75-dc051d5d63e2"))
/* dual interface */ IADGeometryFactory;
struct __declspec(uuid("236cd82c-3b01-4a01-a704-46d974255c02"))
/* dual interface */ IADGlobalParameterSession;
struct __declspec(uuid("b14308c1-72a8-4520-b535-cfd8b04c5d51"))
/* dual interface */ IADHelicalFeature;
struct __declspec(uuid("ecb50b1a-ae2d-4b96-ab8d-7a579dc4ad9a"))
/* dual interface */ IADHoleFeature;
struct __declspec(uuid("f0f76eb3-4904-4e7a-8e15-b13d7bcb572c"))
/* dual interface */ IADIGESOptions;
struct __declspec(uuid("59971c17-1512-4ff7-bdfd-fe3dcda87dc1"))
/* dual interface */ IADImportFileFeature;
struct __declspec(uuid("cdd15733-d36f-47d2-bf8f-5fd4bf4800ef"))
/* dual interface */ IADInterference;
struct __declspec(uuid("509e94da-d4a8-4f41-a444-b210fbe54c31"))
/* dual interface */ IADInterferences;
struct __declspec(uuid("a9bcd13d-c427-48a4-841b-98b49088c61b"))
/* dual interface */ IADMaterialLibraries;
struct __declspec(uuid("a33bbd43-0dcb-4fb9-a336-927f4bcad4de"))
/* dual interface */ IADMaterialLibrary;
struct __declspec(uuid("48de661e-6cd8-4855-a5be-00599e7634fd"))
/* dual interface */ IADMaterialLibraryFolder;
struct __declspec(uuid("bc14b812-a78e-441a-ad11-344b747a02a4"))
/* dual interface */ IADMaterialLibraryFolders;
struct __declspec(uuid("fedb2dcf-bddc-4629-9d20-985e8f899bc3"))
/* dual interface */ IADLine;
struct __declspec(uuid("d98b366e-bdfe-413a-b8ee-98c3d438e759"))
/* dual interface */ IADLoftFeature;
struct __declspec(uuid("6005509b-2ea0-4ae6-bab2-98b94ee6c69e"))
/* dual interface */ IADLoop;
struct __declspec(uuid("0668c416-5187-45d0-a59a-16635bfa280e"))
/* dual interface */ IADLoops;
struct __declspec(uuid("52d91049-1ba5-4243-96df-c13ac01dcbe5"))
/* dual interface */ IADLump;
struct __declspec(uuid("5ba35eb8-63b6-4529-979c-483921b3d006"))
/* dual interface */ IADLumps;
struct __declspec(uuid("038f4cb1-f2d1-4e0f-b986-7eda437b138c"))
/* dual interface */ IADMateConstraint;
struct __declspec(uuid("8d869325-2ce7-40d7-ac37-f78319b3b19d"))
/* dual interface */ IADMaterial;
struct __declspec(uuid("bd7228f5-496a-47e1-afa7-d2b8de14c2ae"))
/* dual interface */ IADMaterials;
struct __declspec(uuid("b6a52570-3140-4dda-a465-240a14c0ba4d"))
/* dual interface */ IADMeshBooleanFeature;
struct __declspec(uuid("0fa32d01-a604-4400-81ed-758db4648f20"))
/* dual interface */ IADMirrorFeature;
struct __declspec(uuid("5950c77f-fcab-422f-a5eb-0bf7e6b01f15"))
/* dual interface */ IADMoveFaceFeature;
struct __declspec(uuid("d4d44f26-50e3-4d92-895c-859f09d20d84"))
/* dual interface */ IADOccurrence;
struct __declspec(uuid("e1f4da56-3383-4827-be0a-8469395ba577"))
/* dual interface */ IADOccurrences;
struct __declspec(uuid("c85b34ec-e715-4fd9-9e8d-0b4905e698cb"))
/* dual interface */ IADOffsetFaceFeature;
struct __declspec(uuid("6f2b9e1b-ff82-409a-9bd5-f3d08667be28"))
/* dual interface */ IADOrientConstraint;
struct __declspec(uuid("c6427a08-343f-4a13-ae23-b11d97e0a4d3"))
/* dual interface */ IADParameter;
struct __declspec(uuid("d7d87458-500f-4e0d-ab8c-b496c5ddf5e5"))
/* dual interface */ IADParameters;
struct __declspec(uuid("b345b5a4-98da-4c15-b9b8-d3bb53854ad7"))
/* dual interface */ IADPartFeature;
struct __declspec(uuid("d8f13f3a-2ee3-4856-92a5-6834cca559f1"))
/* dual interface */ IADPartFeatures;
struct __declspec(uuid("9190ef5b-4110-46ab-9f52-9fc1bb350c5c"))
/* dual interface */ IADDesignSelectionFilter;
struct __declspec(uuid("82dfec3f-aea5-4733-90d6-620b59f0a97b"))
/* dual interface */ IADPartSession;
struct __declspec(uuid("75909846-9a73-4649-bb1c-6816e8bd72d3"))
/* dual interface */ IADPatternFeature;
struct __declspec(uuid("6cff68c8-5123-4e2d-aec0-c01986df9be6"))
/* dual interface */ IADPhysicalProperties;
struct __declspec(uuid("eb9db43e-fad2-4c05-8a3b-36fdaf3570b7"))
/* dual interface */ IADPlane;
struct __declspec(uuid("d823497e-7965-4808-a681-62de11a420f6"))
/* dual interface */ IADPoint;
struct __declspec(uuid("e316cec3-1283-45b6-b977-c09efd95b18f"))
/* dual interface */ IADPrintabilityCheckResults;
struct __declspec(uuid("af0bee6d-208b-45ac-9624-fe89ddccd7bb"))
/* dual interface */ IADProjectFeature;
struct __declspec(uuid("53b955dd-3489-4312-b166-1ff13d21c336"))
/* dual interface */ IADRackConstraint;
struct __declspec(uuid("f4f8b5d9-b52f-4d02-9827-2bda1c085cfb"))
/* dual interface */ IADRemoveFaceFeature;
struct __declspec(uuid("c5e87cf5-27b2-4ea8-9098-2f255e5c7269"))
/* dual interface */ IADRepositories;
struct __declspec(uuid("4390925e-605c-4ec3-87c1-1e771a7d1c5e"))
/* dual interface */ IADRepository;
struct __declspec(uuid("b73214c5-c55f-46a5-933f-a0d12a9cdefa"))
/* dual interface */ IADRevolutionFeature;
struct __declspec(uuid("4c6b6c09-7a65-4e2c-89e8-0a08c1684ecd"))
/* dual interface */ IADRoot;
struct __declspec(uuid("360d4250-1eb7-4784-aaa3-4310624a47c0"))
/* dual interface */ IADSavedView;
struct __declspec(uuid("033a1513-0507-45db-ad4c-b652b003215b"))
/* dual interface */ IADSavedViews;
struct __declspec(uuid("a03fe8a6-750d-4c1d-8818-d1eb0c41a657"))
/* dual interface */ IADScaleFeature;
struct __declspec(uuid("ee56c2fb-66c3-4240-87aa-ffc19b0cc736"))
/* dual interface */ IADScrewConstraint;
struct __declspec(uuid("6aff3b68-fa68-458a-bf05-fd5a5101f6ec"))
/* dual interface */ IADSession;
struct __declspec(uuid("a48fdded-77ab-433f-9764-16eaf0b88fee"))
/* dual interface */ IADSessions;
struct __declspec(uuid("3e844fc5-636a-4a5e-a912-fe9f92c7a795"))
/* dual interface */ IADSheet;
struct __declspec(uuid("1cd82fd9-5d69-4c3f-ba14-e8cb0a05facd"))
/* dual interface */ IADSheets;
struct __declspec(uuid("f2708af0-50d4-4c90-b25f-e7b5ab65c2f3"))
/* dual interface */ IADShell;
struct __declspec(uuid("0e02476d-4e21-44d1-bb2c-3487ab2ff4ee"))
/* dual interface */ IADShellFeature;
struct __declspec(uuid("1bd659d3-b286-48a3-9563-fd5476415345"))
/* dual interface */ IADShells;
struct __declspec(uuid("498750ad-6df1-4b08-88dc-091d2ddcd06e"))
/* dual interface */ IADSketch;
struct __declspec(uuid("7d12d336-7092-43b2-ad7e-61d8e9ed7de8"))
/* dual interface */ IADSketchBspline;
struct __declspec(uuid("9f2d35e0-7acf-4027-89f2-faf884ab0b39"))
/* dual interface */ IADSketchCircle;
struct __declspec(uuid("105281a4-8c1d-454a-80b7-31e1457acbb6"))
/* dual interface */ IADSketchCircularArc;
struct __declspec(uuid("5d597f97-726c-43f9-8083-2e2d7e9ed203"))
/* dual interface */ IADSketchConstraint;
struct __declspec(uuid("33360fb6-5248-4373-8370-2ecf5322c4cd"))
/* dual interface */ IADSketchConstraints;
struct __declspec(uuid("8000fd15-e7a5-4f81-a086-2d04f47f3dc0"))
/* dual interface */ IADSketchEllipse;
struct __declspec(uuid("cc1fd288-bdbd-41dc-a552-066a3e38b046"))
/* dual interface */ IADSketchEllipticArc;
struct __declspec(uuid("cb525560-79aa-498d-851b-495a98d5dd38"))
/* dual interface */ IADSketches;
struct __declspec(uuid("2686dba4-a49c-4294-aba5-5ea6f7003383"))
/* dual interface */ IADSketchFigure;
struct __declspec(uuid("4e8bf3ec-781f-496c-ade9-65b6b1892361"))
/* dual interface */ IADSketchFigures;
struct __declspec(uuid("17417e4b-f694-41f6-bdd1-5365a11bbe00"))
/* dual interface */ IADSketchLine;
struct __declspec(uuid("90bafdfc-23d7-471b-a5a9-4781d11709e4"))
/* dual interface */ IADSketchPoint;
struct __declspec(uuid("c261d69b-2f6a-42fc-a48a-0625c3041c8a"))
/* dual interface */ IADSketchShapePattern;
struct __declspec(uuid("301754e9-bb54-4927-8178-a78e4c18985a"))
/* dual interface */ IADSketchText;
struct __declspec(uuid("1c80c16e-a8c9-47bf-8f2b-4cf91af6a46f"))
/* dual interface */ IADSMClosedCornerFeature;
struct __declspec(uuid("358dc7a7-744d-44cc-89c1-b4871f4ba2f1"))
/* dual interface */ IADSMCornerChamferFeature;
struct __declspec(uuid("1791a85d-8a9d-4d31-9c6b-af469da7da8e"))
/* dual interface */ IADSMCornerRoundFeature;
struct __declspec(uuid("8d7161f5-f79d-4eee-9288-9fa860a0ed7d"))
/* dual interface */ IADSMDimpleFeature;
struct __declspec(uuid("900b4614-f14e-4c09-84c6-4147a2b11fdb"))
/* dual interface */ IADSMFlangeFeature;
struct __declspec(uuid("68d5f244-c176-45f8-8b14-a7024e26adcc"))
/* dual interface */ IADSMPunchFeature;
struct __declspec(uuid("d574adc4-c3b4-4e8b-83f2-2aee07e91bfd"))
/* dual interface */ IADSMRebendFeature;
struct __declspec(uuid("147b9297-91f5-467c-966f-666218bb7ff8"))
/* dual interface */ IADSMTabFeature;
struct __declspec(uuid("278795f0-3bc9-4ddb-9a7a-7a859611e275"))
/* dual interface */ IADSMUnbendFeature;
struct __declspec(uuid("a16d828e-db24-4452-a6f5-6ca1368aebe8"))
/* dual interface */ IADSphere;
struct __declspec(uuid("1b04d655-d0a6-489b-94a4-7d3e532b5417"))
/* dual interface */ IADSurface;
struct __declspec(uuid("a81ee12d-b836-4710-a8e3-91fd7fdbf448"))
/* dual interface */ IADSweepFeature;
struct __declspec(uuid("82e2103c-06f9-4d4b-a040-5656c111cfc4"))
/* dual interface */ IADTangentInsideConstraint;
struct __declspec(uuid("8c43dc51-7f39-49f3-a62d-1eecaaeeebd2"))
/* dual interface */ IADTangentOutsideConstraint;
struct __declspec(uuid("f52c8e2b-a212-4732-a1b2-142ae42031b7"))
/* dual interface */ IADTappedThreadInfo;
struct __declspec(uuid("fdd89a8c-9235-4f8f-8ce3-4b3bfdfedb9e"))
/* dual interface */ IADTargetProxy;
struct __declspec(uuid("18b9ad52-1eda-4317-a1da-f48057e672d6"))
/* dual interface */ IADTeam;
struct __declspec(uuid("0424bb75-6aa9-4249-9ea7-e25cf0fdbd5a"))
/* dual interface */ IADTeamRole;
struct __declspec(uuid("98872fb4-a7cb-436d-91c6-6696699e1955"))
/* dual interface */ IADTeamRoles;
struct __declspec(uuid("20779b1a-bb18-494b-822f-fea7e9462016"))
/* dual interface */ IADTeams;
struct __declspec(uuid("af6f8024-b39a-40d5-85bd-20267b432bbf"))
/* dual interface */ IADThickenSurfaceFeature;
struct __declspec(uuid("c137e6b4-86c5-4296-982e-f8cd357aa3eb"))
/* dual interface */ IADThinWallExtrusionFeature;
struct __declspec(uuid("1cad58cf-1068-4309-9d95-476457945998"))
/* dual interface */ IADThinWallRevolutionFeature;
struct __declspec(uuid("60c6f874-afc7-47c7-b73c-1a776891878c"))
/* dual interface */ IADThinWallSweepFeature;
struct __declspec(uuid("00c1b023-8b4b-4836-8721-3658f2901bea"))
/* dual interface */ IADTopologySummary;
struct __declspec(uuid("2f003e24-9404-4357-94f3-cef9baee831b"))
/* dual interface */ IADTorus;
struct __declspec(uuid("c0b68540-c0aa-4568-8430-16638c886548"))
/* dual interface */ IADTransformation;
struct __declspec(uuid("4556562a-f6cd-4fed-a850-35068d31b9d0"))
/* dual interface */ IADTrimModelFeature;
struct __declspec(uuid("c47aa15a-6b48-4a00-b8d8-4f3fd9e4674a"))
/* dual interface */ IADUser;
struct __declspec(uuid("2e231f97-bdc1-4d2e-b020-ce98085bc905"))
/* dual interface */ IADUsers;
struct __declspec(uuid("262300a8-2ffc-4480-a1c7-f7a3d373e0dd"))
/* dual interface */ IADVaultInfo;
struct __declspec(uuid("8bee896d-b026-4840-ac65-b98b1405e1c5"))
/* dual interface */ IADVector;
struct __declspec(uuid("19c4a0d3-da39-476a-a48c-4c0cc5ea9ae4"))
/* dual interface */ IADVertex;
struct __declspec(uuid("289dec28-bc19-4589-ab45-2e681e8c5ead"))
/* dual interface */ IADVertexChamferFeature;
struct __declspec(uuid("83fd7be3-8257-409d-ab3a-f53018ac7009"))
/* dual interface */ IADVertices;
struct __declspec(uuid("1fac0595-e136-4eda-8ad0-50bd3c23f90b"))
/* dual interface */ IADWrapFeature;
struct __declspec(uuid("0f0deae9-4e23-4ac5-9eb4-009b5267bd0c"))
/* dual interface */ IAnalyzedSketchData;
struct __declspec(uuid("424539a8-7014-4174-b0bf-f5ee5bb71df5"))
/* dual interface */ IAutomationHook;
struct __declspec(uuid("2ed34425-032b-4708-b5fc-409faeafc5a5"))
/* dual interface */ IDecomposedTransformData;
struct __declspec(uuid("47230325-d233-4e28-930a-a54d23db0673"))
/* dual interface */ INotificationSelector;
struct __declspec(uuid("ce2229d4-8e53-40ee-ad40-6932e966138a"))
/* dual interface */ IObjectCollector;
struct __declspec(uuid("d7c6116a-a81f-439e-b280-ce5dc2835500"))
/* dual interface */ IPermissionSelector;
struct __declspec(uuid("7ccf508b-f9c3-4e15-9ef4-95e5f74cdbdc"))
/* dual interface */ ISketchDegenerateFigure;
struct __declspec(uuid("ca7ab7e0-4997-4773-a9d5-de3758b95306"))
/* dual interface */ ISketchFigureDisjointEnd;
struct __declspec(uuid("2b0627d7-cafb-4160-ad3b-3c08c4c7ec6f"))
/* dual interface */ ISketchFigureIntersection;
struct __declspec(uuid("d2fce742-6d82-4ae1-9d1d-38018be87683"))
/* dual interface */ ISketchFigureOpenLoop;
struct __declspec(uuid("9ebd2659-1354-4cae-a104-b37eac1dba84"))
/* dual interface */ ISketchFigureOverlap;
enum StdError : int;
struct __declspec(uuid("ef769fec-39e1-4be2-abdc-150ff4273a8d"))
/* dispinterface */ _IADEventsCallback;
struct __declspec(uuid("660f86c9-5fda-336b-a27c-9e547e4ab27d"))
/* dual interface */ _AutomationHook;
struct __declspec(uuid("a2d3a83c-89cd-3afb-a7ce-7db7c2ec762d"))
/* dual interface */ _EventManager;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(DIEnum, __uuidof(DIEnum));
_COM_SMARTPTR_TYPEDEF(IAD2DPoint, __uuidof(IAD2DPoint));
_COM_SMARTPTR_TYPEDEF(IAD3DSketchPoint, __uuidof(IAD3DSketchPoint));
_COM_SMARTPTR_TYPEDEF(IAD3DSketchCircularArc, __uuidof(IAD3DSketchCircularArc));
_COM_SMARTPTR_TYPEDEF(IAD3DSketchEllipse, __uuidof(IAD3DSketchEllipse));
_COM_SMARTPTR_TYPEDEF(IAD3DSketchEllipticArc, __uuidof(IAD3DSketchEllipticArc));
_COM_SMARTPTR_TYPEDEF(IAD3DSketchLine, __uuidof(IAD3DSketchLine));
_COM_SMARTPTR_TYPEDEF(IADAssemblyExtrusionFeature, __uuidof(IADAssemblyExtrusionFeature));
_COM_SMARTPTR_TYPEDEF(IADAssemblyHoleFeature, __uuidof(IADAssemblyHoleFeature));
_COM_SMARTPTR_TYPEDEF(IADAutoBrepImportSummary, __uuidof(IADAutoBrepImportSummary));
_COM_SMARTPTR_TYPEDEF(IADBsplineCurve, __uuidof(IADBsplineCurve));
_COM_SMARTPTR_TYPEDEF(IADBsplineSurface, __uuidof(IADBsplineSurface));
_COM_SMARTPTR_TYPEDEF(IADDataFont, __uuidof(IADDataFont));
_COM_SMARTPTR_TYPEDEF(IADDeleteLumpsFeature, __uuidof(IADDeleteLumpsFeature));
_COM_SMARTPTR_TYPEDEF(IADDesignBooleanFeature, __uuidof(IADDesignBooleanFeature));
_COM_SMARTPTR_TYPEDEF(IADDesignProperties, __uuidof(IADDesignProperties));
_COM_SMARTPTR_TYPEDEF(IADDrawingProperties, __uuidof(IADDrawingProperties));
_COM_SMARTPTR_TYPEDEF(IADDrawingSelectionFilter, __uuidof(IADDrawingSelectionFilter));
_COM_SMARTPTR_TYPEDEF(IADIGESOptions, __uuidof(IADIGESOptions));
_COM_SMARTPTR_TYPEDEF(IADImportFileFeature, __uuidof(IADImportFileFeature));
_COM_SMARTPTR_TYPEDEF(IADMeshBooleanFeature, __uuidof(IADMeshBooleanFeature));
_COM_SMARTPTR_TYPEDEF(IADMirrorFeature, __uuidof(IADMirrorFeature));
_COM_SMARTPTR_TYPEDEF(IADMoveFaceFeature, __uuidof(IADMoveFaceFeature));
_COM_SMARTPTR_TYPEDEF(IADOrientConstraint, __uuidof(IADOrientConstraint));
_COM_SMARTPTR_TYPEDEF(IADDesignSelectionFilter, __uuidof(IADDesignSelectionFilter));
_COM_SMARTPTR_TYPEDEF(IADPatternFeature, __uuidof(IADPatternFeature));
_COM_SMARTPTR_TYPEDEF(IADPoint, __uuidof(IADPoint));
_COM_SMARTPTR_TYPEDEF(IAD3DSketchBspline, __uuidof(IAD3DSketchBspline));
_COM_SMARTPTR_TYPEDEF(IADPhysicalProperties, __uuidof(IADPhysicalProperties));
_COM_SMARTPTR_TYPEDEF(IADPrintabilityCheckResults, __uuidof(IADPrintabilityCheckResults));
_COM_SMARTPTR_TYPEDEF(IADRemoveFaceFeature, __uuidof(IADRemoveFaceFeature));
_COM_SMARTPTR_TYPEDEF(IADSketchBspline, __uuidof(IADSketchBspline));
_COM_SMARTPTR_TYPEDEF(IADSketchPoint, __uuidof(IADSketchPoint));
_COM_SMARTPTR_TYPEDEF(IADSketchCircle, __uuidof(IADSketchCircle));
_COM_SMARTPTR_TYPEDEF(IADSketchCircularArc, __uuidof(IADSketchCircularArc));
_COM_SMARTPTR_TYPEDEF(IADSketchEllipse, __uuidof(IADSketchEllipse));
_COM_SMARTPTR_TYPEDEF(IADSketchEllipticArc, __uuidof(IADSketchEllipticArc));
_COM_SMARTPTR_TYPEDEF(IADSketchLine, __uuidof(IADSketchLine));
_COM_SMARTPTR_TYPEDEF(IADSketchText, __uuidof(IADSketchText));
_COM_SMARTPTR_TYPEDEF(IADSMClosedCornerFeature, __uuidof(IADSMClosedCornerFeature));
_COM_SMARTPTR_TYPEDEF(IADSMCornerChamferFeature, __uuidof(IADSMCornerChamferFeature));
_COM_SMARTPTR_TYPEDEF(IADSMCornerRoundFeature, __uuidof(IADSMCornerRoundFeature));
_COM_SMARTPTR_TYPEDEF(IADSMDimpleFeature, __uuidof(IADSMDimpleFeature));
_COM_SMARTPTR_TYPEDEF(IADSMFlangeFeature, __uuidof(IADSMFlangeFeature));
_COM_SMARTPTR_TYPEDEF(IADSMPunchFeature, __uuidof(IADSMPunchFeature));
_COM_SMARTPTR_TYPEDEF(IADSMRebendFeature, __uuidof(IADSMRebendFeature));
_COM_SMARTPTR_TYPEDEF(IADSMTabFeature, __uuidof(IADSMTabFeature));
_COM_SMARTPTR_TYPEDEF(IADSMUnbendFeature, __uuidof(IADSMUnbendFeature));
_COM_SMARTPTR_TYPEDEF(IADSphere, __uuidof(IADSphere));
_COM_SMARTPTR_TYPEDEF(IADTappedThreadInfo, __uuidof(IADTappedThreadInfo));
_COM_SMARTPTR_TYPEDEF(IADThickenSurfaceFeature, __uuidof(IADThickenSurfaceFeature));
_COM_SMARTPTR_TYPEDEF(IADThinWallExtrusionFeature, __uuidof(IADThinWallExtrusionFeature));
_COM_SMARTPTR_TYPEDEF(IADThinWallRevolutionFeature, __uuidof(IADThinWallRevolutionFeature));
_COM_SMARTPTR_TYPEDEF(IADThinWallSweepFeature, __uuidof(IADThinWallSweepFeature));
_COM_SMARTPTR_TYPEDEF(IADTopologySummary, __uuidof(IADTopologySummary));
_COM_SMARTPTR_TYPEDEF(IADTrimModelFeature, __uuidof(IADTrimModelFeature));
_COM_SMARTPTR_TYPEDEF(IADVector, __uuidof(IADVector));
_COM_SMARTPTR_TYPEDEF(IAD3DSketchCircle, __uuidof(IAD3DSketchCircle));
_COM_SMARTPTR_TYPEDEF(IADCircle, __uuidof(IADCircle));
_COM_SMARTPTR_TYPEDEF(IADCircularArc, __uuidof(IADCircularArc));
_COM_SMARTPTR_TYPEDEF(IADCone, __uuidof(IADCone));
_COM_SMARTPTR_TYPEDEF(IADCurve, __uuidof(IADCurve));
_COM_SMARTPTR_TYPEDEF(IADCylinder, __uuidof(IADCylinder));
_COM_SMARTPTR_TYPEDEF(IADEllipse, __uuidof(IADEllipse));
_COM_SMARTPTR_TYPEDEF(IADEllipticalArc, __uuidof(IADEllipticalArc));
_COM_SMARTPTR_TYPEDEF(IADLine, __uuidof(IADLine));
_COM_SMARTPTR_TYPEDEF(IADPlane, __uuidof(IADPlane));
_COM_SMARTPTR_TYPEDEF(IADSurface, __uuidof(IADSurface));
_COM_SMARTPTR_TYPEDEF(IADTorus, __uuidof(IADTorus));
_COM_SMARTPTR_TYPEDEF(IAutomationHook, __uuidof(IAutomationHook));
_COM_SMARTPTR_TYPEDEF(IDecomposedTransformData, __uuidof(IDecomposedTransformData));
_COM_SMARTPTR_TYPEDEF(IADTransformation, __uuidof(IADTransformation));
_COM_SMARTPTR_TYPEDEF(IADGeometryFactory, __uuidof(IADGeometryFactory));
_COM_SMARTPTR_TYPEDEF(INotificationSelector, __uuidof(INotificationSelector));
_COM_SMARTPTR_TYPEDEF(IObjectCollector, __uuidof(IObjectCollector));
_COM_SMARTPTR_TYPEDEF(IADAssemblyConstraint, __uuidof(IADAssemblyConstraint));
_COM_SMARTPTR_TYPEDEF(IADLoftFeature, __uuidof(IADLoftFeature));
_COM_SMARTPTR_TYPEDEF(IAnalyzedSketchData, __uuidof(IAnalyzedSketchData));
_COM_SMARTPTR_TYPEDEF(IPermissionSelector, __uuidof(IPermissionSelector));
_COM_SMARTPTR_TYPEDEF(ISketchDegenerateFigure, __uuidof(ISketchDegenerateFigure));
_COM_SMARTPTR_TYPEDEF(ISketchFigureDisjointEnd, __uuidof(ISketchFigureDisjointEnd));
_COM_SMARTPTR_TYPEDEF(ISketchFigureIntersection, __uuidof(ISketchFigureIntersection));
_COM_SMARTPTR_TYPEDEF(ISketchFigureOpenLoop, __uuidof(ISketchFigureOpenLoop));
_COM_SMARTPTR_TYPEDEF(ISketchFigureOverlap, __uuidof(ISketchFigureOverlap));
_COM_SMARTPTR_TYPEDEF(_IADEventsCallback, __uuidof(_IADEventsCallback));
_COM_SMARTPTR_TYPEDEF(_AutomationHook, __uuidof(_AutomationHook));
_COM_SMARTPTR_TYPEDEF(_EventManager, __uuidof(_EventManager));
_COM_SMARTPTR_TYPEDEF(IAD3DSketch, __uuidof(IAD3DSketch));
_COM_SMARTPTR_TYPEDEF(IAD3DSketches, __uuidof(IAD3DSketches));
_COM_SMARTPTR_TYPEDEF(IAD3DSketchFigure, __uuidof(IAD3DSketchFigure));
_COM_SMARTPTR_TYPEDEF(IAD3DSketchFigures, __uuidof(IAD3DSketchFigures));
_COM_SMARTPTR_TYPEDEF(IADAddOns, __uuidof(IADAddOns));
_COM_SMARTPTR_TYPEDEF(IADAlignConstraint, __uuidof(IADAlignConstraint));
_COM_SMARTPTR_TYPEDEF(IADAngleConstraint, __uuidof(IADAngleConstraint));
_COM_SMARTPTR_TYPEDEF(IADAssemblyConstraints, __uuidof(IADAssemblyConstraints));
_COM_SMARTPTR_TYPEDEF(IADAssemblyFeature, __uuidof(IADAssemblyFeature));
_COM_SMARTPTR_TYPEDEF(IADAssemblyFeatures, __uuidof(IADAssemblyFeatures));
_COM_SMARTPTR_TYPEDEF(IADAssemblyPath, __uuidof(IADAssemblyPath));
_COM_SMARTPTR_TYPEDEF(IADAssemblySession, __uuidof(IADAssemblySession));
_COM_SMARTPTR_TYPEDEF(IADBodies, __uuidof(IADBodies));
_COM_SMARTPTR_TYPEDEF(IADBody, __uuidof(IADBody));
_COM_SMARTPTR_TYPEDEF(IADBOMColumn, __uuidof(IADBOMColumn));
_COM_SMARTPTR_TYPEDEF(IADBOMColumns, __uuidof(IADBOMColumns));
_COM_SMARTPTR_TYPEDEF(IADBOMRow, __uuidof(IADBOMRow));
_COM_SMARTPTR_TYPEDEF(IADBOMRows, __uuidof(IADBOMRows));
_COM_SMARTPTR_TYPEDEF(IADBOMTableSession, __uuidof(IADBOMTableSession));
_COM_SMARTPTR_TYPEDEF(IADChamferFeature, __uuidof(IADChamferFeature));
_COM_SMARTPTR_TYPEDEF(IADCoedge, __uuidof(IADCoedge));
_COM_SMARTPTR_TYPEDEF(IADCoedges, __uuidof(IADCoedges));
_COM_SMARTPTR_TYPEDEF(IADComplexSketchFigure, __uuidof(IADComplexSketchFigure));
_COM_SMARTPTR_TYPEDEF(IADCompositeFigure, __uuidof(IADCompositeFigure));
_COM_SMARTPTR_TYPEDEF(IADSketchShapePattern, __uuidof(IADSketchShapePattern));
_COM_SMARTPTR_TYPEDEF(IADConfiguration, __uuidof(IADConfiguration));
_COM_SMARTPTR_TYPEDEF(IADConfigurations, __uuidof(IADConfigurations));
_COM_SMARTPTR_TYPEDEF(IADGlobalParameterSession, __uuidof(IADGlobalParameterSession));
_COM_SMARTPTR_TYPEDEF(IADDesignAxes, __uuidof(IADDesignAxes));
_COM_SMARTPTR_TYPEDEF(IADDesignAxis, __uuidof(IADDesignAxis));
_COM_SMARTPTR_TYPEDEF(IADDesignMesh, __uuidof(IADDesignMesh));
_COM_SMARTPTR_TYPEDEF(IADDesignMeshes, __uuidof(IADDesignMeshes));
_COM_SMARTPTR_TYPEDEF(IADDesignPlane, __uuidof(IADDesignPlane));
_COM_SMARTPTR_TYPEDEF(IADDesignPlanes, __uuidof(IADDesignPlanes));
_COM_SMARTPTR_TYPEDEF(IADDesignPoint, __uuidof(IADDesignPoint));
_COM_SMARTPTR_TYPEDEF(IADDesignPoints, __uuidof(IADDesignPoints));
_COM_SMARTPTR_TYPEDEF(IADDesignSession, __uuidof(IADDesignSession));
_COM_SMARTPTR_TYPEDEF(IADSavedView, __uuidof(IADSavedView));
_COM_SMARTPTR_TYPEDEF(IADSavedViews, __uuidof(IADSavedViews));
_COM_SMARTPTR_TYPEDEF(IADDesignSurface, __uuidof(IADDesignSurface));
_COM_SMARTPTR_TYPEDEF(IADDesignSurfaces, __uuidof(IADDesignSurfaces));
_COM_SMARTPTR_TYPEDEF(IADDimension, __uuidof(IADDimension));
_COM_SMARTPTR_TYPEDEF(IADDimensions, __uuidof(IADDimensions));
_COM_SMARTPTR_TYPEDEF(IADDraftFeature, __uuidof(IADDraftFeature));
_COM_SMARTPTR_TYPEDEF(IADDrawingSession, __uuidof(IADDrawingSession));
_COM_SMARTPTR_TYPEDEF(IADDrawingView, __uuidof(IADDrawingView));
_COM_SMARTPTR_TYPEDEF(IADDrawingViews, __uuidof(IADDrawingViews));
_COM_SMARTPTR_TYPEDEF(IADEdge, __uuidof(IADEdge));
_COM_SMARTPTR_TYPEDEF(IADEdges, __uuidof(IADEdges));
_COM_SMARTPTR_TYPEDEF(IADEventsCallback, __uuidof(IADEventsCallback));
_COM_SMARTPTR_TYPEDEF(IADExplodedView, __uuidof(IADExplodedView));
_COM_SMARTPTR_TYPEDEF(IADExplodedViews, __uuidof(IADExplodedViews));
_COM_SMARTPTR_TYPEDEF(IADExplodedViewStep, __uuidof(IADExplodedViewStep));
_COM_SMARTPTR_TYPEDEF(IADExplodedViewSteps, __uuidof(IADExplodedViewSteps));
_COM_SMARTPTR_TYPEDEF(IADExternalThreadFeature, __uuidof(IADExternalThreadFeature));
_COM_SMARTPTR_TYPEDEF(IADExtrusionFeature, __uuidof(IADExtrusionFeature));
_COM_SMARTPTR_TYPEDEF(IADFace, __uuidof(IADFace));
_COM_SMARTPTR_TYPEDEF(IADFaces, __uuidof(IADFaces));
_COM_SMARTPTR_TYPEDEF(IADFastenerConstraint, __uuidof(IADFastenerConstraint));
_COM_SMARTPTR_TYPEDEF(IADFilletFeature, __uuidof(IADFilletFeature));
_COM_SMARTPTR_TYPEDEF(IADFolder, __uuidof(IADFolder));
_COM_SMARTPTR_TYPEDEF(IADFolders, __uuidof(IADFolders));
_COM_SMARTPTR_TYPEDEF(IADFolderItem, __uuidof(IADFolderItem));
_COM_SMARTPTR_TYPEDEF(IADFolderItems, __uuidof(IADFolderItems));
_COM_SMARTPTR_TYPEDEF(IADGearConstraint, __uuidof(IADGearConstraint));
_COM_SMARTPTR_TYPEDEF(IADHelicalFeature, __uuidof(IADHelicalFeature));
_COM_SMARTPTR_TYPEDEF(IADHoleFeature, __uuidof(IADHoleFeature));
_COM_SMARTPTR_TYPEDEF(IADInterference, __uuidof(IADInterference));
_COM_SMARTPTR_TYPEDEF(IADInterferences, __uuidof(IADInterferences));
_COM_SMARTPTR_TYPEDEF(IADMaterialLibraries, __uuidof(IADMaterialLibraries));
_COM_SMARTPTR_TYPEDEF(IADMaterialLibrary, __uuidof(IADMaterialLibrary));
_COM_SMARTPTR_TYPEDEF(IADMaterialLibraryFolder, __uuidof(IADMaterialLibraryFolder));
_COM_SMARTPTR_TYPEDEF(IADMaterialLibraryFolders, __uuidof(IADMaterialLibraryFolders));
_COM_SMARTPTR_TYPEDEF(IADLoop, __uuidof(IADLoop));
_COM_SMARTPTR_TYPEDEF(IADLoops, __uuidof(IADLoops));
_COM_SMARTPTR_TYPEDEF(IADLump, __uuidof(IADLump));
_COM_SMARTPTR_TYPEDEF(IADLumps, __uuidof(IADLumps));
_COM_SMARTPTR_TYPEDEF(IADMateConstraint, __uuidof(IADMateConstraint));
_COM_SMARTPTR_TYPEDEF(IADMaterial, __uuidof(IADMaterial));
_COM_SMARTPTR_TYPEDEF(IADMaterials, __uuidof(IADMaterials));
_COM_SMARTPTR_TYPEDEF(IADOccurrence, __uuidof(IADOccurrence));
_COM_SMARTPTR_TYPEDEF(IADOccurrences, __uuidof(IADOccurrences));
_COM_SMARTPTR_TYPEDEF(IADTargetProxy, __uuidof(IADTargetProxy));
_COM_SMARTPTR_TYPEDEF(IADOffsetFaceFeature, __uuidof(IADOffsetFaceFeature));
_COM_SMARTPTR_TYPEDEF(IADParameter, __uuidof(IADParameter));
_COM_SMARTPTR_TYPEDEF(IADParameters, __uuidof(IADParameters));
_COM_SMARTPTR_TYPEDEF(IADRackConstraint, __uuidof(IADRackConstraint));
_COM_SMARTPTR_TYPEDEF(IADScaleFeature, __uuidof(IADScaleFeature));
_COM_SMARTPTR_TYPEDEF(IADScrewConstraint, __uuidof(IADScrewConstraint));
_COM_SMARTPTR_TYPEDEF(IADShellFeature, __uuidof(IADShellFeature));
_COM_SMARTPTR_TYPEDEF(IADTangentInsideConstraint, __uuidof(IADTangentInsideConstraint));
_COM_SMARTPTR_TYPEDEF(IADTangentOutsideConstraint, __uuidof(IADTangentOutsideConstraint));
_COM_SMARTPTR_TYPEDEF(IADVertexChamferFeature, __uuidof(IADVertexChamferFeature));
_COM_SMARTPTR_TYPEDEF(IADPartFeature, __uuidof(IADPartFeature));
_COM_SMARTPTR_TYPEDEF(IADPartFeatures, __uuidof(IADPartFeatures));
_COM_SMARTPTR_TYPEDEF(IADPartSession, __uuidof(IADPartSession));
_COM_SMARTPTR_TYPEDEF(IADShell, __uuidof(IADShell));
_COM_SMARTPTR_TYPEDEF(IADShells, __uuidof(IADShells));
_COM_SMARTPTR_TYPEDEF(IADVertex, __uuidof(IADVertex));
_COM_SMARTPTR_TYPEDEF(IADVertices, __uuidof(IADVertices));
_COM_SMARTPTR_TYPEDEF(IADProjectFeature, __uuidof(IADProjectFeature));
_COM_SMARTPTR_TYPEDEF(IADRepositories, __uuidof(IADRepositories));
_COM_SMARTPTR_TYPEDEF(IADRepository, __uuidof(IADRepository));
_COM_SMARTPTR_TYPEDEF(IADRevolutionFeature, __uuidof(IADRevolutionFeature));
_COM_SMARTPTR_TYPEDEF(IADRoot, __uuidof(IADRoot));
_COM_SMARTPTR_TYPEDEF(IADSession, __uuidof(IADSession));
_COM_SMARTPTR_TYPEDEF(IADSessions, __uuidof(IADSessions));
_COM_SMARTPTR_TYPEDEF(IADSheet, __uuidof(IADSheet));
_COM_SMARTPTR_TYPEDEF(IADSheets, __uuidof(IADSheets));
_COM_SMARTPTR_TYPEDEF(IADSketchConstraint, __uuidof(IADSketchConstraint));
_COM_SMARTPTR_TYPEDEF(IADTeamRole, __uuidof(IADTeamRole));
_COM_SMARTPTR_TYPEDEF(IADTeamRoles, __uuidof(IADTeamRoles));
_COM_SMARTPTR_TYPEDEF(IADUser, __uuidof(IADUser));
_COM_SMARTPTR_TYPEDEF(IADUsers, __uuidof(IADUsers));
_COM_SMARTPTR_TYPEDEF(IADTeam, __uuidof(IADTeam));
_COM_SMARTPTR_TYPEDEF(IADTeams, __uuidof(IADTeams));
_COM_SMARTPTR_TYPEDEF(IADVaultInfo, __uuidof(IADVaultInfo));
_COM_SMARTPTR_TYPEDEF(IADSketch, __uuidof(IADSketch));
_COM_SMARTPTR_TYPEDEF(IADSketchConstraints, __uuidof(IADSketchConstraints));
_COM_SMARTPTR_TYPEDEF(IADSketches, __uuidof(IADSketches));
_COM_SMARTPTR_TYPEDEF(IADSketchFigure, __uuidof(IADSketchFigure));
_COM_SMARTPTR_TYPEDEF(IADSketchFigures, __uuidof(IADSketchFigures));
_COM_SMARTPTR_TYPEDEF(IADSweepFeature, __uuidof(IADSweepFeature));
_COM_SMARTPTR_TYPEDEF(IADWrapFeature, __uuidof(IADWrapFeature));

//
// Type library items
//

enum __declspec(uuid("a084ef35-e5ee-3079-8825-5834b1da25fb"))
ADAccuracySetting : int
{
    ADAccuracySetting_AD_LOW = 0,
    ADAccuracySetting_AD_MEDIUM = 1,
    ADAccuracySetting_AD_HIGH = 2,
    ADAccuracySetting_AD_VERY_HIGH = 3
};

enum __declspec(uuid("50ad659c-9f5a-3e25-8f5d-02a1f367919f"))
ADAssemblyConstraintBoundType : int
{
    ADAssemblyConstraintBoundType_AD_UNKNOWN_TYPE = 0,
    ADAssemblyConstraintBoundType_AD_LOGICAL_TYPE = 1,
    ADAssemblyConstraintBoundType_AD_EQUALITY_TYPE = 2,
    ADAssemblyConstraintBoundType_AD_GREATER_THAN_EQUAL_TYPE = 3,
    ADAssemblyConstraintBoundType_AD_LESS_THAN_EQUAL_TYPE = 4,
    ADAssemblyConstraintBoundType_AD_BOUNDED_TYPE = 5
};

enum __declspec(uuid("7aee98c2-e525-33bd-bad3-232f95f4fd10"))
ADAssemblyConstraintParameterRole : int
{
    ADAssemblyConstraintParameterRole_AD_UNKNOWN_ROLE = 0,
    ADAssemblyConstraintParameterRole_AD_EQUALITY_ROLE = 1,
    ADAssemblyConstraintParameterRole_AD_MINIMUM_ROLE = 2,
    ADAssemblyConstraintParameterRole_AD_MAXIMUM_ROLE = 3,
    ADAssemblyConstraintParameterRole_AD_GEAR_RATIO_1_ROLE = 4,
    ADAssemblyConstraintParameterRole_AD_GEAR_RATIO_2_ROLE = 5
};

enum __declspec(uuid("149b9a38-656c-3fd0-a7f8-dd6ec4b8a532"))
ADAssemblyConstraintType : int
{
    ADAssemblyConstraintType_AD_UNKNOWN_TYPE = 0,
    ADAssemblyConstraintType_AD_MATE_TYPE = 1,
    ADAssemblyConstraintType_AD_ALIGN_TYPE = 2,
    ADAssemblyConstraintType_AD_ORIENT_TYPE = 3,
    ADAssemblyConstraintType_AD_ANGLE_TYPE = 4,
    ADAssemblyConstraintType_AD_TANGENT_INSIDE_TYPE = 5,
    ADAssemblyConstraintType_AD_TANGENT_OUTSIDE_TYPE = 6,
    ADAssemblyConstraintType_AD_FASTENER_TYPE = 7,
    ADAssemblyConstraintType_AD_GEAR_TYPE = 8,
    ADAssemblyConstraintType_AD_RACK_TYPE = 9,
    ADAssemblyConstraintType_AD_SCREW_TYPE = 10
};

enum __declspec(uuid("f4a54d82-a085-3da2-92f1-5ff93f319961"))
ADAssemblyFeatureType : int
{
    ADAssemblyFeatureType_AD_EXTRUSION_FEATURE = 0,
    ADAssemblyFeatureType_AD_HOLE_FEATURE = 1
};

enum __declspec(uuid("f1246a96-51dd-3fb8-a3d8-02be8628e60f"))
ADBOMDataType : int
{
    ADBOMDataType_AD_DATA_TYPE_UNKNOWN = -1,
    ADBOMDataType_AD_DATA_TYPE_NUMBER = 0,
    ADBOMDataType_AD_DATA_TYPE_TEXT = 1,
    ADBOMDataType_AD_DATA_TYPE_DATE = 2,
    ADBOMDataType_AD_DATA_TYPE_PARAMETER = 3
};

enum __declspec(uuid("babf103b-6ecc-32a1-be73-92e49611cdc8"))
ADBOMTableStyle : int
{
    ADBOMTableStyle_AD_BOM_UNKNOWN_TYPE = -1,
    ADBOMTableStyle_AD_BOM_WITH_NO_LINES = 0,
    ADBOMTableStyle_AD_BOM_WITH_ROW_LINES = 1,
    ADBOMTableStyle_AD_BOM_WITH_COLUMN_LINES = 2,
    ADBOMTableStyle_AD_BOM_WITH_ROW_COLUMN_LINES = 3
};

enum __declspec(uuid("e1185540-b87a-3c4f-909e-a01916bd2be9"))
ADBOMTextAlignment : int
{
    ADBOMTextAlignment_AD_UNKNOWN_ALIGNMENT = -1,
    ADBOMTextAlignment_AD_LEFT = 1,
    ADBOMTextAlignment_AD_CENTER = 2,
    ADBOMTextAlignment_AD_RIGHT = 4
};

enum __declspec(uuid("e0b42168-8ca0-35c4-b756-916c8da501be"))
ADBooleanOperator : int
{
    ADBooleanOperator_AD_NULL = 0,
    ADBooleanOperator_AD_UNION = 1,
    ADBooleanOperator_AD_SUBTRACTION = 2,
    ADBooleanOperator_AD_INTERSECTION = 3
};

enum __declspec(uuid("fe9b06bb-152e-360a-9438-7113fdb8a476"))
ADConfigurationLockType : int
{
    ADConfigurationLockType_AD_SUPPRESS_NEW_FEATURES = 1,
    ADConfigurationLockType_AD_SUPPRESS_NEW_COMPONENTS = 2,
    ADConfigurationLockType_AD_SUPPRESS_NEW_CONSTRAINTS = 4,
    ADConfigurationLockType_AD_LOCK_PARAMETER_VALUES = 8,
    ADConfigurationLockType_AD_LOCK_PROPERTY_VALUES = 16,
    ADConfigurationLockType_AD_LOCK_COMPONENT_CONFIG = 32,
    ADConfigurationLockType_AD_HIDE_NEW_INCLUSIONS = 64,
    ADConfigurationLockType_AD_HIDE_NEW_DESIGN_GEOMETRY = 128,
    ADConfigurationLockType_AD_HIDE_NEW_ANNOTATIONS = 256,
    ADConfigurationLockType_AD_HIDE_NEW_SKETCHES = 512,
    ADConfigurationLockType_AD_LOCK_COLOR_PROPERTIES = 1024,
    ADConfigurationLockType_AD_LOCK_ACTIVE_SECTION_VIEW = 2048
};

enum __declspec(uuid("08011427-120b-3d23-8162-124dbc2fa607"))
ADDesignGeometryType : int
{
    ADDesignGeometryType_AD_POINT_FROM_XYZ_COORDINATES = 0,
    ADDesignGeometryType_AD_POINT_FROM_CIRCULAR_EDGE = 1,
    ADDesignGeometryType_AD_POINT_FROM_OFFSET = 2,
    ADDesignGeometryType_AD_POINT_FROM_TOROID_POINT = 3,
    ADDesignGeometryType_AD_POINT_FROM_TWO_AXES = 4,
    ADDesignGeometryType_AD_POINT_FROM_MIDRATIO = 5,
    ADDesignGeometryType_AD_POINT_FROM_THREE_PLANES = 6,
    ADDesignGeometryType_AD_POINT_FROM_PLANE_AXIS = 7,
    ADDesignGeometryType_AD_POINT_ALONG_EDGE = 8,
    ADDesignGeometryType_AD_POINT_FROM_EDGE_PARAMETER = 9,
    ADDesignGeometryType_AD_POINT_FROM_PROJECTTED_PLANE = 10,
    ADDesignGeometryType_AD_POINT_FROM_SKETCH_POINT = 11,
    ADDesignGeometryType_AD_POINT_FROM_TWO_FIGURE_SKETCH = 12,
    ADDesignGeometryType_AD_AXIS_FROM_TWO_POINTS = 13,
    ADDesignGeometryType_AD_AXIS_FROM_CYLINDRICAL_FACE = 14,
    ADDesignGeometryType_AD_AXIS_FROM_TWO_PLANES = 15,
    ADDesignGeometryType_AD_AXIS_FROM_REVOLVED_FACE = 16,
    ADDesignGeometryType_AD_AXIS_FROM_EDGE = 17,
    ADDesignGeometryType_AD_AXIS_FROM_POINT_PLANE = 18,
    ADDesignGeometryType_AD_AXIS_FROM_AXIS_PLANE = 19,
    ADDesignGeometryType_AD_AXIS_FROM_ONELINE_SKETCH = 20,
    ADDesignGeometryType_AD_AXIS_FROM_TWO_POINT_SKETCH = 21,
    ADDesignGeometryType_AD_AXIS_FROM_POINT_NORMAL_SKETCH = 22,
    ADDesignGeometryType_AD_PLANE_FROM_THREE_POINTS = 23,
    ADDesignGeometryType_AD_PLANE_FROM_OFFSET_TO_PLANE = 24,
    ADDesignGeometryType_AD_PLANE_FROM_ANGLE_TO_PLANE = 25,
    ADDesignGeometryType_AD_PLANE_FROM_TWO_AXES = 26,
    ADDesignGeometryType_AD_PLANE_FROM_OFFSET_TO_POINT = 27,
    ADDesignGeometryType_AD_PLANE_FROM_POINT_AXIS = 28,
    ADDesignGeometryType_AD_PLANE_FROM_TANGENT = 29,
    ADDesignGeometryType_AD_PLANE_FROM_TANGENTSLOPE = 30,
    ADDesignGeometryType_AD_PLANE_FROM_CATALOG_FEATURE = 31,
    ADDesignGeometryType_AD_PRIMARY_PLANE = 32,
    ADDesignGeometryType_AD_PRIMARY_AXIS = 33,
    ADDesignGeometryType_AD_PRIMARY_POINT = 34,
    ADDesignGeometryType_AD_PLANE_FROM_EDGE_END = 35
};

enum __declspec(uuid("f7d5aeb5-15f7-300d-8e95-37e9e39462ba"))
ADDetailingOption : int
{
    ADDetailingOption_AD_NONE = 0,
    ADDetailingOption_AD_DESIGN_DIMENSIONS = 1,
    ADDetailingOption_AD_HIDDEN_LINES = 2,
    ADDetailingOption_AD_SUPPRESS_NEW_CONSTRAINTS = 4,
    ADDetailingOption_AD_TANGENT_EDGES = 8,
    ADDetailingOption_AD_COSMETIC_THREADS = 16,
    ADDetailingOption_AD_HOLE_CALLOUTS = 32,
    ADDetailingOption_AD_EXTERNAL_THREAD_CALLOUTS = 64,
    ADDetailingOption_AD_CIRCULAR_HOLE_PATTERN = 128,
    ADDetailingOption_AD_LINEAR_HOLE_PATTERN = 256,
    ADDetailingOption_AD_PART_TRAILS = 512,
    ADDetailingOption_AD_CENTERMARKS = 1024,
    ADDetailingOption_AD_CENTERLINES = 2048,
    ADDetailingOption_AD_BEND_CENTERLINES = 4096,
    ADDetailingOption_AD_PROJECT_FLAT_PATTERN = 8192,
    ADDetailingOption_AD_USE_SHEET_SCALE = 16384,
    ADDetailingOption_AD_ALL = 32767
};

enum __declspec(uuid("f010910d-5c5f-3aa4-9017-48ed7f058da0"))
ADDimensionType : int
{
    ADDimensionType_AD_LINEAR = 1,
    ADDimensionType_AD_RADIAL = 2,
    ADDimensionType_AD_DIAMETRIC = 3,
    ADDimensionType_AD_CIRCULAR = 4,
    ADDimensionType_AD_SMART = 5
};

enum __declspec(uuid("0eb92423-31c7-3473-b949-de2490b8502a"))
ADDirectionType : int
{
    ADDirectionType_AD_ALONG_NORMAL = 0,
    ADDirectionType_AD_ALONG_AXIS = 1,
    ADDirectionType_AD_ALONG_EDGE = 2
};

enum __declspec(uuid("e6071b50-e635-3797-ae44-18b9b3bc3f8b"))
ADDrawingViewType : int
{
    ADDrawingViewType_AD_STANDARD = 0,
    ADDrawingViewType_AD_DRAFT = 1,
    ADDrawingViewType_AD_SHADED = 2
};

enum __declspec(uuid("85231fc7-960a-334b-9689-7ce53531a785"))
ADEdgeChamferType : int
{
    ADEdgeChamferType_AD_DISTANCE_TO_DISTANCE = 0,
    ADEdgeChamferType_AD_ANGLE_DISTANCE = 1,
    ADEdgeChamferType_AD_EQUAL_DISTANCE = 2
};

enum __declspec(uuid("f2941e9a-753a-3e04-85cc-468bf4f202ac"))
ADEntityPointRelation : int
{
    ADEntityPointRelation_POINT_INSIDE_BOUNDARY = 0,
    ADEntityPointRelation_POINT_ON_BOUNDARY = 1,
    ADEntityPointRelation_POINT_OUTSIDE_BOUNDARY = 2
};

enum __declspec(uuid("c8a7c4b6-e167-3cc3-b86c-a34aacddc7bf"))
ADEventChangeType : int
{
    ADEventChangeType_AD_UNSPECIFIED = 0,
    ADEventChangeType_AD_ADD = 1,
    ADEventChangeType_AD_REMOVE = 2,
    ADEventChangeType_AD_MODIFY = 3,
    ADEventChangeType_AD_UNSPECIFIED_EXPLODED_VIEW_CHANGE = 16,
    ADEventChangeType_AD_UNSPECIFIED_CHANGE_ACTIVE_CONFIGURATION = 32,
    ADEventChangeType_AD_UNSPECIFIED_CHANGE_TRANSFORM = 48,
    ADEventChangeType_AD_ADD_BEGIN_SKETCH_MODE = 17,
    ADEventChangeType_AD_ADD_END_SKETCH_MODE = 33,
    ADEventChangeType_AD_ADD_BEGIN_SKETCH_3D_MODE = 49,
    ADEventChangeType_AD_ADD_END_SKETCH_3D_MODE = 65,
    ADEventChangeType_AD_MODIFY_BEGIN_SKETCH_MODE = 19,
    ADEventChangeType_AD_MODIFY_END_SKETCH_MODE = 35,
    ADEventChangeType_AD_MODIFY_BEGIN_SKETCH_3D_MODE = 51,
    ADEventChangeType_AD_MODIFY_END_SKETCH_3D_MODE = 67,
    ADEventChangeType_AD_MODIFY_CHANGE_EDITING_CONTEXT = 83,
    ADEventChangeType_AD_MODIFY_VISIBILITY = 99,
    ADEventChangeType_AD_MODIFY_REFLECTIVITY = 115,
    ADEventChangeType_AD_MODIFY_COLOR = 131,
    ADEventChangeType_AD_MODIFIY_RENAME = 147,
    ADEventChangeType_AD_MODIFY_DESIGN_BOOLEAN = 259,
    ADEventChangeType_AD_MODIFY_SAVE_DESIGN_PROPERTIES = 275,
    ADEventChangeType_AD_MODIFY_GEOMETRY_VISIBILITY = 291,
    ADEventChangeType_AD_MODIFY_TRANSFORM = 307,
    ADEventChangeType_AD_MODIFY_OCCURRENCE_CONFIGURATION = 323,
    ADEventChangeType_AD_MODIFY_RESTORE = 339
};

enum __declspec(uuid("5a86cf4f-7b49-3f53-b3a5-262420cccbcd"))
ADExtendedDesignProperty : int
{
    ADExtendedDesignProperty_AD_COMMENT = 0,
    ADExtendedDesignProperty_AD_COST_CENTER = 1,
    ADExtendedDesignProperty_AD_CREATED_BY = 2,
    ADExtendedDesignProperty_AD_CREATING_APPLICATION = 3,
    ADExtendedDesignProperty_AD_CREATED_DATE = 4,
    ADExtendedDesignProperty_AD_DOCUMENT_NUMBER = 5,
    ADExtendedDesignProperty_AD_ENG_APPROVAL_DATE = 6,
    ADExtendedDesignProperty_AD_ENG_APPROVED_BY = 7,
    ADExtendedDesignProperty_AD_ESTIMATED_COST = 8,
    ADExtendedDesignProperty_AD_KEYWORDS = 9,
    ADExtendedDesignProperty_AD_LAST_AUTHOR = 10,
    ADExtendedDesignProperty_AD_LAST_UPDATE_DATE = 11,
    ADExtendedDesignProperty_AD_MATERIAL = 12,
    ADExtendedDesignProperty_AD_MFG_APPROVED_BY = 13,
    ADExtendedDesignProperty_AD_MFG_APPROVED_DATE = 14,
    ADExtendedDesignProperty_AD_MODIFIED = 15,
    ADExtendedDesignProperty_AD_PRODUCT = 16,
    ADExtendedDesignProperty_AD_RECEIVED_FROM = 17,
    ADExtendedDesignProperty_AD_REVISION = 18,
    ADExtendedDesignProperty_AD_STOCK_SIZE = 19,
    ADExtendedDesignProperty_AD_SUPPLIER = 20,
    ADExtendedDesignProperty_AD_TITLE = 21,
    ADExtendedDesignProperty_AD_VENDOR = 22,
    ADExtendedDesignProperty_AD_WEBLINK = 23
};

enum __declspec(uuid("c12dc8db-3e87-3d34-864e-8e47afa37a52"))
ADFaceProcessingType : int
{
    ADFaceProcessingType_AD_NONE = 0,
    ADFaceProcessingType_AD_STITCH_ADJOINING_FACES = 1,
    ADFaceProcessingType_AD_UNSTITCH_TO_STANDALONE_SURFACES = 2
};

enum __declspec(uuid("2329edf3-b49d-371d-9e65-ea94a964ee4b"))
ADGeometryType : int
{
    ADGeometryType_AD_LINE = 0,
    ADGeometryType_AD_CIRCLE = 1,
    ADGeometryType_AD_ELLIPSE = 2,
    ADGeometryType_AD_BSPLINE = 3,
    ADGeometryType_AD_CIRCULAR_ARC = 5,
    ADGeometryType_AD_ELLIPTICAL_ARC = 6,
    ADGeometryType_AD_PLANE = 7,
    ADGeometryType_AD_CYLINDER = 8,
    ADGeometryType_AD_CONE = 9,
    ADGeometryType_AD_SPHERE = 10,
    ADGeometryType_AD_TORUS = 11,
    ADGeometryType_AD_POINT = 12,
    ADGeometryType_AD_BSURF = 13,
    ADGeometryType_AD_SHAPEPATTERN = 14,
    ADGeometryType_AD_SKETCHTEXT = 15
};

enum __declspec(uuid("82cf9f0e-a8a2-35d1-9719-3738e84f0be0"))
ADHelixConditionType : int
{
    ADHelixConditionType_AD_Natural = 0,
    ADHelixConditionType_AD_Flat = 1
};

enum __declspec(uuid("ee184bde-1dad-307a-bbcd-05b1dd25480f"))
ADHelixType : int
{
    ADHelixType_AD_Height_Pitch = 1,
    ADHelixType_AD_Height_Revolution = 0,
    ADHelixType_AD_Revolution_Pitch = 2,
    ADHelixType_AD_Spiral = 3
};

enum __declspec(uuid("9c741f68-e5a5-309c-9a53-fbdbe11ceb56"))
ADHoleDepthCondition : int
{
    ADHoleDepthCondition_AD_HOLE_DEPTH_CONDITION_UNKNOWN = -1,
    ADHoleDepthCondition_AD_HOLE_TO_DEPTH = 0,
    ADHoleDepthCondition_AD_HOLE_TO_OFFSET_FACE = 2,
    ADHoleDepthCondition_AD_HOLE_THROUGH_ALL = 3
};

enum __declspec(uuid("66633de7-3f94-3243-a7a8-ba13fc433658"))
ADHoleType : int
{
    ADHoleType_AD_UNKNOWN_HOLE = -1,
    ADHoleType_AD_COUNTER_BORED_DRILLED_HOLE = 0,
    ADHoleType_AD_COUNTER_BORED_HOLE = 1,
    ADHoleType_AD_COUNTER_DRILLED_DRILLED_HOLE = 2,
    ADHoleType_AD_COUNTER_DRILLED_HOLE = 3,
    ADHoleType_AD_COUNTER_SUNK_DRILLED_HOLE = 4,
    ADHoleType_AD_COUNTER_SUNK_HOLE = 5,
    ADHoleType_AD_SIMPLE_DRILLED_HOLE = 6,
    ADHoleType_AD_SIMPLE_HOLE = 7,
    ADHoleType_AD_TAPERED_DRILLED_HOLE = 8,
    ADHoleType_AD_TAPERED_HOLE = 9
};

enum __declspec(uuid("d8276bf8-ba89-3064-b75e-7ae10469b7cc"))
ADLoftGuideType : int
{
    ADLoftGuideType_AD_UNKNOWN = 0,
    ADLoftGuideType_AD_GLOBAL = 1,
    ADLoftGuideType_AD_LOCAL = 2,
    ADLoftGuideType_AD_TANGENT = 3,
    ADLoftGuideType_AD_CENTERLINE = 4,
    ADLoftGuideType_AD_NONE = 5
};

enum __declspec(uuid("2a851022-d0a6-302e-af99-2a695d8d9b24"))
ADMaterialPropertyKey : int
{
    ADMaterialPropertyKey_DENSITY_PROPERTY = 0,
    ADMaterialPropertyKey_HARDNESS_BRINELL_PROPERTY = 1,
    ADMaterialPropertyKey_TENSILE_STRENGTH_ULTIMATE_PROPERTY = 2,
    ADMaterialPropertyKey_TENSILE_STRENGTH_YEILD_PROPERTY = 3,
    ADMaterialPropertyKey_MODULUS_OF_ELASTICITY_PROPERTY = 4,
    ADMaterialPropertyKey_POISSONS_PROPERTY = 5,
    ADMaterialPropertyKey_SHEARMODULUS_PROPERTY = 6,
    ADMaterialPropertyKey_SHEARSTRENGTH_PROPERTY = 7,
    ADMaterialPropertyKey_RESISTIVITY_PROPERTY = 8,
    ADMaterialPropertyKey_CTE_PROPERTY = 9,
    ADMaterialPropertyKey_SPECIFICHEAT_PROPERTY = 10,
    ADMaterialPropertyKey_THERMALCONDUCTIVITY_PROPERTY = 11
};

enum __declspec(uuid("e6792a06-7793-3b79-8b48-c5136343adde"))
ADObjectSubType : int
{
    ADObjectSubType_AD_PART = 1,
    ADObjectSubType_AD_ASSEMBLY = 2,
    ADObjectSubType_AD_DRAWING = 3,
    ADObjectSubType_AD_SYMBOL = 4,
    ADObjectSubType_AD_EXTERNAL = 5,
    ADObjectSubType_AD_BOM_TABLE = 6,
    ADObjectSubType_AD_SHEET_METAL = 7,
    ADObjectSubType_AD_CATALOG_FEATURE = 8,
    ADObjectSubType_AD_SHEET_METAL_CATALOG_FEATURE = 9,
    ADObjectSubType_AD_GLOBAL_PARAMETERS = 10
};

enum __declspec(uuid("2a82ca79-d5c0-317c-b6c2-324319a02a44"))
ADObjectType : int
{
    ADObjectType_AD_UNKNOWN = -1,
    ADObjectType_AD_ROOT = 1,
    ADObjectType_AD_REPOSITORY = 2,
    ADObjectType_AD_FOLDER = 3,
    ADObjectType_AD_FOLDER_ITEM = 4,
    ADObjectType_AD_VERSION = 5,
    ADObjectType_AD_SESSION = 6,
    ADObjectType_AD_TEAM = 7,
    ADObjectType_AD_ROLE = 8,
    ADObjectType_AD_USER = 9,
    ADObjectType_AD_PARAMETER = 10,
    ADObjectType_AD_OCCURRENCE = 11,
    ADObjectType_AD_DESIGN_POINT = 12,
    ADObjectType_AD_DESIGN_AXIS = 13,
    ADObjectType_AD_DESIGN_PLANE = 14,
    ADObjectType_AD_TOPOLOGY = 15,
    ADObjectType_AD_SKETCH = 16,
    ADObjectType_AD_SKETCH_FIGURE = 17,
    ADObjectType_AD_PART_FEATURE = 18,
    ADObjectType_AD_GEOMETRY = 19,
    ADObjectType_AD_DESIGN_SURFACE = 20,
    ADObjectType_AD_DIMENSION = 21,
    ADObjectType_AD_3D_SKETCH = 22,
    ADObjectType_AD_ASSEMBLY_CONSTRAINT = 23,
    ADObjectType_AD_CONFIGURATION = 24,
    ADObjectType_AD_EXPLODED_VIEW = 25,
    ADObjectType_AD_EXPLODED_VIEW_STEP = 26,
    ADObjectType_AD_SAVED_VIEW = 27,
    ADObjectType_AD_BOM_COLUMN = 28,
    ADObjectType_AD_BOM_ROW = 29,
    ADObjectType_AD_DATA_FONT = 30,
    ADObjectType_AD_3D_SKETCH_FIGURE = 31,
    ADObjectType_AD_SHEET = 32,
    ADObjectType_AD_DRAWING_VIEW = 33,
    ADObjectType_AD_SKETCH_CONSTRAINT = 34,
    ADObjectType_AD_DESIGN_MESH = 35,
    ADObjectType_AD_ASSEMBLY_FEATURE = 36,
    ADObjectType_AD_MATERIAL = 37,
    ADObjectType_AD_MATERIAL_LIBRARY_FOLDER = 38,
    ADObjectType_AD_MATERIAL_LIBRARY = 39
};

enum __declspec(uuid("d70ba8ef-0b64-38f8-ac37-87b44fc1183e"))
ADSketchConstraintType : int
{
    ADSketchConstraintType_AD_CONSTRAINT_UNKNOWN = 0,
    ADSketchConstraintType_AD_CONSTRAINT_HORIZONTAL = 1,
    ADSketchConstraintType_AD_CONSTRAINT_VERTICAL = 2,
    ADSketchConstraintType_AD_CONSTRAINT_COLLINEAR = 3,
    ADSketchConstraintType_AD_CONSTRAINT_CORADIAL = 4,
    ADSketchConstraintType_AD_CONSTRAINT_COINCIDENT = 5,
    ADSketchConstraintType_AD_CONSTRAINT_PERPENDICULAR = 6,
    ADSketchConstraintType_AD_CONSTRAINT_PARALLEL = 7,
    ADSketchConstraintType_AD_CONSTRAINT_TANGENT = 8,
    ADSketchConstraintType_AD_CONSTRAINT_EQUAL = 9,
    ADSketchConstraintType_AD_CONSTRAINT_MIDPOINT = 10,
    ADSketchConstraintType_AD_CONSTRAINT_INTERSECTION = 11,
    ADSketchConstraintType_AD_CONSTRAINT_SYMMETRIC = 12,
    ADSketchConstraintType_AD_CONSTRAINT_FIX = 13,
    ADSketchConstraintType_AD_CONSTRAINT_NORMAL = 14
};

enum __declspec(uuid("75a684a0-c720-34a6-88ca-0d110f75e942"))
ADViewOrientation : int
{
    ADViewOrientation_AD_FRONT = 1,
    ADViewOrientation_AD_BACK = 2,
    ADViewOrientation_AD_LEFT = 4,
    ADViewOrientation_AD_RIGHT = 8,
    ADViewOrientation_AD_TOP = 16,
    ADViewOrientation_AD_BOTTOM = 32,
    ADViewOrientation_AD_TOP_LEFT = 64,
    ADViewOrientation_AD_TOP_RIGHT = 128,
    ADViewOrientation_AD_BOTTOM_LEFT = 256,
    ADViewOrientation_AD_BOTTOM_RIGHT = 512
};

enum __declspec(uuid("0fda003f-df12-32ac-96a1-1680e1cba248"))
ADParameterType : int
{
    ADParameterType_AD_DISTANCE = 0,
    ADParameterType_AD_ANGLE = 1,
    ADParameterType_AD_COUNT = 2,
    ADParameterType_AD_SCALE = 3
};

enum __declspec(uuid("f9ce83a0-6650-3f44-89d4-424225645f1a"))
ADPartFeatureEndCondition : int
{
    ADPartFeatureEndCondition_AD_TO_DEPTH = 0,
    ADPartFeatureEndCondition_AD_MID_PLANE = 1,
    ADPartFeatureEndCondition_AD_TO_NEXT = 2,
    ADPartFeatureEndCondition_AD_TO_GEOMETRY = 3,
    ADPartFeatureEndCondition_AD_THROUGH_ALL = 4,
    ADPartFeatureEndCondition_AD_ENTIRE_PATH = 5
};

enum __declspec(uuid("5b8fcae5-f2a3-3355-ad60-42caa5923360"))
ADPartFeatureType : int
{
    ADPartFeatureType_AD_EXTRUSION_FEATURE = 0,
    ADPartFeatureType_AD_REVOLUTION_FEATURE = 1,
    ADPartFeatureType_AD_LOFT_FEATURE = 2,
    ADPartFeatureType_AD_SWEEP_FEATURE = 3,
    ADPartFeatureType_AD_FILLET_FEATURE = 4,
    ADPartFeatureType_AD_CHAMFER_FEATURE = 5,
    ADPartFeatureType_AD_SHELL_FEATURE = 6,
    ADPartFeatureType_AD_DRAFT_FEATURE = 7,
    ADPartFeatureType_AD_HOLE_FEATURE = 8,
    ADPartFeatureType_AD_MIRROR_FEATURE = 9,
    ADPartFeatureType_AD_PATTERN_FEATURE = 10,
    ADPartFeatureType_AD_DESIGNBOOLEAN_FEATURE = 11,
    ADPartFeatureType_AD_SM_CLOSEDCORNER_FEATURE = 12,
    ADPartFeatureType_AD_SM_CORNERCHAMFER_FEATURE = 13,
    ADPartFeatureType_AD_SM_CORNERROUND_FEATURE = 14,
    ADPartFeatureType_AD_SM_DIMPLE_FEATURE = 15,
    ADPartFeatureType_AD_SM_FLANGE_FEATURE = 16,
    ADPartFeatureType_AD_SM_PUNCH_FEATURE = 17,
    ADPartFeatureType_AD_SM_REBEND_FEATURE = 18,
    ADPartFeatureType_AD_SM_UNBEND_FEATURE = 19,
    ADPartFeatureType_AD_IMPORT_FILE_FEATURE = 20,
    ADPartFeatureType_AD_SM_TAB_FEATURE = 21,
    ADPartFeatureType_AD_HELICAL_FEATURE = 22,
    ADPartFeatureType_AD_THIN_WALL_EXTRUSION_FEATURE = 23,
    ADPartFeatureType_AD_THIN_WALL_REVOLUTION_FEATURE = 24,
    ADPartFeatureType_AD_THIN_WALL_SWEEP_FEATURE = 25,
    ADPartFeatureType_AD_SCALE_FEATURE = 26,
    ADPartFeatureType_AD_THICKEN_SURFACE_FEATURE = 27,
    ADPartFeatureType_AD_TRIM_MODEL_FEATURE = 28,
    ADPartFeatureType_AD_REMOVE_FACE_FEATURE = 29,
    ADPartFeatureType_AD_OFFSET_FACE_FEATURE = 30,
    ADPartFeatureType_AD_MOVE_FACE_FEATURE = 31,
    ADPartFeatureType_AD_VERTEX_CHAMFER_FEATURE = 32,
    ADPartFeatureType_AD_EXTERNAL_THREAD_FEATURE = 33,
    ADPartFeatureType_AD_DELETE_LUMPS_FEATURE = 34,
    ADPartFeatureType_AD_MESH_BOOLEAN_FEATURE = 35,
    ADPartFeatureType_AD_WRAP_FEATURE = 36,
    ADPartFeatureType_AD_PROJECT_FEATURE = 37
};

enum __declspec(uuid("6476288e-9bee-36ff-9bfb-4cd894ca9a6b"))
ADPitchType : int
{
    ADPitchType_AD_Constant = 0,
    ADPitchType_AD_VariableRatio = 1,
    ADPitchType_AD_VariableEnd = 2
};

enum __declspec(uuid("1d3ef135-3293-33ec-b203-842849d58d46"))
ADSecureObjectType : int
{
    ADSecureObjectType_AD_SECURE_FOLDER = 1,
    ADSecureObjectType_AD_SECURE_DESIGN = 2,
    ADSecureObjectType_AD_SECURE_DRAWING = 4,
    ADSecureObjectType_AD_SECURE_SYMBOL = 8,
    ADSecureObjectType_AD_SECURE_FEATURE = 16,
    ADSecureObjectType_AD_SECURE_EXTERNAL = 32,
    ADSecureObjectType_AD_SECURE_BOMTABLE = 64
};

enum __declspec(uuid("fb1ab1ac-7f1f-339d-b359-25d3d8eff907"))
ADSelectionFilterOption : int
{
    ADSelectionFilterOption_AD_NONE = 0,
    ADSelectionFilterOption_AD_VERTICES = 1,
    ADSelectionFilterOption_AD_EDGES = 2,
    ADSelectionFilterOption_AD_FACES = 3,
    ADSelectionFilterOption_AD_FACES_EDGES = 4,
    ADSelectionFilterOption_AD_FACES_EDGES_VERTICES = 5,
    ADSelectionFilterOption_AD_FEATURES = 6,
    ADSelectionFilterOption_AD_SURFACES = 7,
    ADSelectionFilterOption_AD_PARTS = 8,
    ADSelectionFilterOption_AD_COMPONENTS = 9
};

enum __declspec(uuid("c34e583d-4bf1-342d-8c4a-9410f0f46420"))
ADTappedThreadType : int
{
    ADTappedThreadType_AD_UNKNOWN_THREAD = -1,
    ADTappedThreadType_AD_UNC = 1,
    ADTappedThreadType_AD_UNF = 2,
    ADTappedThreadType_AD_UNEF = 3,
    ADTappedThreadType_AD_UNS = 4,
    ADTappedThreadType_AD_METRIC_COARSE = 5,
    ADTappedThreadType_AD_METRIC_FINE = 6,
    ADTappedThreadType_AD_METRIC_SPECIAL = 7,
    ADTappedThreadType_AD_NPT = 9,
    ADTappedThreadType_AD_GENERIC_ENGLISH = 1000,
    ADTappedThreadType_AD_GENERIC_METRIC = 2000
};

enum __declspec(uuid("051153b0-f41c-3583-98b0-9761fb5df87c"))
ADTopologyType : int
{
    ADTopologyType_AD_BODY = 0,
    ADTopologyType_AD_LUMP = 1,
    ADTopologyType_AD_SHELL = 2,
    ADTopologyType_AD_FACE = 3,
    ADTopologyType_AD_LOOP = 4,
    ADTopologyType_AD_COEDGE = 5,
    ADTopologyType_AD_EDGE = 6,
    ADTopologyType_AD_VERTEX = 7
};

enum __declspec(uuid("d7bc636b-15a3-3ff2-8e75-1bc4f0794f3d"))
ADUnits : int
{
    ADUnits_AD_UNITLESS = 1,
    ADUnits_AD_MILLIMETERS = 200,
    ADUnits_AD_CENTIMETERS = 201,
    ADUnits_AD_METERS = 202,
    ADUnits_AD_INCHES = 203,
    ADUnits_AD_FEET = 204,
    ADUnits_AD_FEET_INCHES = 205,
    ADUnits_AD_DEGREES = 100,
    ADUnits_AD_DEGREES_MINUTES = 101,
    ADUnits_AD_DEGREES_MINUTES_SECONDS = 102,
    ADUnits_AD_RADIANS = 103,
    ADUnits_AD_KILOGRAMS = 400,
    ADUnits_AD_GRAMS = 401,
    ADUnits_AD_POUNDMASS = 402
};

enum __declspec(uuid("d80e1e52-9ca8-3edb-ba60-055fd96fad7e"))
ADWrapFocusType : int
{
    ADWrapFocusType_AD_NEAREST_POINT = 0,
    ADWrapFocusType_AD_SKETCH_CENTER = 1,
    ADWrapFocusType_AD_SKETCH_PLANE = 2
};

struct __declspec(uuid("f111dc3a-f2be-457a-96eb-9d86c7a2ddd0"))
AutomationHook;
    // interface _AutomationHook
    // interface _Object
    // [ default ] interface IAutomationHook

enum __declspec(uuid("8f9cc1e6-e08e-30d6-a16b-677d5d7bfd98"))
CustomError : int
{
    CustomError_E_FIRST = -2147220992,
    CustomError_AD_E_FOLDER_NOT_FOUND = -2147220991,
    CustomError_AD_E_OBJECT_TYPE_UNSUPPORTED = -2147220990,
    CustomError_AD_E_SOBJECT_TYPE_UNKNOWN = -2147220989,
    CustomError_AD_E_SOBJECT_TYPE_UNDEFINED = -2147220988,
    CustomError_AD_E_VARIANT_TYPE_UNSUPPORTED = -2147220987,
    CustomError_AD_E_INDEX_OUT_OF_BOUNDS = -2147220986,
    CustomError_AD_E_FOLDER_NOT_FOUND_AT_INDEX = -2147220985,
    CustomError_AD_E_FILE_DOES_NOT_EXIST = -2147220984,
    CustomError_AD_E_FOLDERITEM_NOT_FOUND_AT_INDEX = -2147220983,
    CustomError_AD_E_OCCURRENCE_NOT_FOUND_AT_INDEX = -2147220982,
    CustomError_AD_E_FOLDERITEM_TYPE_UNSUPPORTED = -2147220981,
    CustomError_AD_E_CANNOT_WITHDRAW_INTERNAL_TYPE = -2147220980,
    CustomError_AD_E_SESSION_NOT_EXIST = -2147220979,
    CustomError_AD_E_REPOSVERSIONREF_INVALID = -2147220978,
    CustomError_AD_E_DESIGN_PROPERTIES_UNAVIALABLE = -2147220977,
    CustomError_AD_E_OBJECT_NOT_FOUND_AT_INDEX = -2147220976,
    CustomError_AD_E_PARAMETER_TYPE_UNSUPPORTED = -2147220975,
    CustomError_AD_E_PARAMETER_NAME_EXISTS = -2147220974,
    CustomError_AD_E_PARAMETER_NAME_UNSUPPORTED = -2147220973,
    CustomError_AD_E_PARAMETER_VALUE_UNSUPPORTED = -2147220972,
    CustomError_AD_E_PARAMETER_EQUATION_UNSUPPORTED = -2147220971,
    CustomError_AD_E_PARAMETER_OPERATION_UNSUPPORTED = -2147220970,
    CustomError_AD_E_PARAMETER_DOES_NOT_EXIST = -2147220969,
    CustomError_AD_E_PARAMETER_TRANSACTION_ERROR = -2147220968,
    CustomError_AD_E_PHYSICAL_PROPERTIES_UNAVIALABLE = -2147220967,
    CustomError_AD_E_GEOMETRY_CREATION_FAILURE = -2147220966,
    CustomError_AD_E_COLLINEAR_POINTS = -2147220965,
    CustomError_AD_E_SERVER_INVALID_EXPRESSION = -2147220964,
    CustomError_AD_E_ACTIVE_SKETCHSESSION_EXISTS = -2147220963,
    CustomError_AD_E_INVALID_PLANE = -2147220962,
    CustomError_AD_E_INVALID_FACE = -2147220961,
    CustomError_AD_E_INVALID_EDGE = -2147220960,
    CustomError_AD_E_NONPLANAR_FACE = -2147220959,
    CustomError_AD_E_AXIS_PLANE_PARALLEL = -2147220958,
    CustomError_AD_E_CURVED_FACE = -2147220957,
    CustomError_AD_E_NO_ACTIVE_SKETCHSESSION = -2147220956,
    CustomError_AD_E_GEOMETRY_PRODCUER_FAILED = -2147220955,
    CustomError_AD_E_CANNOT_DELETE_PLANE = -2147220954,
    CustomError_AD_E_CANNOT_DELETE_SURFACE = -2147220953,
    CustomError_AD_E_CANNOT_DELETE_AXIS = -2147220952,
    CustomError_AD_E_CANNOT_DELETE_POINT = -2147220951,
    CustomError_AD_E_CANNOT_DELETE_SKETCH = -2147220950,
    CustomError_AD_E_SKETCH_CREATION_FAILED = -2147220949,
    CustomError_AD_E_TOOFEW_CTRLPOINTS = -2147220948,
    CustomError_AD_E_OPEN_FIGURE = -2147220947,
    CustomError_AD_E_INVALD_CURRENT_SKETCHSESSION = -2147220946,
    CustomError_AD_E_UNSUPPORTED_OPERATION = -2147220945,
    CustomError_AD_E_ZERO_DEPTH = -2147220944,
    CustomError_AD_E_ZERO_RADIUS = -2147220943,
    CustomError_AD_E_INVALID_GEOMETRY = -2147220942,
    CustomError_AD_E_OPEN_SKETCH = -2147220941,
    CustomError_AD_E_CONSUMED_SKETCH = -2147220940,
    CustomError_AD_E_INVALID_ANGLE = -2147220939,
    CustomError_AD_E_INVALID_SKETCHSESSION = -2147220938,
    CustomError_AD_E_AXIS_PARALELL_SKETCH = -2147220937,
    CustomError_AD_E_INVALID_SKETCH = -2147220936,
    CustomError_AD_E_INVALID_ENDCONDITION = -2147220935,
    CustomError_AD_E_INVALID_SOURCE_OBJECT = -2147220934,
    CustomError_AD_E_DIRECTION_PARALELL_SKETCH = -2147220933,
    CustomError_AD_E_CANNOT_DELETE_FEATURE = -2147220932,
    CustomError_AD_E_INVALID_AXIS = -2147220931,
    CustomError_AD_E_INVALID_POINT = -2147220930,
    CustomError_AD_E_INVALID_ARRAY = -2147220929,
    CustomError_AD_E_INVALID_PATHOBJECT = -2147220928,
    CustomError_AD_E_PART_INCLUSION_FAILED = -2147220927,
    CustomError_AD_E_CANNOT_INSERT_OCCURRENCE = -2147220926,
    CustomError_AD_E_SM_INCLUSION_FAILED = -2147220925,
    CustomError_AD_E_ASSEMBLY_INCLUSION_FAILED = -2147220924,
    CustomError_AD_E_INVALID_ASSEMBLYFILE = -2147220923,
    CustomError_AD_E_INVALID_FILE = -2147220922,
    CustomError_AD_E_PART_SESSION_FAILED = -2147220921,
    CustomError_AD_E_ASSEMBLY_SESSION_FAILED = -2147220920,
    CustomError_AD_E_NO_INCLUSIONNODE = -2147220919,
    CustomError_AD_E_ACTIVEOCCURRENCE = -2147220918,
    CustomError_AD_E_CANNOT_DELETE_ROOT = -2147220917,
    CustomError_AD_E_INVALID_OBJECT = -2147220916,
    CustomError_AD_E_INVALID_SKETCHFIGURE = -2147220915,
    CustomError_AD_E_GUI_NOT_AVAILABLE = -2147220914,
    CustomError_AD_E_INVALID_POLEARRAY_SIZE = -2147220913,
    CustomError_AD_E_INVALID_UKNOTARRAY_SIZE = -2147220912,
    CustomError_AD_E_INVALID_VKNOTARRAY_SIZE = -2147220911,
    CustomError_AD_E_INVALID_WEIGHTARRAY_SIZE = -2147220910,
    CustomError_AD_E_CANNOT_TRANSFORM_OCCURRENCE = -2147220909,
    CustomError_AD_E_EDGE_ZERO_LENGTH = -2147220908,
    CustomError_AD_E_EQUATION_ILLEGAL = -2147220907,
    CustomError_AD_E_GEOMETRY_QRY_FAILED = -2147220906,
    CustomError_JAVA_E_INVOCATION_TARGET_EXCEPTION = -2147220905,
    CustomError_JAVA_E_INSTANTIATION_EXCEPTION = -2147220904,
    CustomError_JAVA_E_NO_SUCH_FIELD_EXCEPTION = -2147220903,
    CustomError_JAVA_E_NEGATIVE_ARRAY_SIZE_EXCEPTION = -2147220902,
    CustomError_JAVA_E_NO_CLASS_DEF_FOUND_ERROR = -2147220901,
    CustomError_JAVA_E_JAVA_LANG_RUNTIME_EXCEPTION = -2147220900,
    CustomError_JAVA_E_STRING_INDEX_OUT_OF_BOUNDS_EXCEPTION = -2147220899,
    CustomError_JAVA_E_INDEX_OUT_OF_BOUNDS_EXCEPTION = -2147220898,
    CustomError_JAVA_E_EOF_EXCEPTION = -2147220897,
    CustomError_JAVA_E_FILE_NOT_FOUND_EXCEPTION = -2147220896,
    CustomError_JAVA_E_NOT_ACTIVE_EXCEPTION = -2147220895,
    CustomError_JAVA_E_INVALIDOBJECT_EXCEPTION = -2147220894,
    CustomError_JAVA_E_OBJECT_STREAM_EXCEPTION = -2147220893,
    CustomError_JAVA_E_SOCKET_EXCEPTION = -2147220892,
    CustomError_JAVA_E_MALFORMED_URL_EXCEPTION = -2147220891,
    CustomError_JAVA_E_NO_ROUTE_TO_HOST_EXCEPTION = -2147220890,
    CustomError_JAVA_E_CONNECT_EXCEPTION = -2147220889,
    CustomError_JAVA_E_NO_SUCH_ELEMENT_EXCEPTION = -2147220888,
    CustomError_JAVA_E_EMPTY_STACK_EXCEPTION = -2147220887,
    CustomError_ERR_REPO_FOLDER_NAME_ALREADY_EXISTS_IN_FOLDER = -2147220886,
    CustomError_ERR_REPO_ITEM_NAME_ALREADY_EXISTS_IN_FOLDER = -2147220885,
    CustomError_ERR_REPO_NO_FOLDER_ITEM_NAME = -2147220884,
    CustomError_ERR_REPO_VERSION_ALREADY_EXISTS_FOR_ITEM = -2147220883,
    CustomError_ERR_REPO_NO_HISTORY = -2147220882,
    CustomError_ERR_REPO_COULD_NOT_FIND_NOTE = -2147220881,
    CustomError_ERR_REPO_INVALID_NULL_REFERENCE = -2147220880,
    CustomError_ERR_REPO_INVALID_REF_MISSING_REPO_NAME = -2147220879,
    CustomError_ERR_REPO_INVALID_REF_MISSING_FOLDER_PATH = -2147220878,
    CustomError_ERR_REPO_INVALID_REF_BAD_FOLDER_PATH = -2147220877,
    CustomError_ERR_REPO_INVALID_REF_BAD_ITEM_NAME = -2147220876,
    CustomError_ERR_REPO_INVALID_REF_BAD_REPO_NAME = -2147220875,
    CustomError_ERR_REPO_INVALID_REF_BAD_VERSION_ID = -2147220874,
    CustomError_ERR_REPO_ITEM_ALREADY_EXISTS = -2147220873,
    CustomError_ERR_REPO_FOLDER_ALREADY_EXISTS = -2147220872,
    CustomError_ERR_REPO_FORWARDING_ADDRESS = -2147220871,
    CustomError_ERR_REPO_REPO_NOT_FOUND = -2147220870,
    CustomError_ERR_REPO_FOLDER_NOT_IN_MAP = -2147220869,
    CustomError_ERR_REPO_ITEM_NOT_IN_MAP = -2147220868,
    CustomError_ERR_REPO_REFERENCE_NOT_FOUND = -2147220867,
    CustomError_ERR_REPO_FOLDER_NOT_FOUND = -2147220866,
    CustomError_ERR_REPO_MAP_COLLISION_ITEM = -2147220865,
    CustomError_ERR_REPO_MAP_COLLISION_FOLDER = -2147220864,
    CustomError_ERR_REPO_UNREGISTER_FOLDER_FAILURE = -2147220863,
    CustomError_ERR_REPO_UNREGISTER_ITEM_FAILURE = -2147220862,
    CustomError_ERR_REPO_REPO_INSTANCE_ALREADY_EXISTS = -2147220861,
    CustomError_ERR_REPO_INVALID_SECURE_OBJECT_TYPE = -2147220860,
    CustomError_ERR_REPO_ROOT_PATH_ALREADY_EXISTS = -2147220859,
    CustomError_ERR_REPO_NOT_CREATE_ROOT_DIR = -2147220858,
    CustomError_ERR_REPO_NOT_CREATE_HISTORIES_DIR = -2147220857,
    CustomError_ERR_REPO_NOT_CREATE_LABELS_DIR = -2147220856,
    CustomError_ERR_REPO_NOT_CREATE_PROJECTS_DIR = -2147220855,
    CustomError_ERR_REPO_NOT_CREATE_RECYCLEBIN_DIR = -2147220854,
    CustomError_ERR_REPO_NOT_CREATE_PROPERTIES_DIR = -2147220853,
    CustomError_ERR_REPO_NOT_CREATE_VERSIONS_DIR = -2147220852,
    CustomError_ERR_REPO_NOT_CREATE_WORKSPACES_DIR = -2147220851,
    CustomError_ERR_REPO_FOLDER_DOES_NOT_EXIST = -2147220850,
    CustomError_ERR_REPO_NO_UNDO_REDO_HISTORY = -2147220849,
    CustomError_ERR_REPO_ITEM_POLICY_INVALID_SECURE_OBJECT_TYPE = -2147220848,
    CustomError_ERR_REPO_NOT_DELETE_DIR = -2147220847,
    CustomError_ERR_REPO_NOT_FIND_RECYCLEBIN_DATA = -2147220846,
    CustomError_ERR_REPO_NOT_UNDO_RESTORE = -2147220845,
    CustomError_ERR_REPO_UNKNOWN_OBJECT_TYPE = -2147220844,
    CustomError_ERR_REPO_FOLDERITEM_IN_UNKNOWN_FORMAT = -2147220843,
    CustomError_ERR_REPO_NOT_WRITE_FILE_TO_DISK = -2147220842,
    CustomError_ERR_REPO_NOT_CLOSE_FILE = -2147220841,
    CustomError_ERR_REPO_INVALID_LABEL_FILENAME = -2147220840,
    CustomError_ERR_REPO_EXISTING_LABEL_REFERENCES = -2147220839,
    CustomError_ERR_REPO_NOT_DELETE_FILE = -2147220838,
    CustomError_ERR_REPO_INVALID_REFERENCE_COUNT = -2147220837,
    CustomError_ERR_REPO_NOT_READ_FILE_FROM_DISK = -2147220836,
    CustomError_ERR_REPO_NOT_LOAD_RECYCLEBIN_FROM_DISK = -2147220835,
    CustomError_ERR_REPO_NOT_STORE_RECYCLEBIN_TO_DISK = -2147220834,
    CustomError_ERR_REPO_VERSION_IN_UNKNOWN_FORMAT = -2147220833,
    CustomError_ERR_REPO_INVALID_USERID = -2147220832,
    CustomError_ERR_REPO_NO_DATA_FOR_THAT_VERSION = -2147220831,
    CustomError_ERR_REPO_VERSIONHISTORY_IN_UNKNOWN_FORMAT = -2147220830,
    CustomError_ERR_REPO_UNDO_COPY_FAIL = -2147220829,
    CustomError_ERR_REPO_TARGET_REF_NOT_IN_MAP = -2147220828,
    CustomError_ERR_REPO_NO_ITEM_OR_FOLDER_REFERENCES = -2147220827,
    CustomError_ERR_REPO_NO_REPO_SELECTED = -2147220826,
    CustomError_ERR_REPO_NODE_ALREADY_EXISTS = -2147220825,
    CustomError_ERR_REPO_NOT_REMOVE_NODE = -2147220824,
    CustomError_ERR_REPO_INVALID_THUMBNAIL_TYPE = -2147220823,
    CustomError_ERR_REPO_INVALID_COLUMN_NUMBER = -2147220822,
    CustomError_ERR_REPO_INVALID_NAME_LENGTH = -2147220821,
    CustomError_ERR_REPO_INVALID_CHAR_TAB = -2147220820,
    CustomError_ERR_REPO_INVALID_CHAR = -2147220819,
    CustomError_ERR_REPO_NAME_EXCEEDS_MAX_LENGTH = -2147220818,
    CustomError_ERR_REPO_NAME_CANNOT_BEGIN_WITH_PERIOD = -2147220817,
    CustomError_ERR_REPO_NAME_CANNOT_END_WITH_PERIOD = -2147220816,
    CustomError_ERR_REPO_REPO_IS_READONLY = -2147220815,
    CustomError_ERR_REPO_NO_PERMISSION_TO_ADD_NOTE = -2147220814,
    CustomError_ERR_REPO_NO_PERMISSION_TO_BRANCH = -2147220813,
    CustomError_ERR_REPO_NO_PERMISSION_TO_COPY_FOLDER = -2147220812,
    CustomError_ERR_REPO_NO_PERMISSION_TO_COPY_ITEM = -2147220811,
    CustomError_ERR_REPO_NO_PERMISSION_TO_CREATE_FOLDER = -2147220810,
    CustomError_ERR_REPO_NO_PERMISSION_TO_CREATE_ITEM = -2147220809,
    CustomError_ERR_REPO_NO_PERMISSION_TO_DELETE_FOLDER = -2147220808,
    CustomError_ERR_REPO_NO_PERMISSION_TO_DELETE_ITEM = -2147220807,
    CustomError_ERR_REPO_NO_PERMISSION_TO_DELETE_NOTE = -2147220806,
    CustomError_ERR_REPO_NO_PERMISSION_TO_READ_FOLDER = -2147220805,
    CustomError_ERR_REPO_NO_PERMISSION_TO_EMPTY_RECYCLEBIN = -2147220804,
    CustomError_ERR_REPO_NO_PERMISSION_TO_MOVE_ITEM = -2147220803,
    CustomError_ERR_REPO_NO_PERMISSION_TO_MOVE_FOLDER = -2147220802,
    CustomError_ERR_REPO_NO_PERMISSION_TO_READ_HISTORY = -2147220801,
    CustomError_ERR_REPO_NO_PERMISSION_TO_READ_ITEM = -2147220800,
    CustomError_ERR_REPO_NO_PERMISSION_TO_GET_READABLE_WORKSPACE = -2147220799,
    CustomError_ERR_REPO_NO_PERMISSION_TO_GET_WRITABLE_WORKSPACE = -2147220798,
    CustomError_ERR_REPO_NO_PERMISSION_TO_IMPORTMOVE_FOLDER = -2147220797,
    CustomError_ERR_REPO_NO_PERMISSION_TO_IMPORTMOVE_ITEM = -2147220796,
    CustomError_ERR_REPO_NO_PERMISSION_TO_CHECKOUT = -2147220795,
    CustomError_ERR_REPO_NO_PERMISSION_TO_PIN = -2147220794,
    CustomError_ERR_REPO_NO_PERMISSION_TO_PURGE = -2147220793,
    CustomError_ERR_REPO_NO_PERMISSION_TO_RENAME_FOLDER = -2147220792,
    CustomError_ERR_REPO_NO_PERMISSION_TO_RENAME_ITEM = -2147220791,
    CustomError_ERR_REPO_NO_PERMISSION_TO_ROLLBACK = -2147220790,
    CustomError_ERR_REPO_NO_PERMISSION_AS_ADMIN_FOR_FOLDER = -2147220789,
    CustomError_ERR_REPO_NO_PERMISSION_AS_ADMIN_FOR_ITEM = -2147220788,
    CustomError_ERR_REPO_NO_PERMISSION_TO_SHARE = -2147220787,
    CustomError_ERR_REPO_NO_PERMISSION_TO_UNPIN = -2147220786,
    CustomError_ERR_REPO_NO_PERMISSION_TO_UPDATE = -2147220785,
    CustomError_ERR_REPO_GUID_NOT_FOUND = -2147220784,
    CustomError_ERR_REPO_NO_BRANCHING_FROM_RECYCLEBIN = -2147220783,
    CustomError_ERR_REPO_NO_BRANCHING_INTO_RECYCLEBIN = -2147220782,
    CustomError_ERR_REPO_NO_COPY_RECYCLEBIN = -2147220781,
    CustomError_ERR_REPO_NO_COPY_FOLDERS_INTO_RECYCLEBIN = -2147220780,
    CustomError_ERR_REPO_NO_COPY_ITEMS_FROM_RECYCLEBIN = -2147220779,
    CustomError_ERR_REPO_NO_COPY_ITEMS_INTO_RECYCLEBIN = -2147220778,
    CustomError_ERR_REPO_RECYCLEBIN_IS_RESERVED_NAME = -2147220777,
    CustomError_ERR_REPO_NO_DELETE_RECYCLEBIN = -2147220776,
    CustomError_ERR_REPO_NO_MOVE_RECYCLEBIN = -2147220775,
    CustomError_ERR_REPO_NO_MOVE_ROOT_FOLDER = -2147220774,
    CustomError_ERR_REPO_NO_ACCESS_TO_ITEMS_IN_RECYCLEBIN = -2147220773,
    CustomError_ERR_REPO_NO_MOVE_FOLDERS_INTO_RECYCLEBIN = -2147220772,
    CustomError_ERR_REPO_NO_MOVE_ITEMS_FROM_RECYCLEBIN = -2147220771,
    CustomError_ERR_REPO_NO_MOVE_ITEMS_INTO_RECYCLEBIN = -2147220770,
    CustomError_ERR_REPO_FILEREPO_DOES_NOT_EXIST = -2147220769,
    CustomError_ERR_REPO_NO_RENAME_RECYCLEBIN = -2147220768,
    CustomError_ERR_REPO_NO_RENAME_ROOT_FOLDER = -2147220767,
    CustomError_ERR_REPO_NO_SHARE_ITEMS_FROM_RECYCLEBIN = -2147220766,
    CustomError_ERR_REPO_NO_SHARE_ITEMS_INTO_RECYCLEBIN = -2147220765,
    CustomError_ERR_REPO_SOURCE_ITEM_ALREADY_IN_TARGET = -2147220764,
    CustomError_ERR_REPO_NO_CREATE_FOLDER = -2147220763,
    CustomError_ERR_REPO_NO_DELETE_FOLDER_SECURITY_FILE = -2147220762,
    CustomError_ERR_REPO_NO_DELETE_FOLDER = -2147220761,
    CustomError_ERR_REPO_UNKNOWN_SECURE_OBJECT_TYPE = -2147220760,
    CustomError_ERR_REPO_FOLDER_ALREADY_IN_TARGET = -2147220759,
    CustomError_ERR_REPO_DEST_CANNOT_BE_SUBFOLDER_OF_SOURCE = -2147220758,
    CustomError_ERR_REPO_INVALID_FOLDER_NAME = -2147220757,
    CustomError_ERR_REPO_FOLDER_REF_IS_NOT_DIRECTORY = -2147220756,
    CustomError_ERR_REPO_NO_RENAME_FOLDER = -2147220755,
    CustomError_ERR_REPO_INVALID_ITEM_NAME = -2147220754,
    CustomError_ERR_REPO_ITEM_DOES_NOT_EXIST = -2147220753,
    CustomError_ERR_REPO_ITEM_IS_NOT_A_FILE = -2147220752,
    CustomError_ERR_REPO_NO_RENAME_ITEM = -2147220751,
    CustomError_ERR_REPO_NO_WRITE_FOLDER_LOCK_FILE = -2147220750,
    CustomError_ERR_REPO_REF_BELONGS_TO_ANOTHER_REPO = -2147220749,
    CustomError_ERR_REPO_NO_PERMISSION_TO_GET_NOTES = -2147220748,
    CustomError_ERR_REPO_NO_PERMISSION_TO_BRANCH_READ = -2147220747,
    CustomError_ERR_REPO_NO_PERMISSION_TO_LABEL_ITEM_READ = -2147220746,
    CustomError_ERR_REPO_NO_PERMISSION_TO_SHARE_READ = -2147220745,
    CustomError_ERR_REPO_NO_PERMISSION_TO_COPY_FOLDER_READ = -2147220744,
    CustomError_ERR_REPO_NO_PERMISSION_TO_COPY_ITEM_READ = -2147220743,
    CustomError_ERR_REPO_NO_PERMISSION_TO_MOVE_FOLDER_DELETE = -2147220742,
    CustomError_ERR_REPO_NO_PERMISSION_TO_MOVE_ITEM_DELETE = -2147220741,
    CustomError_ERR_REPO_NO_PERMISSION_TO_LABEL_FOLDER_READ = -2147220740,
    CustomError_ERR_REPO_DISK_IS_FULL = -2147220739,
    CustomError_ERR_REPO_NO_UPDATE_CONSTITUENTS = -2147220738,
    CustomError_AD_E_UNSUPPORTED_DIMENSION_TYPE = -2147220737,
    CustomError_AD_E_EXTENTS_QRY_FAILED = -2147220736,
    CustomError_AD_E_INVALID_DIRECTION = -2147220735,
    CustomError_AD_E_INVALID_DIRECTION_OBJECT = -2147220734,
    CustomError_AD_E_COLOR_PROPERTY_READ_UNSUPPORTED = -2147220733,
    CustomError_AD_E_INVALID_SURFACE_TRANSFORM = -2147220732,
    CustomError_AD_E_INVALID_SAVE_OPERATION = -2147220731,
    CustomError_AD_E_INVALID_OVERRIDE_UNIT = -2147220730,
    CustomError_AD_E_OBSOLETE_FUNCTION = -2147220729,
    CustomError_AD_E_CANNOT_TRANSFORM_ROOT_OCCURRENCE = -2147220728,
    CustomError_AD_E_UNSUPPORTED_TRANSFORM_DATA = -2147220727,
    CustomError_AD_E_INVALID_SCALE_FACTOR = -2147220726,
    CustomError_AD_E_INVALID_OCCURRENCE_TRANSFORM = -2147220725,
    CustomError_AD_E_UNSUPPORTED_OCCURRENCE_PROPERTY = -2147220724,
    CustomError_AD_E_SUBASSEMBLY_TRANSFORM_UNSUPPORTED = -2147220723,
    CustomError_AD_E_NO_OPEN_TRANSACTION_TO_CLOSE_OR_CANCEL = -2147220722,
    CustomError_AD_E_NO_OPEN_TRANSACTION_TO_MODIFY_PARAMETER = -2147220721,
    CustomError_AD_E_INVALID_LENGTH_UNIT_FOR_DISTANCE_PARAMETER = -2147220720,
    CustomError_AD_E_INVALID_ANGLE_UNIT_FOR_ANGLE_PARAMETER = -2147220719,
    CustomError_AD_E_INVALID_UNIT_FOR_SCALE_OR_COUNT_PARAMETER = -2147220718,
    CustomError_AD_E_CANNOT_SET_EQUATION_ON_EXTERNALLY_DRIVEN_PARAMETER = -2147220717,
    CustomError_AD_E_CANNOT_CREATE_TRANSFORM_WITH_ZERO_VECTOR = -2147220716,
    CustomError_AD_E_NEXT_ELEMENT_UNAVAILABLE = -2147220715,
    CustomError_AD_E_INVALID_FILE_NAME = -2147220714,
    CustomError_AD_E_UNSUPPORTED_FILE_FORMAT = -2147220713,
    CustomError_AD_E_FILE_ALREADY_EXISTS = -2147220712,
    CustomError_AD_E_TRANSFORM_NOT_INVERTIBLE = -2147220711,
    CustomError_ERR_REPO_FILE_LOCKED_BY_OTHER_USER = -2147220710,
    CustomError_AD_APP_ALREADY_INITIALIZED = -2147220709,
    CustomError_AD_APP_IS_TERMINATING_CANNOT_INITIALIZE = -2147220708,
    CustomError_AD_NOT_VALID_TO_SPECIFY_FORMAT = -2147220707,
    CustomError_AD_FEATURE_HAS_ERROR = -2147220706,
    CustomError_AD_INVALID_LICENSE_KEY = -2147220705,
    CustomError_AD_INVALID_LICENSE_KEY_FOR_SHEET_METAL = -2147220704,
    CustomError_AD_BROWSER_NOT_FOUND = -2147220703,
    CustomError_AD_INVALID_OBJECT = -2147220702,
    CustomError_AD_NOT_MATCHING_NUMBER_OF_RADIUI = -2147220701,
    CustomError_AD_ARRAY_SIZES_NOT_MATCHING = -2147220700,
    CustomError_AD_NOT_AVAILABLE_FOR_ASSEMBLY_WITH_CONSTRAINTS_OR_FIXED_OCCURRENCES = -2147220699,
    CustomError_AD_INVALID_TOLERANCE = -2147220698,
    CustomError_AD_E_INVALID_OWNED_FIGURE_OPERATION = -2147220697,
    CustomError_AD_E_VAULT_NOT_AVAILABLE = -2147220696,
    CustomError_AD_E_VAULT_OPERATION_FAILED = -2147220695,
    CustomError_AD_E_MULTIPLE_SAVE_TARGETS_NOT_ALLOWED = -2147220694,
    CustomError_AD_E_INVALID_SELECTION_FILTER = -2147220693,
    CustomError_AD_E_LOFT_CROSS_SECTIONS_UNAVAILABLE = -2147220692,
    CustomError_AD_E_INVALID_INTERPOLATION_POINT_ARRAY = -2147220691,
    CustomError_AD_E_COINCIDENT_POINTS = -2147220690,
    CustomError_AD_E_NO_REFERENCE_FIGURE_ID = -2147220689,
    CustomError_AD_E_NO_SKETCH_POINT_ID = -2147220688,
    CustomError_AD_INVALID_LICENSE_KEY_FOR_DRAWINGS = -2147220687,
    CustomError_AD_RESTORE_PACKAGE_FAILED = -2147220686,
    CustomError_AD_NO_INSTALLED_DRAWING_TEMPLATES = -2147220685,
    CustomError_AD_E_UNSUPPORTED_SKETCH_CONSTRAINT_TYPE = -2147220684,
    CustomError_AD_E_INVALID_LOFT_CROSS_SECTION = -2147220683,
    CustomError_AD_E_INSUFFICIENT_LOFT_CROSS_SECTIONS = -2147220682,
    CustomError_AD_E_INVALID_LOFT_GUIDE_CURVE = -2147220681,
    CustomError_AD_E_INVALID_LOFT_GUIDE_CURVE_TYPE = -2147220680,
    CustomError_AD_E_INVALID_LOFT_TANGENCY = -2147220679,
    CustomError_AD_E_INVALID_LOFT_TANGENCY_ARRAY_LENGTH = -2147220678,
    CustomError_AD_E_CREATE_DRAWING_SESSION_FAILED = -2147220677,
    CustomError_AD_E_CREATE_GLOBAL_PARAM_SESSION_FAILED = -2147220676,
    CustomError_AD_E_SKETCH_CREATION_NOT_FEASIBLE = -2147220675,
    CustomError_AD_E_MATERIAL_INVALID = -2147220674,
    CustomError_AD_E_MATERIAL_NOT_EXIST = -2147220673,
    CustomError_AD_E_LIBRARY_ALREADY_EXIST = -2147220672,
    CustomError_AD_E_FOLDER_ALREADY_EXIST = -2147220671,
    CustomError_AD_E_MATERIAL_ALREADY_EXIST = -2147220670,
    CustomError_AD_E_MATERIAL_WRITE_ACCESS_DENIED = -2147220669,
    CustomError_AD_E_FILE_LOCKED_SAVE_NOT_ALLOWED = -2147220668
};

struct __declspec(uuid("05efe169-12b2-4d17-a729-a19aec3bed80"))
DIEnum : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNextElement))
    IDispatchPtr NextElement;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetNextElement ( );
    VARIANT_BOOL HasMoreElements ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NextElement (
        /*[out,retval]*/ IDispatch * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_HasMoreElements (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("4d3116be-f976-4e96-8450-3e2fa7860b29"))
EventManager;
    // [ default ] interface _EventManager
    // interface _Object
    // [ default, source ] dispinterface _IADEventsCallback
    // [ source ] interface IADEventsCallback

struct __declspec(uuid("125bf6dc-6d67-46ad-b388-bdb8e8cb379c"))
IAD2DPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX))
    double X;
    __declspec(property(get=GetY))
    double Y;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    double GetY ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("92b1a723-c999-425e-b55b-21d750aa79dd"))
IAD3DSketchPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX))
    double X;
    __declspec(property(get=GetY))
    double Y;
    __declspec(property(get=GetZ))
    double Z;
    __declspec(property(get=GetIsSketchNode))
    VARIANT_BOOL IsSketchNode;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    double GetY ( );
    double GetZ ( );
    VARIANT_BOOL GetIsSketchNode ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSketchNode (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("677bb101-6dc2-43ea-9375-816dfe7955a8"))
IAD3DSketchCircularArc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    IAD3DSketchPointPtr Center;
    __declspec(property(get=GetRadius))
    double Radius;
    __declspec(property(get=GetStart))
    IAD3DSketchPointPtr Start;
    __declspec(property(get=GetEnd))
    IAD3DSketchPointPtr End;
    __declspec(property(get=GetIncludedAngle))
    double IncludedAngle;
    __declspec(property(get=GetIsRightHandRule))
    VARIANT_BOOL IsRightHandRule;

    //
    // Wrapper methods for error-handling
    //

    IAD3DSketchPointPtr GetCenter ( );
    double GetRadius ( );
    IAD3DSketchPointPtr GetStart ( );
    IAD3DSketchPointPtr GetEnd ( );
    double GetIncludedAngle ( );
    VARIANT_BOOL GetIsRightHandRule ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IAD3DSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ struct IAD3DSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_End (
        /*[out,retval]*/ struct IAD3DSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IncludedAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRightHandRule (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("3e2213b0-4872-4c5c-8116-db87fbd3267a"))
IAD3DSketchEllipse : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    IAD3DSketchPointPtr Center;
    __declspec(property(get=GetMajorRadiusPoint))
    IAD3DSketchPointPtr MajorRadiusPoint;
    __declspec(property(get=GetMinorRadiusPoint))
    IAD3DSketchPointPtr MinorRadiusPoint;

    //
    // Wrapper methods for error-handling
    //

    IAD3DSketchPointPtr GetCenter ( );
    IAD3DSketchPointPtr GetMajorRadiusPoint ( );
    IAD3DSketchPointPtr GetMinorRadiusPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IAD3DSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MajorRadiusPoint (
        /*[out,retval]*/ struct IAD3DSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinorRadiusPoint (
        /*[out,retval]*/ struct IAD3DSketchPoint * * pRetVal ) = 0;
};

struct __declspec(uuid("164c2f64-8b15-4a9b-bbb4-35e4b8ae61ef"))
IAD3DSketchEllipticArc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    IAD3DSketchPointPtr Center;
    __declspec(property(get=GetMajorRadiusPoint))
    IAD3DSketchPointPtr MajorRadiusPoint;
    __declspec(property(get=GetMinorRadiusPoint))
    IAD3DSketchPointPtr MinorRadiusPoint;
    __declspec(property(get=GetStart))
    IAD3DSketchPointPtr Start;
    __declspec(property(get=GetEnd))
    IAD3DSketchPointPtr End;
    __declspec(property(get=GetIsRightHandRule))
    VARIANT_BOOL IsRightHandRule;

    //
    // Wrapper methods for error-handling
    //

    IAD3DSketchPointPtr GetCenter ( );
    IAD3DSketchPointPtr GetMajorRadiusPoint ( );
    IAD3DSketchPointPtr GetMinorRadiusPoint ( );
    IAD3DSketchPointPtr GetStart ( );
    IAD3DSketchPointPtr GetEnd ( );
    VARIANT_BOOL GetIsRightHandRule ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IAD3DSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MajorRadiusPoint (
        /*[out,retval]*/ struct IAD3DSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinorRadiusPoint (
        /*[out,retval]*/ struct IAD3DSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ struct IAD3DSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_End (
        /*[out,retval]*/ struct IAD3DSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRightHandRule (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("a6c72bc8-8b4e-4209-81ab-3904a74c2ef2"))
IAD3DSketchLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStart))
    IAD3DSketchPointPtr Start;
    __declspec(property(get=GetEnd))
    IAD3DSketchPointPtr End;
    __declspec(property(get=GetLength))
    double Length;

    //
    // Wrapper methods for error-handling
    //

    IAD3DSketchPointPtr GetStart ( );
    IAD3DSketchPointPtr GetEnd ( );
    double GetLength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ struct IAD3DSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_End (
        /*[out,retval]*/ struct IAD3DSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("334e50f5-1095-425b-bb61-9fa3c1ff1eb5"))
IADAssemblyExtrusionFeature : IDispatch
{};

struct __declspec(uuid("87bc908e-8dba-49c5-ba69-1dbddc7a6e6d"))
IADAssemblyHoleFeature : IDispatch
{};

struct __declspec(uuid("c3bac24b-21cf-451e-ae31-050653f84ced"))
IADAutoBrepImportSummary : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFailReason))
    _bstr_t FailReason;
    __declspec(property(get=GetNum_MeshComponent))
    long Num_MeshComponent;
    __declspec(property(get=GetIsMeshHealed))
    VARIANT_BOOL IsMeshHealed;
    __declspec(property(get=GetPlannarFallbackReason))
    _bstr_t PlannarFallbackReason;
    __declspec(property(get=GetIsCreatedByFallback))
    _bstr_t IsCreatedByFallback;
    __declspec(property(get=GetSegmentationTime))
    _bstr_t SegmentationTime;
    __declspec(property(get=GetGMCADCreationTime))
    _bstr_t GMCADCreationTime;
    __declspec(property(get=GetCADCreationFromGMCADTime))
    _bstr_t CADCreationFromGMCADTime;
    __declspec(property(get=GetCADExportTime))
    _bstr_t CADExportTime;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFailReason ( );
    long GetNum_MeshComponent ( );
    VARIANT_BOOL GetIsMeshHealed ( );
    _bstr_t GetPlannarFallbackReason ( );
    _bstr_t GetIsCreatedByFallback ( );
    _bstr_t GetSegmentationTime ( );
    _bstr_t GetGMCADCreationTime ( );
    _bstr_t GetCADCreationFromGMCADTime ( );
    _bstr_t GetCADExportTime ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FailReason (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Num_MeshComponent (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsMeshHealed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlannarFallbackReason (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsCreatedByFallback (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SegmentationTime (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GMCADCreationTime (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CADCreationFromGMCADTime (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CADExportTime (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("2189aeee-ce55-45c9-bac5-3eb0c1982920"))
IADBsplineCurve : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetDefinition (
        long * pOrder,
        long * pNumPoles,
        long * pNumKnots,
        VARIANT_BOOL * pIsRational,
        VARIANT_BOOL * pIsClosed,
        VARIANT_BOOL * pIsPlanar );
    HRESULT GetData (
        SAFEARRAY * * pKnots,
        SAFEARRAY * * pPoles,
        SAFEARRAY * * pWeights );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetDefinition (
        /*[out]*/ long * pOrder,
        /*[out]*/ long * pNumPoles,
        /*[out]*/ long * pNumKnots,
        /*[out]*/ VARIANT_BOOL * pIsRational,
        /*[out]*/ VARIANT_BOOL * pIsClosed,
        /*[out]*/ VARIANT_BOOL * pIsPlanar ) = 0;
      virtual HRESULT __stdcall raw_GetData (
        /*[in,out]*/ SAFEARRAY * * pKnots,
        /*[in,out]*/ SAFEARRAY * * pPoles,
        /*[in,out]*/ SAFEARRAY * * pWeights ) = 0;
};

struct __declspec(uuid("2e07232d-aece-41a8-98db-d5911c87fc52"))
IADBsplineSurface : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetDefinition (
        long * pOrderU,
        long * pOrderV,
        long * pNumPolesU,
        long * pNumPolesV,
        long * pNumKnotsU,
        long * pNumKnotsV,
        VARIANT_BOOL * pIsRational,
        VARIANT_BOOL * pIsClosedU,
        VARIANT_BOOL * pvIsClosedV,
        VARIANT_BOOL * pIsPlanar );
    HRESULT GetData (
        SAFEARRAY * * pKnotsU,
        SAFEARRAY * * pKnotsV,
        SAFEARRAY * * pPoles,
        SAFEARRAY * * pWeights );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetDefinition (
        /*[out]*/ long * pOrderU,
        /*[out]*/ long * pOrderV,
        /*[out]*/ long * pNumPolesU,
        /*[out]*/ long * pNumPolesV,
        /*[out]*/ long * pNumKnotsU,
        /*[out]*/ long * pNumKnotsV,
        /*[out]*/ VARIANT_BOOL * pIsRational,
        /*[out]*/ VARIANT_BOOL * pIsClosedU,
        /*[out]*/ VARIANT_BOOL * pvIsClosedV,
        /*[out]*/ VARIANT_BOOL * pIsPlanar ) = 0;
      virtual HRESULT __stdcall raw_GetData (
        /*[in,out]*/ SAFEARRAY * * pKnotsU,
        /*[in,out]*/ SAFEARRAY * * pKnotsV,
        /*[in,out]*/ SAFEARRAY * * pPoles,
        /*[in,out]*/ SAFEARRAY * * pWeights ) = 0;
};

struct __declspec(uuid("d6395b93-e317-4637-9451-c5ffa61d3509"))
IADDataFont : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSize))
    double Size;
    __declspec(property(get=GetIsItalic))
    VARIANT_BOOL IsItalic;
    __declspec(property(get=GetIsUnderline))
    VARIANT_BOOL IsUnderline;
    __declspec(property(get=GetIsStrikeThrough))
    VARIANT_BOOL IsStrikeThrough;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    double GetSize ( );
    VARIANT_BOOL GetIsItalic ( );
    VARIANT_BOOL GetIsUnderline ( );
    VARIANT_BOOL GetIsStrikeThrough ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsItalic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsUnderline (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsStrikeThrough (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("6b1e45da-6086-4db3-85c0-ef8f2121a555"))
IADDeleteLumpsFeature : IDispatch
{};

struct __declspec(uuid("c4290bae-59c1-4541-909c-a7e8887fa815"))
IADDesignBooleanFeature : IDispatch
{};

struct __declspec(uuid("0098b123-abe9-45b3-b9a7-a94838579f9d"))
IADDesignProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModelUnits))
    enum ADUnits ModelUnits;
    __declspec(property(get=GetMassUnits))
    enum ADUnits MassUnits;
    __declspec(property(get=GetDensity,put=PutDensity))
    double Density;
    __declspec(property(get=GetNumber,put=PutNumber))
    _bstr_t Number;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetLengthDisplayUnits))
    enum ADUnits LengthDisplayUnits;
    __declspec(property(get=GetAngleDisplayUnits))
    enum ADUnits AngleDisplayUnits;
    __declspec(property(get=GetMaterial,put=PutMaterial))
    _bstr_t Material;
    __declspec(property(get=GetTreatAsPartInBOM,put=PutTreatAsPartInBOM))
    VARIANT_BOOL TreatAsPartInBOM;

    //
    // Wrapper methods for error-handling
    //

    enum ADUnits GetModelUnits ( );
    enum ADUnits GetMassUnits ( );
    double GetDensity ( );
    void PutDensity (
        double pRetVal );
    _bstr_t GetNumber ( );
    void PutNumber (
        _bstr_t pRetVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pRetVal );
    enum ADUnits GetLengthDisplayUnits ( );
    enum ADUnits GetAngleDisplayUnits ( );
    _variant_t ExtendedDesignProperty (
        enum ADExtendedDesignProperty propertyID );
    HRESULT ExtendedDesignProperty_2 (
        enum ADExtendedDesignProperty propertyID,
        const _variant_t & propertyValue );
    _bstr_t GetMaterial ( );
    void PutMaterial (
        _bstr_t pRetVal );
    _variant_t CustomProperty (
        _bstr_t propertyName );
    HRESULT CustomProperty_2 (
        _bstr_t propertyName,
        const _variant_t & propertyValue );
    VARIANT_BOOL GetTreatAsPartInBOM ( );
    void PutTreatAsPartInBOM (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ModelUnits (
        /*[out,retval]*/ enum ADUnits * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MassUnits (
        /*[out,retval]*/ enum ADUnits * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Density (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Density (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Number (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_LengthDisplayUnits (
        /*[out,retval]*/ enum ADUnits * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngleDisplayUnits (
        /*[out,retval]*/ enum ADUnits * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExtendedDesignProperty (
        /*[in]*/ enum ADExtendedDesignProperty propertyID,
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExtendedDesignProperty_2 (
        /*[in]*/ enum ADExtendedDesignProperty propertyID,
        /*[in]*/ VARIANT propertyValue ) = 0;
      virtual HRESULT __stdcall get_Material (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Material (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CustomProperty (
        /*[in]*/ BSTR propertyName,
        /*[out,retval]*/ VARIANT * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CustomProperty_2 (
        /*[in]*/ BSTR propertyName,
        /*[in]*/ VARIANT propertyValue ) = 0;
      virtual HRESULT __stdcall get_TreatAsPartInBOM (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TreatAsPartInBOM (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("4d585754-d354-4243-815e-a48263b4f3d1"))
IADDrawingProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLengthUnits))
    enum ADUnits LengthUnits;
    __declspec(property(get=GetAngleUnits))
    enum ADUnits AngleUnits;
    __declspec(property(get=GetNumber,put=PutNumber))
    _bstr_t Number;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;

    //
    // Wrapper methods for error-handling
    //

    enum ADUnits GetLengthUnits ( );
    enum ADUnits GetAngleUnits ( );
    _bstr_t GetNumber ( );
    void PutNumber (
        _bstr_t pRetVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LengthUnits (
        /*[out,retval]*/ enum ADUnits * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngleUnits (
        /*[out,retval]*/ enum ADUnits * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Number (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pRetVal ) = 0;
};

struct __declspec(uuid("905490d0-dd47-444c-b503-64764b8eca2f"))
IADDrawingSelectionFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetViews,put=PutViews))
    VARIANT_BOOL Views;
    __declspec(property(get=GetParts,put=PutParts))
    VARIANT_BOOL Parts;
    __declspec(property(get=GetSegments,put=PutSegments))
    VARIANT_BOOL Segments;
    __declspec(property(get=GetSketches2D,put=PutSketches2D))
    VARIANT_BOOL Sketches2D;
    __declspec(property(get=GetVertices,put=PutVertices))
    VARIANT_BOOL Vertices;
    __declspec(property(get=GetDimensions,put=PutDimensions))
    VARIANT_BOOL Dimensions;
    __declspec(property(get=GetAnnotations,put=PutAnnotations))
    VARIANT_BOOL Annotations;
    __declspec(property(get=GetRedlines,put=PutRedlines))
    VARIANT_BOOL Redlines;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetViews ( );
    void PutViews (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetParts ( );
    void PutParts (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetSegments ( );
    void PutSegments (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetSketches2D ( );
    void PutSketches2D (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetVertices ( );
    void PutVertices (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDimensions ( );
    void PutDimensions (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetAnnotations ( );
    void PutAnnotations (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetRedlines ( );
    void PutRedlines (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Views (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Views (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Parts (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Parts (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Segments (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Segments (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketches2D (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sketches2D (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Vertices (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dimensions (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Dimensions (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Annotations (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Annotations (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Redlines (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Redlines (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("f0f76eb3-4904-4e7a-8e15-b13d7bcb572c"))
IADIGESOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsMSBO,put=PutIsMSBO))
    VARIANT_BOOL IsMSBO;
    __declspec(property(get=GetIsAutoCAD,put=PutIsAutoCAD))
    VARIANT_BOOL IsAutoCAD;
    __declspec(property(get=GetIsJAMA,put=PutIsJAMA))
    VARIANT_BOOL IsJAMA;
    __declspec(property(get=GetHasWireAsCopiousData,put=PutHasWireAsCopiousData))
    VARIANT_BOOL HasWireAsCopiousData;
    __declspec(property(get=GetHasTrimmedCurves,put=PutHasTrimmedCurves))
    VARIANT_BOOL HasTrimmedCurves;
    __declspec(property(get=GetHasTrimSurfacesAsNURBS,put=PutHasTrimSurfacesAsNURBS))
    VARIANT_BOOL HasTrimSurfacesAsNURBS;
    __declspec(property(get=GetHasEllipsesAsNURBS,put=PutHasEllipsesAsNURBS))
    VARIANT_BOOL HasEllipsesAsNURBS;
    __declspec(property(get=GetHasBoundedSurfaces,put=PutHasBoundedSurfaces))
    VARIANT_BOOL HasBoundedSurfaces;
    __declspec(property(get=GetUnits,put=PutUnits))
    enum ADUnits Units;
    __declspec(property(get=GetEOLLength,put=PutEOLLength))
    long EOLLength;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsMSBO ( );
    void PutIsMSBO (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsAutoCAD ( );
    void PutIsAutoCAD (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsJAMA ( );
    void PutIsJAMA (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetHasWireAsCopiousData ( );
    void PutHasWireAsCopiousData (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetHasTrimmedCurves ( );
    void PutHasTrimmedCurves (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetHasTrimSurfacesAsNURBS ( );
    void PutHasTrimSurfacesAsNURBS (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetHasEllipsesAsNURBS ( );
    void PutHasEllipsesAsNURBS (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetHasBoundedSurfaces ( );
    void PutHasBoundedSurfaces (
        VARIANT_BOOL pRetVal );
    enum ADUnits GetUnits ( );
    void PutUnits (
        enum ADUnits pRetVal );
    long GetEOLLength ( );
    void PutEOLLength (
        long pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsMSBO (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsMSBO (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsAutoCAD (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsAutoCAD (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsJAMA (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsJAMA (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasWireAsCopiousData (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HasWireAsCopiousData (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasTrimmedCurves (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HasTrimmedCurves (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasTrimSurfacesAsNURBS (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HasTrimSurfacesAsNURBS (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasEllipsesAsNURBS (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HasEllipsesAsNURBS (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasBoundedSurfaces (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_HasBoundedSurfaces (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ enum ADUnits * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ enum ADUnits pRetVal ) = 0;
      virtual HRESULT __stdcall get_EOLLength (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EOLLength (
        /*[in]*/ long pRetVal ) = 0;
};

struct __declspec(uuid("59971c17-1512-4ff7-bdfd-fe3dcda87dc1"))
IADImportFileFeature : IDispatch
{};

struct __declspec(uuid("b6a52570-3140-4dda-a465-240a14c0ba4d"))
IADMeshBooleanFeature : IDispatch
{};

struct __declspec(uuid("0fa32d01-a604-4400-81ed-758db4648f20"))
IADMirrorFeature : IDispatch
{};

struct __declspec(uuid("5950c77f-fcab-422f-a5eb-0bf7e6b01f15"))
IADMoveFaceFeature : IDispatch
{};

struct __declspec(uuid("6f2b9e1b-ff82-409a-9bd5-f3d08667be28"))
IADOrientConstraint : IDispatch
{};

struct __declspec(uuid("9190ef5b-4110-46ab-9f52-9fc1bb350c5c"))
IADDesignSelectionFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSolid,put=PutSolid))
    enum ADSelectionFilterOption Solid;
    __declspec(property(get=GetSurface,put=PutSurface))
    enum ADSelectionFilterOption Surface;
    __declspec(property(get=GetPlanes,put=PutPlanes))
    VARIANT_BOOL Planes;
    __declspec(property(get=GetAxes,put=PutAxes))
    VARIANT_BOOL Axes;
    __declspec(property(get=GetPoints,put=PutPoints))
    VARIANT_BOOL Points;
    __declspec(property(get=GetSketches2D,put=PutSketches2D))
    VARIANT_BOOL Sketches2D;
    __declspec(property(get=GetSketches3D,put=PutSketches3D))
    VARIANT_BOOL Sketches3D;
    __declspec(property(get=GetDimensions,put=PutDimensions))
    VARIANT_BOOL Dimensions;
    __declspec(property(get=GetAnnotations,put=PutAnnotations))
    VARIANT_BOOL Annotations;
    __declspec(property(get=GetRedlines,put=PutRedlines))
    VARIANT_BOOL Redlines;

    //
    // Wrapper methods for error-handling
    //

    enum ADSelectionFilterOption GetSolid ( );
    void PutSolid (
        enum ADSelectionFilterOption pRetVal );
    enum ADSelectionFilterOption GetSurface ( );
    void PutSurface (
        enum ADSelectionFilterOption pRetVal );
    VARIANT_BOOL GetPlanes ( );
    void PutPlanes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetAxes ( );
    void PutAxes (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetPoints ( );
    void PutPoints (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetSketches2D ( );
    void PutSketches2D (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetSketches3D ( );
    void PutSketches3D (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDimensions ( );
    void PutDimensions (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetAnnotations ( );
    void PutAnnotations (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetRedlines ( );
    void PutRedlines (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Solid (
        /*[out,retval]*/ enum ADSelectionFilterOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Solid (
        /*[in]*/ enum ADSelectionFilterOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_Surface (
        /*[out,retval]*/ enum ADSelectionFilterOption * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Surface (
        /*[in]*/ enum ADSelectionFilterOption pRetVal ) = 0;
      virtual HRESULT __stdcall get_Planes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Planes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Axes (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Axes (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Points (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketches2D (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sketches2D (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketches3D (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Sketches3D (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Dimensions (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Dimensions (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Annotations (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Annotations (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Redlines (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Redlines (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("75909846-9a73-4649-bb1c-6816e8bd72d3"))
IADPatternFeature : IDispatch
{};

struct __declspec(uuid("d823497e-7965-4808-a681-62de11a420f6"))
IADPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX))
    double X;
    __declspec(property(get=GetY))
    double Y;
    __declspec(property(get=GetZ))
    double Z;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    double GetY ( );
    double GetZ ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("bada48fa-05be-4387-a97d-02d571eac1e6"))
IAD3DSketchBspline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartPoint))
    IADPointPtr StartPoint;
    __declspec(property(get=GetEndPoint))
    IADPointPtr EndPoint;

    //
    // Wrapper methods for error-handling
    //

    HRESULT GetDefinition (
        long * pOrder,
        long * pNumCtlPoints,
        long * pNumKnots,
        VARIANT_BOOL * pIsRational,
        VARIANT_BOOL * pIsClosed,
        VARIANT_BOOL * pIsPlanar );
    HRESULT GetData (
        SAFEARRAY * * pCtlPoints,
        SAFEARRAY * * pKnotVector,
        SAFEARRAY * * pWeights );
    IADPointPtr GetStartPoint ( );
    IADPointPtr GetEndPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetDefinition (
        /*[out]*/ long * pOrder,
        /*[out]*/ long * pNumCtlPoints,
        /*[out]*/ long * pNumKnots,
        /*[out]*/ VARIANT_BOOL * pIsRational,
        /*[out]*/ VARIANT_BOOL * pIsClosed,
        /*[out]*/ VARIANT_BOOL * pIsPlanar ) = 0;
      virtual HRESULT __stdcall raw_GetData (
        /*[in,out]*/ SAFEARRAY * * pCtlPoints,
        /*[in,out]*/ SAFEARRAY * * pKnotVector,
        /*[in,out]*/ SAFEARRAY * * pWeights ) = 0;
      virtual HRESULT __stdcall get_StartPoint (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndPoint (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
};

struct __declspec(uuid("6cff68c8-5123-4e2d-aec0-c01986df9be6"))
IADPhysicalProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPartsCount))
    long PartsCount;
    __declspec(property(get=GetLumpsCount))
    long LumpsCount;
    __declspec(property(get=GetFacesCount))
    long FacesCount;
    __declspec(property(get=GetEdgesCount))
    long EdgesCount;
    __declspec(property(get=GetVerticesCount))
    long VerticesCount;
    __declspec(property(get=GetUniquePartsCount))
    long UniquePartsCount;
    __declspec(property(get=GetVolume))
    double Volume;
    __declspec(property(get=GetMass))
    double Mass;
    __declspec(property(get=GetSurfaceArea))
    double SurfaceArea;
    __declspec(property(get=GetMaterial))
    _bstr_t Material;

    //
    // Wrapper methods for error-handling
    //

    long GetPartsCount ( );
    long GetLumpsCount ( );
    long GetFacesCount ( );
    long GetEdgesCount ( );
    long GetVerticesCount ( );
    long GetUniquePartsCount ( );
    HRESULT GetExtents (
        struct IADPoint * * ppLower,
        struct IADPoint * * ppUpper );
    double GetVolume ( );
    double GetMass ( );
    HRESULT GetCenterOfGravity (
        double * pX,
        double * pY,
        double * pZ );
    double GetSurfaceArea ( );
    HRESULT GetMomentsOfInertia (
        double * pXX,
        double * pYY,
        double * pZZ,
        double * pYZ,
        double * pZX,
        double * pXY );
    HRESULT GetPrincipalMomentsOfInertia (
        double * pM1,
        double * pM2,
        double * pM3 );
    HRESULT GetPrincipalAxis1 (
        double * pX,
        double * pY,
        double * pZ );
    HRESULT GetPrincipalAxis2 (
        double * pX,
        double * pY,
        double * pZ );
    HRESULT GetPrincipalAxis3 (
        double * pX,
        double * pY,
        double * pZ );
    _bstr_t GetMaterial ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PartsCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LumpsCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FacesCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EdgesCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VerticesCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UniquePartsCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetExtents (
        /*[out]*/ struct IADPoint * * ppLower,
        /*[out]*/ struct IADPoint * * ppUpper ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Mass (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetCenterOfGravity (
        /*[out]*/ double * pX,
        /*[out]*/ double * pY,
        /*[out]*/ double * pZ ) = 0;
      virtual HRESULT __stdcall get_SurfaceArea (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMomentsOfInertia (
        /*[out]*/ double * pXX,
        /*[out]*/ double * pYY,
        /*[out]*/ double * pZZ,
        /*[out]*/ double * pYZ,
        /*[out]*/ double * pZX,
        /*[out]*/ double * pXY ) = 0;
      virtual HRESULT __stdcall raw_GetPrincipalMomentsOfInertia (
        /*[out]*/ double * pM1,
        /*[out]*/ double * pM2,
        /*[out]*/ double * pM3 ) = 0;
      virtual HRESULT __stdcall raw_GetPrincipalAxis1 (
        /*[out]*/ double * pX,
        /*[out]*/ double * pY,
        /*[out]*/ double * pZ ) = 0;
      virtual HRESULT __stdcall raw_GetPrincipalAxis2 (
        /*[out]*/ double * pX,
        /*[out]*/ double * pY,
        /*[out]*/ double * pZ ) = 0;
      virtual HRESULT __stdcall raw_GetPrincipalAxis3 (
        /*[out]*/ double * pX,
        /*[out]*/ double * pY,
        /*[out]*/ double * pZ ) = 0;
      virtual HRESULT __stdcall get_Material (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("e316cec3-1283-45b6-b977-c09efd95b18f"))
IADPrintabilityCheckResults : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWallThicknessErrors))
    long WallThicknessErrors;
    __declspec(property(get=GetGapThicknessErrors))
    long GapThicknessErrors;
    __declspec(property(get=GetInterlockingErrors))
    long InterlockingErrors;
    __declspec(property(get=GetVoidErrors))
    long VoidErrors;
    __declspec(property(get=GetBottleneckErrors))
    long BottleneckErrors;
    __declspec(property(get=GetOverhangErrors))
    long OverhangErrors;
    __declspec(property(get=GetManifoldsolidErrors))
    long ManifoldsolidErrors;
    __declspec(property(get=GetPrinterName))
    _bstr_t PrinterName;
    __declspec(property(get=GetModelSizeError))
    long ModelSizeError;

    //
    // Wrapper methods for error-handling
    //

    long GetWallThicknessErrors ( );
    long GetGapThicknessErrors ( );
    long GetInterlockingErrors ( );
    long GetVoidErrors ( );
    long GetBottleneckErrors ( );
    long GetOverhangErrors ( );
    long GetManifoldsolidErrors ( );
    _bstr_t GetPrinterName ( );
    long GetModelSizeError ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_WallThicknessErrors (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GapThicknessErrors (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InterlockingErrors (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VoidErrors (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BottleneckErrors (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OverhangErrors (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ManifoldsolidErrors (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PrinterName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ModelSizeError (
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("f4f8b5d9-b52f-4d02-9827-2bda1c085cfb"))
IADRemoveFaceFeature : IDispatch
{};

struct __declspec(uuid("7d12d336-7092-43b2-ad7e-61d8e9ed7de8"))
IADSketchBspline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartPoint))
    IAD2DPointPtr StartPoint;
    __declspec(property(get=GetEndPoint))
    IAD2DPointPtr EndPoint;

    //
    // Wrapper methods for error-handling
    //

    HRESULT GetDefinition (
        long * pOrder,
        long * pNumCtlPoints,
        long * pNumKnots,
        VARIANT_BOOL * pIsRational,
        VARIANT_BOOL * pIsClosed,
        VARIANT_BOOL * pIsPeriodic );
    HRESULT GetBsplineData (
        SAFEARRAY * * pCtlPoints,
        SAFEARRAY * * pKnotVector,
        SAFEARRAY * * pWeights );
    IAD2DPointPtr GetStartPoint ( );
    IAD2DPointPtr GetEndPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetDefinition (
        /*[out]*/ long * pOrder,
        /*[out]*/ long * pNumCtlPoints,
        /*[out]*/ long * pNumKnots,
        /*[out]*/ VARIANT_BOOL * pIsRational,
        /*[out]*/ VARIANT_BOOL * pIsClosed,
        /*[out]*/ VARIANT_BOOL * pIsPeriodic ) = 0;
      virtual HRESULT __stdcall raw_GetBsplineData (
        /*[in,out]*/ SAFEARRAY * * pCtlPoints,
        /*[in,out]*/ SAFEARRAY * * pKnotVector,
        /*[in,out]*/ SAFEARRAY * * pWeights ) = 0;
      virtual HRESULT __stdcall get_StartPoint (
        /*[out,retval]*/ struct IAD2DPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndPoint (
        /*[out,retval]*/ struct IAD2DPoint * * pRetVal ) = 0;
};

struct __declspec(uuid("90bafdfc-23d7-471b-a5a9-4781d11709e4"))
IADSketchPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX))
    double X;
    __declspec(property(get=GetY))
    double Y;
    __declspec(property(get=GetIsSketchNode))
    VARIANT_BOOL IsSketchNode;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    double GetY ( );
    VARIANT_BOOL GetIsSketchNode ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSketchNode (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("9f2d35e0-7acf-4027-89f2-faf884ab0b39"))
IADSketchCircle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    IADSketchPointPtr Center;
    __declspec(property(get=GetRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    IADSketchPointPtr GetCenter ( );
    double GetRadius ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IADSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("105281a4-8c1d-454a-80b7-31e1457acbb6"))
IADSketchCircularArc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    IADSketchPointPtr Center;
    __declspec(property(get=GetRadius))
    double Radius;
    __declspec(property(get=GetStart))
    IADSketchPointPtr Start;
    __declspec(property(get=GetEnd))
    IADSketchPointPtr End;
    __declspec(property(get=GetIncludedAngle))
    double IncludedAngle;
    __declspec(property(get=GetIsRightHandRule))
    VARIANT_BOOL IsRightHandRule;

    //
    // Wrapper methods for error-handling
    //

    IADSketchPointPtr GetCenter ( );
    double GetRadius ( );
    IADSketchPointPtr GetStart ( );
    IADSketchPointPtr GetEnd ( );
    double GetIncludedAngle ( );
    VARIANT_BOOL GetIsRightHandRule ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IADSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ struct IADSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_End (
        /*[out,retval]*/ struct IADSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IncludedAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRightHandRule (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("8000fd15-e7a5-4f81-a086-2d04f47f3dc0"))
IADSketchEllipse : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    IADSketchPointPtr Center;
    __declspec(property(get=GetMajorAxis))
    double MajorAxis;
    __declspec(property(get=GetMinorMajorRatio))
    double MinorMajorRatio;
    __declspec(property(get=GetMajorAxisAngle))
    double MajorAxisAngle;

    //
    // Wrapper methods for error-handling
    //

    IADSketchPointPtr GetCenter ( );
    double GetMajorAxis ( );
    double GetMinorMajorRatio ( );
    double GetMajorAxisAngle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IADSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MajorAxis (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinorMajorRatio (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MajorAxisAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("cc1fd288-bdbd-41dc-a552-066a3e38b046"))
IADSketchEllipticArc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    IADSketchPointPtr Center;
    __declspec(property(get=GetMajorAxis))
    double MajorAxis;
    __declspec(property(get=GetMinorMajorRatio))
    double MinorMajorRatio;
    __declspec(property(get=GetStart))
    IADSketchPointPtr Start;
    __declspec(property(get=GetEnd))
    IADSketchPointPtr End;
    __declspec(property(get=GetMajorAxisAngle))
    double MajorAxisAngle;
    __declspec(property(get=GetIsRightHandRule))
    VARIANT_BOOL IsRightHandRule;

    //
    // Wrapper methods for error-handling
    //

    IADSketchPointPtr GetCenter ( );
    double GetMajorAxis ( );
    double GetMinorMajorRatio ( );
    IADSketchPointPtr GetStart ( );
    IADSketchPointPtr GetEnd ( );
    double GetMajorAxisAngle ( );
    VARIANT_BOOL GetIsRightHandRule ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IADSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MajorAxis (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinorMajorRatio (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ struct IADSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_End (
        /*[out,retval]*/ struct IADSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MajorAxisAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRightHandRule (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("17417e4b-f694-41f6-bdd1-5365a11bbe00"))
IADSketchLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStart))
    IADSketchPointPtr Start;
    __declspec(property(get=GetEnd))
    IADSketchPointPtr End;
    __declspec(property(get=GetLength))
    double Length;

    //
    // Wrapper methods for error-handling
    //

    IADSketchPointPtr GetStart ( );
    IADSketchPointPtr GetEnd ( );
    double GetLength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ struct IADSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_End (
        /*[out,retval]*/ struct IADSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("301754e9-bb54-4927-8178-a78e4c18985a"))
IADSketchText : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTextString,put=PutTextString))
    _bstr_t TextString;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetBold,put=PutBold))
    VARIANT_BOOL Bold;
    __declspec(property(get=GetItalic,put=PutItalic))
    VARIANT_BOOL Italic;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTextString ( );
    void PutTextString (
        _bstr_t pRetVal );
    _bstr_t GetFontName ( );
    void PutFontName (
        _bstr_t pRetVal );
    VARIANT_BOOL GetBold ( );
    void PutBold (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetItalic ( );
    void PutItalic (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TextString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_TextString (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Bold (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Italic (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("1c80c16e-a8c9-47bf-8f2b-4cf91af6a46f"))
IADSMClosedCornerFeature : IDispatch
{};

struct __declspec(uuid("358dc7a7-744d-44cc-89c1-b4871f4ba2f1"))
IADSMCornerChamferFeature : IDispatch
{};

struct __declspec(uuid("1791a85d-8a9d-4d31-9c6b-af469da7da8e"))
IADSMCornerRoundFeature : IDispatch
{};

struct __declspec(uuid("8d7161f5-f79d-4eee-9288-9fa860a0ed7d"))
IADSMDimpleFeature : IDispatch
{};

struct __declspec(uuid("900b4614-f14e-4c09-84c6-4147a2b11fdb"))
IADSMFlangeFeature : IDispatch
{};

struct __declspec(uuid("68d5f244-c176-45f8-8b14-a7024e26adcc"))
IADSMPunchFeature : IDispatch
{};

struct __declspec(uuid("d574adc4-c3b4-4e8b-83f2-2aee07e91bfd"))
IADSMRebendFeature : IDispatch
{};

struct __declspec(uuid("147b9297-91f5-467c-966f-666218bb7ff8"))
IADSMTabFeature : IDispatch
{};

struct __declspec(uuid("278795f0-3bc9-4ddb-9a7a-7a859611e275"))
IADSMUnbendFeature : IDispatch
{};

struct __declspec(uuid("a16d828e-db24-4452-a6f5-6ca1368aebe8"))
IADSphere : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    IADPointPtr Center;
    __declspec(property(get=GetRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    IADPointPtr GetCenter ( );
    double GetRadius ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("f52c8e2b-a212-4732-a1b2-142ae42031b7"))
IADTappedThreadInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetthreadType))
    enum ADTappedThreadType threadType;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetthreadClass))
    _bstr_t threadClass;
    __declspec(property(get=GetPitch))
    double Pitch;
    __declspec(property(get=GettapDrillDiameter))
    double tapDrillDiameter;
    __declspec(property(get=GetMajorDiameter))
    double MajorDiameter;
    __declspec(property(get=GetMinorDiameter))
    double MinorDiameter;
    __declspec(property(get=GetpitchDiameter))
    double pitchDiameter;
    __declspec(property(get=GetThreadLength))
    double ThreadLength;
    __declspec(property(get=GetIsValidThread))
    VARIANT_BOOL IsValidThread;

    //
    // Wrapper methods for error-handling
    //

    enum ADTappedThreadType GetthreadType ( );
    _bstr_t GetName ( );
    _bstr_t GetthreadClass ( );
    double GetPitch ( );
    double GettapDrillDiameter ( );
    double GetMajorDiameter ( );
    double GetMinorDiameter ( );
    double GetpitchDiameter ( );
    double GetThreadLength ( );
    VARIANT_BOOL GetIsValidThread ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_threadType (
        /*[out,retval]*/ enum ADTappedThreadType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_threadClass (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Pitch (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_tapDrillDiameter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MajorDiameter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinorDiameter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_pitchDiameter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThreadLength (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsValidThread (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("af6f8024-b39a-40d5-85bd-20267b432bbf"))
IADThickenSurfaceFeature : IDispatch
{};

struct __declspec(uuid("c137e6b4-86c5-4296-982e-f8cd357aa3eb"))
IADThinWallExtrusionFeature : IDispatch
{};

struct __declspec(uuid("1cad58cf-1068-4309-9d95-476457945998"))
IADThinWallRevolutionFeature : IDispatch
{};

struct __declspec(uuid("60c6f874-afc7-47c7-b73c-1a776891878c"))
IADThinWallSweepFeature : IDispatch
{};

struct __declspec(uuid("00c1b023-8b4b-4836-8721-3658f2901bea"))
IADTopologySummary : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFacesCount))
    long FacesCount;
    __declspec(property(get=GetEdgesCount))
    long EdgesCount;
    __declspec(property(get=GetVerticesCount))
    long VerticesCount;
    __declspec(property(get=GetLumpsCount))
    long LumpsCount;
    __declspec(property(get=GetShellsCount))
    long ShellsCount;
    __declspec(property(get=GetCoedgesCount))
    long CoedgesCount;
    __declspec(property(get=GetLoopsCount))
    long LoopsCount;
    __declspec(property(get=GetWiresCount))
    long WiresCount;

    //
    // Wrapper methods for error-handling
    //

    long GetFacesCount ( );
    long GetEdgesCount ( );
    long GetVerticesCount ( );
    long GetLumpsCount ( );
    long GetShellsCount ( );
    long GetCoedgesCount ( );
    long GetLoopsCount ( );
    long GetWiresCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FacesCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EdgesCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VerticesCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LumpsCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShellsCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CoedgesCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LoopsCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_WiresCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("4556562a-f6cd-4fed-a850-35068d31b9d0"))
IADTrimModelFeature : IDispatch
{};

struct __declspec(uuid("8bee896d-b026-4840-ac65-b98b1405e1c5"))
IADVector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX))
    double X;
    __declspec(property(get=GetY))
    double Y;
    __declspec(property(get=GetZ))
    double Z;
    __declspec(property(get=GetLength))
    double Length;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    double GetY ( );
    double GetZ ( );
    VARIANT_BOOL IsEqualTo (
        struct IADVector * pVector );
    IADVectorPtr Normalize ( );
    double GetLength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_X (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Y (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Z (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsEqualTo (
        /*[in]*/ struct IADVector * pVector,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Normalize (
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("7447dfeb-de86-4467-8178-49cc3c4f705f"))
IAD3DSketchCircle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    IAD3DSketchPointPtr Center;
    __declspec(property(get=GetNormal))
    IADVectorPtr Normal;
    __declspec(property(get=GetRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    IAD3DSketchPointPtr GetCenter ( );
    IADVectorPtr GetNormal ( );
    double GetRadius ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IAD3DSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("10e20f0a-cccf-49aa-af6f-af9b6eb852b5"))
IADCircle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    IADPointPtr Center;
    __declspec(property(get=GetAxis))
    IADVectorPtr Axis;
    __declspec(property(get=GetRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    IADPointPtr GetCenter ( );
    IADVectorPtr GetAxis ( );
    double GetRadius ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("6da4dfb1-1e62-4efd-8ebb-a61edf2feba9"))
IADCircularArc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    IADPointPtr Center;
    __declspec(property(get=GetAxis))
    IADVectorPtr Axis;
    __declspec(property(get=GetRadius))
    double Radius;
    __declspec(property(get=GetStart))
    IADPointPtr Start;
    __declspec(property(get=GetEnd))
    IADPointPtr End;

    //
    // Wrapper methods for error-handling
    //

    IADPointPtr GetCenter ( );
    IADVectorPtr GetAxis ( );
    double GetRadius ( );
    IADPointPtr GetStart ( );
    IADPointPtr GetEnd ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_End (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
};

struct __declspec(uuid("71b4a236-5ae1-4209-96db-c8a45c384294"))
IADCone : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBasePoint))
    IADPointPtr BasePoint;
    __declspec(property(get=GetAxis))
    IADVectorPtr Axis;
    __declspec(property(get=GetRadius))
    double Radius;
    __declspec(property(get=GetHalfAngle))
    double HalfAngle;
    __declspec(property(get=GetIsExpanding))
    VARIANT_BOOL IsExpanding;

    //
    // Wrapper methods for error-handling
    //

    IADPointPtr GetBasePoint ( );
    IADVectorPtr GetAxis ( );
    double GetRadius ( );
    double GetHalfAngle ( );
    VARIANT_BOOL GetIsExpanding ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BasePoint (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HalfAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsExpanding (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("6b2179a3-d4dc-43e6-9c80-c0ca030b1a05"))
IADCurve : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetCurveType))
    enum ADGeometryType CurveType;
    __declspec(property(get=GetIsClosed))
    VARIANT_BOOL IsClosed;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    enum ADGeometryType GetCurveType ( );
    IADPointPtr PointAtParam (
        double pParam );
    double ParamAtPoint (
        struct IADPoint * pPoint );
    HRESULT GetParameterExtents (
        double * pParamMin,
        double * pParamMax );
    IADVectorPtr Curvature (
        double pParam );
    IADVectorPtr Tangent (
        double pParam );
    VARIANT_BOOL GetIsClosed ( );
    VARIANT_BOOL GetClosestPoint (
        double pointX,
        double pointY,
        double pointZ,
        struct IADPoint * * ppClosestPoint,
        double * pDistance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurveType (
        /*[out,retval]*/ enum ADGeometryType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PointAtParam (
        /*[in]*/ double pParam,
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ParamAtPoint (
        /*[in]*/ struct IADPoint * pPoint,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetParameterExtents (
        /*[out]*/ double * pParamMin,
        /*[out]*/ double * pParamMax ) = 0;
      virtual HRESULT __stdcall raw_Curvature (
        /*[in]*/ double pParam,
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Tangent (
        /*[in]*/ double pParam,
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsClosed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetClosestPoint (
        /*[in]*/ double pointX,
        /*[in]*/ double pointY,
        /*[in]*/ double pointZ,
        /*[out]*/ struct IADPoint * * ppClosestPoint,
        /*[out]*/ double * pDistance,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("db731a14-374f-41ac-bebe-f5fc0199f655"))
IADCylinder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBasePoint))
    IADPointPtr BasePoint;
    __declspec(property(get=GetAxis))
    IADVectorPtr Axis;
    __declspec(property(get=GetRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    IADPointPtr GetBasePoint ( );
    IADVectorPtr GetAxis ( );
    double GetRadius ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BasePoint (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("a4d47c2e-5e16-403f-ba59-2f8245d6b151"))
IADEllipse : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    IADPointPtr Center;
    __declspec(property(get=GetAxis))
    IADVectorPtr Axis;
    __declspec(property(get=GetMajorAxis))
    double MajorAxis;
    __declspec(property(get=GetMinorMajorRatio))
    double MinorMajorRatio;

    //
    // Wrapper methods for error-handling
    //

    IADPointPtr GetCenter ( );
    IADVectorPtr GetAxis ( );
    double GetMajorAxis ( );
    double GetMinorMajorRatio ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MajorAxis (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinorMajorRatio (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("01ee5fac-c570-4563-9c50-22a0ea76b96d"))
IADEllipticalArc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    IADPointPtr Center;
    __declspec(property(get=GetAxis))
    IADVectorPtr Axis;
    __declspec(property(get=GetMajorAxis))
    double MajorAxis;
    __declspec(property(get=GetMinorMajorRatio))
    double MinorMajorRatio;
    __declspec(property(get=GetStart))
    IADPointPtr Start;
    __declspec(property(get=GetEnd))
    IADPointPtr End;

    //
    // Wrapper methods for error-handling
    //

    IADPointPtr GetCenter ( );
    IADVectorPtr GetAxis ( );
    double GetMajorAxis ( );
    double GetMinorMajorRatio ( );
    IADPointPtr GetStart ( );
    IADPointPtr GetEnd ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MajorAxis (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinorMajorRatio (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_End (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
};

struct __declspec(uuid("fedb2dcf-bddc-4629-9d20-985e8f899bc3"))
IADLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartPoint))
    IADPointPtr StartPoint;
    __declspec(property(get=GetDirectionVector))
    IADVectorPtr DirectionVector;

    //
    // Wrapper methods for error-handling
    //

    IADPointPtr GetStartPoint ( );
    IADVectorPtr GetDirectionVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartPoint (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
};

struct __declspec(uuid("eb9db43e-fad2-4c05-8a3b-36fdaf3570b7"))
IADPlane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRootPoint))
    IADPointPtr RootPoint;
    __declspec(property(get=GetNormal))
    IADVectorPtr Normal;

    //
    // Wrapper methods for error-handling
    //

    IADPointPtr GetRootPoint ( );
    IADVectorPtr GetNormal ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RootPoint (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
};

struct __declspec(uuid("1b04d655-d0a6-489b-94a4-7d3e532b5417"))
IADSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetSurfaceType))
    enum ADGeometryType SurfaceType;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    enum ADGeometryType GetSurfaceType ( );
    IADVectorPtr NormalAtParam (
        double puParam,
        double pvParam );
    IADVectorPtr NormalAtPoint (
        struct IADPoint * pPoint );
    IADPointPtr PointAtParam (
        double pParamU,
        double pParamV );
    HRESULT GetParamAtPoint (
        struct IADPoint * pPoint,
        double * pParamU,
        double * pParamV );
    HRESULT GetParameterExtents (
        double * pUmin,
        double * pUmax,
        double * pVmin,
        double * pVmax );
    HRESULT GetFirstDerivative (
        double paramU,
        double paramV,
        struct IADVector * * ppVectorU,
        struct IADVector * * ppVectorV );
    HRESULT GetSecondDerivative (
        double paramU,
        double paramV,
        struct IADVector * * ppVectorUU,
        struct IADVector * * ppVectorUV,
        struct IADVector * * ppVectorVV );
    VARIANT_BOOL GetClosestPoint (
        double pointX,
        double pointY,
        double pointZ,
        struct IADPoint * * ppClosestPoint,
        double * pDistance );
    VARIANT_BOOL GetRayIntersectionPoint (
        double pointX,
        double pointY,
        double pointZ,
        double rayDirX,
        double rayDirY,
        double rayDirZ,
        VARIANT_BOOL bBidrection,
        struct IADPoint * * ppXPoint,
        double * pDistance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SurfaceType (
        /*[out,retval]*/ enum ADGeometryType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_NormalAtParam (
        /*[in]*/ double puParam,
        /*[in]*/ double pvParam,
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_NormalAtPoint (
        /*[in]*/ struct IADPoint * pPoint,
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PointAtParam (
        /*[in]*/ double pParamU,
        /*[in]*/ double pParamV,
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetParamAtPoint (
        /*[in]*/ struct IADPoint * pPoint,
        /*[out]*/ double * pParamU,
        /*[out]*/ double * pParamV ) = 0;
      virtual HRESULT __stdcall raw_GetParameterExtents (
        /*[out]*/ double * pUmin,
        /*[out]*/ double * pUmax,
        /*[out]*/ double * pVmin,
        /*[out]*/ double * pVmax ) = 0;
      virtual HRESULT __stdcall raw_GetFirstDerivative (
        /*[in]*/ double paramU,
        /*[in]*/ double paramV,
        /*[out]*/ struct IADVector * * ppVectorU,
        /*[out]*/ struct IADVector * * ppVectorV ) = 0;
      virtual HRESULT __stdcall raw_GetSecondDerivative (
        /*[in]*/ double paramU,
        /*[in]*/ double paramV,
        /*[out]*/ struct IADVector * * ppVectorUU,
        /*[out]*/ struct IADVector * * ppVectorUV,
        /*[out]*/ struct IADVector * * ppVectorVV ) = 0;
      virtual HRESULT __stdcall raw_GetClosestPoint (
        /*[in]*/ double pointX,
        /*[in]*/ double pointY,
        /*[in]*/ double pointZ,
        /*[out]*/ struct IADPoint * * ppClosestPoint,
        /*[out]*/ double * pDistance,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRayIntersectionPoint (
        /*[in]*/ double pointX,
        /*[in]*/ double pointY,
        /*[in]*/ double pointZ,
        /*[in]*/ double rayDirX,
        /*[in]*/ double rayDirY,
        /*[in]*/ double rayDirZ,
        /*[in]*/ VARIANT_BOOL bBidrection,
        /*[out]*/ struct IADPoint * * ppXPoint,
        /*[out]*/ double * pDistance,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("2f003e24-9404-4357-94f3-cef9baee831b"))
IADTorus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter))
    IADPointPtr Center;
    __declspec(property(get=GetAxis))
    IADVectorPtr Axis;
    __declspec(property(get=GetMajorRadius))
    double MajorRadius;
    __declspec(property(get=GetMinorRadius))
    double MinorRadius;

    //
    // Wrapper methods for error-handling
    //

    IADPointPtr GetCenter ( );
    IADVectorPtr GetAxis ( );
    double GetMajorRadius ( );
    double GetMinorRadius ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MajorRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinorRadius (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("424539a8-7014-4174-b0bf-f5ee5bb71df5"))
IAutomationHook : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRoot))
    IDispatchPtr Root;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetRoot ( );
    HRESULT Initialize (
        _bstr_t serverURL,
        _bstr_t loginID,
        _bstr_t passwd,
        VARIANT_BOOL disableSecureMode,
        long unused );
    HRESULT InitializeDebug (
        _bstr_t serverURL,
        _bstr_t loginID,
        _bstr_t passwd,
        VARIANT_BOOL disableSecureMode,
        long unused );
    HRESULT InitializeService ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ IDispatch * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Initialize (
        /*[in]*/ BSTR serverURL,
        /*[in]*/ BSTR loginID,
        /*[in]*/ BSTR passwd,
        /*[in]*/ VARIANT_BOOL disableSecureMode,
        /*[in]*/ long unused ) = 0;
      virtual HRESULT __stdcall raw_InitializeDebug (
        /*[in]*/ BSTR serverURL,
        /*[in]*/ BSTR loginID,
        /*[in]*/ BSTR passwd,
        /*[in]*/ VARIANT_BOOL disableSecureMode,
        /*[in]*/ long unused ) = 0;
      virtual HRESULT __stdcall raw_InitializeService ( ) = 0;
};

struct __declspec(uuid("2ed34425-032b-4708-b5fc-409faeafc5a5"))
IDecomposedTransformData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleX))
    double ScaleX;
    __declspec(property(get=GetScaleY))
    double ScaleY;
    __declspec(property(get=GetScaleZ))
    double ScaleZ;
    __declspec(property(get=GetShearXY))
    double ShearXY;
    __declspec(property(get=GetShearYZ))
    double ShearYZ;
    __declspec(property(get=GetShearZX))
    double ShearZX;
    __declspec(property(get=GetTranslateX))
    double TranslateX;
    __declspec(property(get=GetTranslateY))
    double TranslateY;
    __declspec(property(get=GetTranslateZ))
    double TranslateZ;
    __declspec(property(get=GetRotateX))
    double RotateX;
    __declspec(property(get=GetRotateY))
    double RotateY;
    __declspec(property(get=GetRotateZ))
    double RotateZ;
    __declspec(property(get=GetRotateVector))
    IADVectorPtr RotateVector;
    __declspec(property(get=GetRotateAngle))
    double RotateAngle;

    //
    // Wrapper methods for error-handling
    //

    double GetScaleX ( );
    double GetScaleY ( );
    double GetScaleZ ( );
    double GetShearXY ( );
    double GetShearYZ ( );
    double GetShearZX ( );
    double GetTranslateX ( );
    double GetTranslateY ( );
    double GetTranslateZ ( );
    double GetRotateX ( );
    double GetRotateY ( );
    double GetRotateZ ( );
    IADVectorPtr GetRotateVector ( );
    double GetRotateAngle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScaleX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ScaleZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShearXY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShearYZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShearZX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslateX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslateY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TranslateZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotateX (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotateY (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotateZ (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotateVector (
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RotateAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("c0b68540-c0aa-4568-8430-16638c886548"))
IADTransformation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToString))
    _bstr_t ToString;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * Array ( );
    IADTransformationPtr Apply (
        struct IADTransformation * pTransform );
    IADTransformationPtr Inverse ( );
    VARIANT_BOOL IsEqualTo (
        struct IADTransformation * pTransform );
    IDecomposedTransformDataPtr Decompose ( );
    _bstr_t GetToString ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Array (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Apply (
        /*[in]*/ struct IADTransformation * pTransform,
        /*[out,retval]*/ struct IADTransformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Inverse (
        /*[out,retval]*/ struct IADTransformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsEqualTo (
        /*[in]*/ struct IADTransformation * pTransform,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Decompose (
        /*[out,retval]*/ struct IDecomposedTransformData * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ToString (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("21220515-42da-402f-9e75-dc051d5d63e2"))
IADGeometryFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IADPointPtr CreatePoint (
        double X,
        double Y,
        double Z );
    IADVectorPtr CreateVector (
        double I,
        double J,
        double K );
    IADTransformationPtr CreateTransform (
        SAFEARRAY * * pArray );
    IADTransformationPtr CreateIdentityTransform ( );
    IADTransformationPtr CreateRotationTransform (
        struct IADVector * rotationAxisDirection,
        struct IADPoint * rotationAxisPosition,
        double rotationAngle );
    IADTransformationPtr CreateTranslationTransformAlongVector (
        struct IADVector * translationVector );
    IADTransformationPtr CreateTranslationTransformByXYZ (
        double translationX,
        double translationY,
        double translationZ );
    IADTransformationPtr CreateUniformScalingTransform (
        double scaleFactor );
    IADTransformationPtr CreateTransformByVariantArray (
        const _variant_t & pArray );
    IAD2DPointPtr Create2DPoint (
        double X,
        double Y );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreatePoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVector (
        /*[in]*/ double I,
        /*[in]*/ double J,
        /*[in]*/ double K,
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTransform (
        /*[in]*/ SAFEARRAY * * pArray,
        /*[out,retval]*/ struct IADTransformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateIdentityTransform (
        /*[out,retval]*/ struct IADTransformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRotationTransform (
        /*[in]*/ struct IADVector * rotationAxisDirection,
        /*[in]*/ struct IADPoint * rotationAxisPosition,
        /*[in]*/ double rotationAngle,
        /*[out,retval]*/ struct IADTransformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTranslationTransformAlongVector (
        /*[in]*/ struct IADVector * translationVector,
        /*[out,retval]*/ struct IADTransformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTranslationTransformByXYZ (
        /*[in]*/ double translationX,
        /*[in]*/ double translationY,
        /*[in]*/ double translationZ,
        /*[out,retval]*/ struct IADTransformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateUniformScalingTransform (
        /*[in]*/ double scaleFactor,
        /*[out,retval]*/ struct IADTransformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTransformByVariantArray (
        /*[in]*/ VARIANT pArray,
        /*[out,retval]*/ struct IADTransformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Create2DPoint (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[out,retval]*/ struct IAD2DPoint * * pRetVal ) = 0;
};

struct __declspec(uuid("47230325-d233-4e28-930a-a54d23db0673"))
INotificationSelector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWrite,put=PutWrite))
    VARIANT_BOOL Write;
    __declspec(property(get=GetDelete,put=PutDelete))
    VARIANT_BOOL Delete;
    __declspec(property(get=GetCheckOut,put=PutCheckOut))
    VARIANT_BOOL CheckOut;
    __declspec(property(get=GetCheckIn,put=PutCheckIn))
    VARIANT_BOOL CheckIn;
    __declspec(property(get=GetAdministrate,put=PutAdministrate))
    VARIANT_BOOL Administrate;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetWrite ( );
    void PutWrite (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDelete ( );
    void PutDelete (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetCheckOut ( );
    void PutCheckOut (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetCheckIn ( );
    void PutCheckIn (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetAdministrate ( );
    void PutAdministrate (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Write (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Write (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delete (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delete (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_CheckOut (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CheckOut (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_CheckIn (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_CheckIn (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Administrate (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Administrate (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("ce2229d4-8e53-40ee-ad40-6932e966138a"))
IObjectCollector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetobjectType))
    enum ADObjectType objectType;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IDispatchPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    enum ADObjectType GetobjectType ( );
    HRESULT Add (
        IDispatch * pObject );
    HRESULT Remove (
        const _variant_t & index );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ IDispatch * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_objectType (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ IDispatch * pObject ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT index ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("118ebc42-7d5c-491f-b98c-ed9f95d1f5f9"))
IADAssemblyConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConstraintType))
    enum ADAssemblyConstraintType ConstraintType;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParticipants))
    IObjectCollectorPtr Participants;
    __declspec(property(get=GetIsSuppressed,put=PutIsSuppressed))
    VARIANT_BOOL IsSuppressed;
    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetHasError))
    VARIANT_BOOL HasError;
    __declspec(property(get=GetBoundType))
    enum ADAssemblyConstraintBoundType BoundType;

    //
    // Wrapper methods for error-handling
    //

    enum ADAssemblyConstraintType GetConstraintType ( );
    _bstr_t GetName ( );
    IObjectCollectorPtr GetParticipants ( );
    VARIANT_BOOL GetIsSuppressed ( );
    void PutIsSuppressed (
        VARIANT_BOOL pRetVal );
    enum ADObjectType GetType ( );
    VARIANT_BOOL GetHasError ( );
    enum ADAssemblyConstraintBoundType GetBoundType ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConstraintType (
        /*[out,retval]*/ enum ADAssemblyConstraintType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Participants (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSuppressed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsSuppressed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasError (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_BoundType (
        /*[out,retval]*/ enum ADAssemblyConstraintBoundType * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("d98b366e-bdfe-413a-b8ee-98c3d438e759"))
IADLoftFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsCutout))
    VARIANT_BOOL IsCutout;
    __declspec(property(get=GetCrossSections))
    IObjectCollectorPtr CrossSections;
    __declspec(property(get=GetIsUsingGuideCurves))
    VARIANT_BOOL IsUsingGuideCurves;
    __declspec(property(get=GetGuideCurveType))
    enum ADLoftGuideType GuideCurveType;
    __declspec(property(get=GetGuideCurves))
    IObjectCollectorPtr GuideCurves;
    __declspec(property(get=GetIsMinimizeTwist))
    VARIANT_BOOL IsMinimizeTwist;
    __declspec(property(get=GetIsMinimizeCurvature))
    VARIANT_BOOL IsMinimizeCurvature;
    __declspec(property(get=GetIsSimplifySurface))
    VARIANT_BOOL IsSimplifySurface;
    __declspec(property(get=GetIsConnectEnds))
    VARIANT_BOOL IsConnectEnds;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsCutout ( );
    IObjectCollectorPtr GetCrossSections ( );
    VARIANT_BOOL GetIsUsingGuideCurves ( );
    enum ADLoftGuideType GetGuideCurveType ( );
    IObjectCollectorPtr GetGuideCurves ( );
    VARIANT_BOOL GetIsMinimizeTwist ( );
    VARIANT_BOOL GetIsMinimizeCurvature ( );
    VARIANT_BOOL GetIsSimplifySurface ( );
    VARIANT_BOOL GetIsConnectEnds ( );
    VARIANT_BOOL IsTangentSpecified (
        const _variant_t & crossSection );
    double GetTangentMagnitude (
        const _variant_t & crossSection );
    double GetTangentAngle (
        const _variant_t & crossSection );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsCutout (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CrossSections (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsUsingGuideCurves (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GuideCurveType (
        /*[out,retval]*/ enum ADLoftGuideType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GuideCurves (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsMinimizeTwist (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsMinimizeCurvature (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSimplifySurface (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsConnectEnds (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsTangentSpecified (
        /*[in]*/ VARIANT crossSection,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTangentMagnitude (
        /*[in]*/ VARIANT crossSection,
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTangentAngle (
        /*[in]*/ VARIANT crossSection,
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("0f0deae9-4e23-4ac5-9eb4-009b5267bd0c"))
IAnalyzedSketchData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisjointEnds))
    IObjectCollectorPtr DisjointEnds;
    __declspec(property(get=GetOpenLoops))
    IObjectCollectorPtr OpenLoops;
    __declspec(property(get=GetOverLaps))
    IObjectCollectorPtr OverLaps;
    __declspec(property(get=GetIntersections))
    IObjectCollectorPtr Intersections;
    __declspec(property(get=GetDegenerateFigures))
    IObjectCollectorPtr DegenerateFigures;

    //
    // Wrapper methods for error-handling
    //

    IObjectCollectorPtr GetDisjointEnds ( );
    IObjectCollectorPtr GetOpenLoops ( );
    IObjectCollectorPtr GetOverLaps ( );
    IObjectCollectorPtr GetIntersections ( );
    IObjectCollectorPtr GetDegenerateFigures ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DisjointEnds (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OpenLoops (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OverLaps (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Intersections (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DegenerateFigures (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
};

struct __declspec(uuid("d7c6116a-a81f-439e-b280-ce5dc2835500"))
IPermissionSelector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRead,put=PutRead))
    VARIANT_BOOL Read;
    __declspec(property(get=GetWrite,put=PutWrite))
    VARIANT_BOOL Write;
    __declspec(property(get=GetDelete,put=PutDelete))
    VARIANT_BOOL Delete;
    __declspec(property(get=GetViewOnly,put=PutViewOnly))
    VARIANT_BOOL ViewOnly;
    __declspec(property(get=GetAdministrate,put=PutAdministrate))
    VARIANT_BOOL Administrate;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetRead ( );
    void PutRead (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetWrite ( );
    void PutWrite (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetDelete ( );
    void PutDelete (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetViewOnly ( );
    void PutViewOnly (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetAdministrate ( );
    void PutAdministrate (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Read (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Read (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Write (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Write (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Delete (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Delete (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_ViewOnly (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ViewOnly (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Administrate (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Administrate (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("7ccf508b-f9c3-4e15-9ef4-95e5f74cdbdc"))
ISketchDegenerateFigure : IDispatch
{};

struct __declspec(uuid("ca7ab7e0-4997-4773-a9d5-de3758b95306"))
ISketchFigureDisjointEnd : IDispatch
{};

struct __declspec(uuid("2b0627d7-cafb-4160-ad3b-3c08c4c7ec6f"))
ISketchFigureIntersection : IDispatch
{};

struct __declspec(uuid("d2fce742-6d82-4ae1-9d1d-38018be87683"))
ISketchFigureOpenLoop : IDispatch
{};

struct __declspec(uuid("9ebd2659-1354-4cae-a104-b37eac1dba84"))
ISketchFigureOverlap : IDispatch
{};

enum __declspec(uuid("06cc0454-3e4c-3a3a-a569-ae2d4ef63cb6"))
StdError : int
{
    StdError_STD_E_UNEXPECTED = -2147418113,
    StdError_STD_E_NOTIMPL = -2147467263,
    StdError_STD_E_OUTOFMEMORY = -2147024882,
    StdError_STD_E_INVALIDARG = -2147024809,
    StdError_STD_E_ABORT = -2147467260,
    StdError_STD_E_FAIL = -2147467259,
    StdError_STD_E_ACCESSDENIED = -2147024891,
    StdError_STD_DISP_E_TYPEMISMATCH = -2147352571,
    StdError_STD_DISP_E_UNKNOWNNAME = -2147352570,
    StdError_STD_DISP_E_EXCEPTION = -2147352567,
    StdError_STD_DISP_E_OVERFLOW = -2147352566,
    StdError_STD_DISP_E_BADINDEX = -2147352565,
    StdError_STD_DISP_E_BADPARAMCOUNT = -2147352562,
    StdError_STD_DISP_E_PARAMNOTOPTIONAL = -2147352561,
    StdError_STD_E_POINTER = -2147467261
};

struct __declspec(uuid("ef769fec-39e1-4be2-abdc-150ff4273a8d"))
_IADEventsCallback : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnInitialize ( );
    HRESULT OnTerminate ( );
    HRESULT OnSessionOpen (
        struct IADSession * pSession );
    HRESULT OnSessionClose (
        struct IADSession * pSession );
    HRESULT OnSessionChange (
        struct IADSession * pSession,
        SAFEARRAY * * pModifiedItems,
        SAFEARRAY * * changeType );
    HRESULT OnModelLoadComplete (
        struct IADSession * pSession );
};

struct __declspec(uuid("660f86c9-5fda-336b-a27c-9e547e4ab27d"))
_AutomationHook : IDispatch
{};

struct __declspec(uuid("a2d3a83c-89cd-3afb-a7ce-7db7c2ec762d"))
_EventManager : IDispatch
{};

struct __declspec(uuid("aea88a0f-a6f2-4d6e-9f1c-b2d55005b19a"))
IAD3DSketch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetSession))
    IADDesignSessionPtr Session;
    __declspec(property(get=GetIsConsumed))
    VARIANT_BOOL IsConsumed;
    __declspec(property(get=GetConsumingFeature))
    IADPartFeaturePtr ConsumingFeature;
    __declspec(property(get=GetFigures))
    IAD3DSketchFiguresPtr Figures;
    __declspec(property(get=GetKey))
    SAFEARRAY * Key;
    __declspec(property(get=GetIsSuppressed))
    VARIANT_BOOL IsSuppressed;
    __declspec(property(get=GetIsActive))
    VARIANT_BOOL IsActive;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pRetVal );
    IADRootPtr GetRoot ( );
    IADDesignSessionPtr GetSession ( );
    VARIANT_BOOL GetIsConsumed ( );
    IADPartFeaturePtr GetConsumingFeature ( );
    HRESULT Delete ( );
    IAD3DSketchFiguresPtr GetFigures ( );
    SAFEARRAY * GetKey ( );
    HRESULT BeginChange ( );
    HRESULT EndChange ( );
    VARIANT_BOOL GetIsSuppressed ( );
    VARIANT_BOOL GetIsActive ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsConsumed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConsumingFeature (
        /*[out,retval]*/ struct IADPartFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Figures (
        /*[out,retval]*/ struct IAD3DSketchFigures * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_BeginChange ( ) = 0;
      virtual HRESULT __stdcall raw_EndChange ( ) = 0;
      virtual HRESULT __stdcall get_IsSuppressed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsActive (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("bf71b7d1-28a6-4f10-a94c-85efdd2d9139"))
IAD3DSketches : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAD3DSketchPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADDesignSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IAD3DSketchPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADDesignSessionPtr GetSession ( );
    IAD3DSketchPtr Add3DSketch (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IAD3DSketch * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add3DSketch (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IAD3DSketch * * pRetVal ) = 0;
};

struct __declspec(uuid("f3d516e7-794e-41b7-8cf8-25a7be4e10f3"))
IAD3DSketchFigure : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetFigureType))
    enum ADGeometryType FigureType;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetSketch))
    IAD3DSketchPtr Sketch;
    __declspec(property(get=GetIsReference))
    VARIANT_BOOL IsReference;
    __declspec(property(get=GetID))
    _bstr_t ID;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    enum ADGeometryType GetFigureType ( );
    IADRootPtr GetRoot ( );
    IAD3DSketchPtr GetSketch ( );
    VARIANT_BOOL GetIsReference ( );
    _bstr_t GetID ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FigureType (
        /*[out,retval]*/ enum ADGeometryType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IAD3DSketch * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReference (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("315a9c4d-0a6a-408f-bce4-231b968b9af5"))
IAD3DSketchFigures : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAD3DSketchFigurePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSketch))
    IAD3DSketchPtr Sketch;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IAD3DSketchFigurePtr GetItem (
        long index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IAD3DSketchPtr GetSketch ( );
    IAD3DSketchPointPtr AddPoint (
        struct IADPoint * Point );
    IAD3DSketchPointPtr AddPoint_2 (
        double X,
        double Y,
        double Z );
    IAD3DSketchLinePtr AddLine (
        double x1,
        double y1,
        double z1,
        double x2,
        double y2,
        double z2 );
    IAD3DSketchLinePtr AddLine_2 (
        struct IADPoint * Start,
        struct IADPoint * End );
    IAD3DSketchCircularArcPtr AddCircularArcByCenterStartEnd (
        double XCenter,
        double YCenter,
        double ZCenter,
        double XStartPt,
        double YStartPt,
        double ZStartPt,
        double XEndPt,
        double YEndPt,
        double ZEndPt );
    IAD3DSketchCircularArcPtr AddCircularArcByCenterStartEnd_2 (
        struct IADPoint * Center,
        struct IADPoint * Start,
        struct IADPoint * End );
    IAD3DSketchBsplinePtr AddBsplineByInterpolation (
        SAFEARRAY * * pInterpolationPoints );
    IAD3DSketchFigurePtr GetFigureByID (
        _bstr_t ID );
    IObjectCollectorPtr AddPolyline (
        SAFEARRAY * * pPoints );
    IAD3DSketchBsplinePtr AddBspline (
        long order,
        long numCtlPoints,
        SAFEARRAY * * pCtlPoints,
        SAFEARRAY * * pKnotVector,
        SAFEARRAY * * pWeights );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IAD3DSketchFigure * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IAD3DSketch * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddPoint (
        /*[in]*/ struct IADPoint * Point,
        /*[out,retval]*/ struct IAD3DSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddPoint_2 (
        /*[in]*/ double X,
        /*[in]*/ double Y,
        /*[in]*/ double Z,
        /*[out,retval]*/ struct IAD3DSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[out,retval]*/ struct IAD3DSketchLine * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddLine_2 (
        /*[in]*/ struct IADPoint * Start,
        /*[in]*/ struct IADPoint * End,
        /*[out,retval]*/ struct IAD3DSketchLine * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCircularArcByCenterStartEnd (
        /*[in]*/ double XCenter,
        /*[in]*/ double YCenter,
        /*[in]*/ double ZCenter,
        /*[in]*/ double XStartPt,
        /*[in]*/ double YStartPt,
        /*[in]*/ double ZStartPt,
        /*[in]*/ double XEndPt,
        /*[in]*/ double YEndPt,
        /*[in]*/ double ZEndPt,
        /*[out,retval]*/ struct IAD3DSketchCircularArc * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCircularArcByCenterStartEnd_2 (
        /*[in]*/ struct IADPoint * Center,
        /*[in]*/ struct IADPoint * Start,
        /*[in]*/ struct IADPoint * End,
        /*[out,retval]*/ struct IAD3DSketchCircularArc * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddBsplineByInterpolation (
        /*[in]*/ SAFEARRAY * * pInterpolationPoints,
        /*[out,retval]*/ struct IAD3DSketchBspline * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFigureByID (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ struct IAD3DSketchFigure * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddPolyline (
        /*[in]*/ SAFEARRAY * * pPoints,
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddBspline (
        /*[in]*/ long order,
        /*[in]*/ long numCtlPoints,
        /*[in]*/ SAFEARRAY * * pCtlPoints,
        /*[in]*/ SAFEARRAY * * pKnotVector,
        /*[in]*/ SAFEARRAY * * pWeights,
        /*[out,retval]*/ struct IAD3DSketchBspline * * pRetVal ) = 0;
};

struct __declspec(uuid("922a4936-c391-4598-b7c8-57a3b8a7bbe5"))
IADAddOns : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ExportFile (
        _bstr_t targetFileName,
        struct IADSession * Session );
    HRESULT ExportFile_2 (
        _bstr_t targetFileName,
        struct IADSession * Session,
        _bstr_t optionFilePath );
    IADSessionPtr ImportFile (
        _bstr_t filePath,
        struct IADSession * Session );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ExportFile (
        /*[in]*/ BSTR targetFileName,
        /*[in]*/ struct IADSession * Session ) = 0;
      virtual HRESULT __stdcall raw_ExportFile_2 (
        /*[in]*/ BSTR targetFileName,
        /*[in]*/ struct IADSession * Session,
        /*[in]*/ BSTR optionFilePath ) = 0;
      virtual HRESULT __stdcall raw_ImportFile (
        /*[in]*/ BSTR filePath,
        /*[in]*/ struct IADSession * Session,
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
};

struct __declspec(uuid("e533c0a8-2b68-454b-a2d9-14b0dd11712e"))
IADAlignConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOffset))
    IADParameterPtr Offset;
    __declspec(property(get=GetMaximumOffset))
    IADParameterPtr MaximumOffset;
    __declspec(property(get=GetMinimumOffset))
    IADParameterPtr MinimumOffset;

    //
    // Wrapper methods for error-handling
    //

    IADParameterPtr GetOffset ( );
    IADParameterPtr GetMaximumOffset ( );
    IADParameterPtr GetMinimumOffset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumOffset (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumOffset (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
};

struct __declspec(uuid("382717fe-9dda-4e12-892c-26521f55c1f8"))
IADAngleConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle))
    IADParameterPtr Angle;
    __declspec(property(get=GetMaximumAngle))
    IADParameterPtr MaximumAngle;
    __declspec(property(get=GetMinimumAngle))
    IADParameterPtr MinimumAngle;

    //
    // Wrapper methods for error-handling
    //

    IADParameterPtr GetAngle ( );
    IADParameterPtr GetMaximumAngle ( );
    IADParameterPtr GetMinimumAngle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumAngle (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumAngle (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
};

struct __declspec(uuid("362d8986-814b-4654-9423-290236532604"))
IADAssemblyConstraints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADAssemblyConstraintPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    long GetCount ( );
    IADAssemblyConstraintPtr GetItem (
        const _variant_t & index );
    DIEnumPtr GetEnum ( );
    IADAssemblyConstraintPtr AddConstraint (
        struct IADTargetProxy * first,
        struct IADTargetProxy * second,
        enum ADAssemblyConstraintType Type,
        const _variant_t & parameterValue,
        VARIANT_BOOL isReversed,
        _bstr_t Name,
        _bstr_t parameterName );
    IADAssemblyConstraintPtr AddConstraintEx (
        struct IADTargetProxy * first,
        struct IADTargetProxy * second,
        enum ADAssemblyConstraintType eConstraintType,
        enum ADAssemblyConstraintBoundType eBoundType,
        const _variant_t & parameterValue,
        const _variant_t & parameter2Value,
        VARIANT_BOOL isReversed,
        _bstr_t Name,
        _bstr_t parameterName,
        _bstr_t parameter2Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADAssemblyConstraint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddConstraint (
        /*[in]*/ struct IADTargetProxy * first,
        /*[in]*/ struct IADTargetProxy * second,
        /*[in]*/ enum ADAssemblyConstraintType Type,
        /*[in]*/ VARIANT parameterValue,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR parameterName,
        /*[out,retval]*/ struct IADAssemblyConstraint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddConstraintEx (
        /*[in]*/ struct IADTargetProxy * first,
        /*[in]*/ struct IADTargetProxy * second,
        /*[in]*/ enum ADAssemblyConstraintType eConstraintType,
        /*[in]*/ enum ADAssemblyConstraintBoundType eBoundType,
        /*[in]*/ VARIANT parameterValue,
        /*[in]*/ VARIANT parameter2Value,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR parameterName,
        /*[in]*/ BSTR parameter2Name,
        /*[out,retval]*/ struct IADAssemblyConstraint * * pRetVal ) = 0;
};

struct __declspec(uuid("9c3735ad-3f04-4d24-95e8-eeb24a98980b"))
IADAssemblyFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetSession))
    IADSessionPtr Session;
    __declspec(property(get=GetFeatureType))
    enum ADAssemblyFeatureType FeatureType;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    IADRootPtr GetRoot ( );
    IADSessionPtr GetSession ( );
    enum ADAssemblyFeatureType GetFeatureType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FeatureType (
        /*[out,retval]*/ enum ADAssemblyFeatureType * pRetVal ) = 0;
};

struct __declspec(uuid("0946b7dd-9f78-45cb-8d1a-9cf8b7a90485"))
IADAssemblyFeatures : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADAssemblyFeaturePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADAssemblySessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADAssemblyFeaturePtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADAssemblySessionPtr GetSession ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADAssemblyFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADAssemblySession * * pRetVal ) = 0;
};

struct __declspec(uuid("28ec7410-0b7b-4bb3-a652-6efecf9cd465"))
IADAssemblyPath : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADOccurrencePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADOccurrencePtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADOccurrencePtr getItemOfNestLevel (
        long itemNestLevel );
    IADOccurrencePtr getFirstOccurrence ( );
    IADOccurrencePtr getLastOccurrence ( );
    IADOccurrencePtr getRootOccurrence ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADOccurrence * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getItemOfNestLevel (
        /*[in]*/ long itemNestLevel,
        /*[out,retval]*/ struct IADOccurrence * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getFirstOccurrence (
        /*[out,retval]*/ struct IADOccurrence * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getLastOccurrence (
        /*[out,retval]*/ struct IADOccurrence * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getRootOccurrence (
        /*[out,retval]*/ struct IADOccurrence * * pRetVal ) = 0;
};

struct __declspec(uuid("c34bfce9-e873-497c-95ef-38c441157296"))
IADAssemblySession : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRootOccurrence))
    IADOccurrencePtr RootOccurrence;
    __declspec(property(get=GetActiveOccurrence,put=PutRefActiveOccurrence))
    IADOccurrencePtr ActiveOccurrence;
    __declspec(property(get=GetAssemblyConstraints))
    IADAssemblyConstraintsPtr AssemblyConstraints;
    __declspec(property(get=GetExplodedViews))
    IADExplodedViewsPtr ExplodedViews;
    __declspec(property(get=GetFeatures))
    IADAssemblyFeaturesPtr Features;

    //
    // Wrapper methods for error-handling
    //

    IADOccurrencePtr GetRootOccurrence ( );
    IADOccurrencePtr GetActiveOccurrence ( );
    void PutRefActiveOccurrence (
        struct IADOccurrence * pRetVal );
    IADAssemblyConstraintsPtr GetAssemblyConstraints ( );
    IADInterferencesPtr CheckInterference (
        VARIANT * occurrencesGroup1,
        VARIANT * occurrencesGroup2 );
    HRESULT ApplyTransformations (
        struct IObjectCollector * pOccurrences,
        struct IObjectCollector * pTransformations,
        VARIANT_BOOL runInOptimizedMode );
    IADExplodedViewsPtr GetExplodedViews ( );
    HRESULT SuppressConstraints (
        struct IObjectCollector * pConstraints );
    HRESULT UnsuppressConstraints (
        struct IObjectCollector * pConstraints );
    VARIANT_BOOL HasInterDesignRelations ( );
    HRESULT ApplyConstrainedTransformations (
        struct IObjectCollector * Occurrences,
        struct IObjectCollector * transformations );
    long GetInclusionCount (
        _bstr_t childSessionID );
    IADAssemblyFeaturesPtr GetFeatures ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RootOccurrence (
        /*[out,retval]*/ struct IADOccurrence * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ActiveOccurrence (
        /*[out,retval]*/ struct IADOccurrence * * pRetVal ) = 0;
      virtual HRESULT __stdcall putref_ActiveOccurrence (
        /*[in]*/ struct IADOccurrence * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AssemblyConstraints (
        /*[out,retval]*/ struct IADAssemblyConstraints * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CheckInterference (
        /*[in]*/ VARIANT * occurrencesGroup1,
        /*[in]*/ VARIANT * occurrencesGroup2,
        /*[out,retval]*/ struct IADInterferences * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyTransformations (
        /*[in]*/ struct IObjectCollector * pOccurrences,
        /*[in]*/ struct IObjectCollector * pTransformations,
        /*[in]*/ VARIANT_BOOL runInOptimizedMode ) = 0;
      virtual HRESULT __stdcall get_ExplodedViews (
        /*[out,retval]*/ struct IADExplodedViews * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SuppressConstraints (
        /*[in]*/ struct IObjectCollector * pConstraints ) = 0;
      virtual HRESULT __stdcall raw_UnsuppressConstraints (
        /*[in]*/ struct IObjectCollector * pConstraints ) = 0;
      virtual HRESULT __stdcall raw_HasInterDesignRelations (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyConstrainedTransformations (
        /*[in]*/ struct IObjectCollector * Occurrences,
        /*[in]*/ struct IObjectCollector * transformations ) = 0;
      virtual HRESULT __stdcall raw_GetInclusionCount (
        /*[in]*/ BSTR childSessionID,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Features (
        /*[out,retval]*/ struct IADAssemblyFeatures * * pRetVal ) = 0;
};

struct __declspec(uuid("f7674e6c-128c-4ce4-b944-faee4875b78c"))
IADBodies : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADBodyPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADPartSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADBodyPtr GetItem (
        long index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADPartSessionPtr GetSession ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IADBody * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
};

struct __declspec(uuid("d0d4354c-f6c5-4d57-b389-ffd07f46adc2"))
IADBody : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetTopologyType))
    enum ADTopologyType TopologyType;
    __declspec(property(get=GetPart))
    IADPartSessionPtr Part;
    __declspec(property(get=GetLumps))
    IADLumpsPtr Lumps;
    __declspec(property(get=GetShells))
    IADShellsPtr Shells;
    __declspec(property(get=GetFaces))
    IADFacesPtr Faces;
    __declspec(property(get=GetEdges))
    IADEdgesPtr Edges;
    __declspec(property(get=GetVertices))
    IADVerticesPtr Vertices;
    __declspec(property(get=GetTimeStamp))
    long TimeStamp;
    __declspec(property(get=GetTopologySummary))
    IADTopologySummaryPtr TopologySummary;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    enum ADTopologyType GetTopologyType ( );
    IADPartSessionPtr GetPart ( );
    IADLumpsPtr GetLumps ( );
    IADShellsPtr GetShells ( );
    IADFacesPtr GetFaces ( );
    IADEdgesPtr GetEdges ( );
    IADVerticesPtr GetVertices ( );
    long GetTimeStamp ( );
    IADTopologySummaryPtr GetTopologySummary ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TopologyType (
        /*[out,retval]*/ enum ADTopologyType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Part (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Lumps (
        /*[out,retval]*/ struct IADLumps * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Shells (
        /*[out,retval]*/ struct IADShells * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ struct IADFaces * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ struct IADEdges * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ struct IADVertices * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeStamp (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TopologySummary (
        /*[out,retval]*/ struct IADTopologySummary * * pRetVal ) = 0;
};

struct __declspec(uuid("28721880-03b0-46e0-b222-8c88cbb65d9c"))
IADBOMColumn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDataAlignment))
    enum ADBOMTextAlignment DataAlignment;
    __declspec(property(get=GetHeaderAlignment))
    enum ADBOMTextAlignment HeaderAlignment;
    __declspec(property(get=GetDataType))
    enum ADBOMDataType DataType;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetSession))
    IADBOMTableSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    enum ADBOMTextAlignment GetDataAlignment ( );
    enum ADBOMTextAlignment GetHeaderAlignment ( );
    enum ADBOMDataType GetDataType ( );
    double GetWidth ( );
    VARIANT_BOOL GetIsVisible ( );
    IADBOMTableSessionPtr GetSession ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataAlignment (
        /*[out,retval]*/ enum ADBOMTextAlignment * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HeaderAlignment (
        /*[out,retval]*/ enum ADBOMTextAlignment * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ enum ADBOMDataType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADBOMTableSession * * pRetVal ) = 0;
};

struct __declspec(uuid("40deeb34-d1ef-4471-837f-dfc991557f6b"))
IADBOMColumns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADBOMColumnPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADBOMColumnPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADBOMColumn * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
};

struct __declspec(uuid("7a5f43a8-4b77-444a-ad34-d911a1561a80"))
IADBOMRow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetItemNumber))
    _bstr_t ItemNumber;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetIsCustomDefined))
    VARIANT_BOOL IsCustomDefined;
    __declspec(property(get=GetSession))
    IADBOMTableSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetItemNumber ( );
    double GetHeight ( );
    _bstr_t Value (
        long pColumnIndex );
    VARIANT_BOOL GetIsVisible ( );
    VARIANT_BOOL GetIsCustomDefined ( );
    IADBOMTableSessionPtr GetSession ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ItemNumber (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Value (
        /*[in]*/ long pColumnIndex,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsCustomDefined (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADBOMTableSession * * pRetVal ) = 0;
};

struct __declspec(uuid("fb125f4e-aed1-47cf-b3da-146de501a428"))
IADBOMRows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADBOMRowPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADBOMRowPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADBOMRow * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
};

struct __declspec(uuid("c95c0286-f202-4406-a359-870007a06f90"))
IADBOMTableSession : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    enum ADBOMTableStyle Style;
    __declspec(property(get=GetColumnCount))
    long ColumnCount;
    __declspec(property(get=GetRowCount))
    long RowCount;
    __declspec(property(get=GetHeaderRowHeight))
    double HeaderRowHeight;
    __declspec(property(get=GetHeaderFont))
    IADDataFontPtr HeaderFont;
    __declspec(property(get=GetHeaderFontColor))
    long HeaderFontColor;
    __declspec(property(get=GetDataFont))
    IADDataFontPtr DataFont;
    __declspec(property(get=GetDataFontColor))
    long DataFontColor;
    __declspec(property(get=GetIsBottomUpDisplay))
    VARIANT_BOOL IsBottomUpDisplay;

    //
    // Wrapper methods for error-handling
    //

    HRESULT ExportSTEP (
        _bstr_t fileName );
    HRESULT ExportBOM (
        _bstr_t fileName,
        VARIANT_BOOL includeHiddenRows );
    enum ADBOMTableStyle GetStyle ( );
    long GetColumnCount ( );
    long GetRowCount ( );
    IADBOMColumnsPtr Columns (
        VARIANT_BOOL onlyVisibleOnes );
    IADBOMRowsPtr Rows (
        VARIANT_BOOL onlyVisibleOnes );
    double GetHeaderRowHeight ( );
    IADDataFontPtr GetHeaderFont ( );
    long GetHeaderFontColor ( );
    IADDataFontPtr GetDataFont ( );
    long GetDataFontColor ( );
    _bstr_t Value (
        long pRowIndex,
        long pColumnIndex );
    VARIANT_BOOL GetIsBottomUpDisplay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ExportSTEP (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_ExportBOM (
        /*[in]*/ BSTR fileName,
        /*[in]*/ VARIANT_BOOL includeHiddenRows ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum ADBOMTableStyle * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ColumnCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RowCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Columns (
        /*[in]*/ VARIANT_BOOL onlyVisibleOnes,
        /*[out,retval]*/ struct IADBOMColumns * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rows (
        /*[in]*/ VARIANT_BOOL onlyVisibleOnes,
        /*[out,retval]*/ struct IADBOMRows * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HeaderRowHeight (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HeaderFont (
        /*[out,retval]*/ struct IADDataFont * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HeaderFontColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataFont (
        /*[out,retval]*/ struct IADDataFont * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DataFontColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Value (
        /*[in]*/ long pRowIndex,
        /*[in]*/ long pColumnIndex,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsBottomUpDisplay (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("2ba59e06-69c9-4d02-a616-0563470506c7"))
IADChamferFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEdgesAndFaces))
    IObjectCollectorPtr EdgesAndFaces;
    __declspec(property(get=GetDistance1))
    IADParameterPtr Distance1;
    __declspec(property(get=GetDistance2))
    IADParameterPtr Distance2;
    __declspec(property(get=GetAngle))
    IADParameterPtr Angle;
    __declspec(property(get=GetTangentPropagate))
    VARIANT_BOOL TangentPropagate;

    //
    // Wrapper methods for error-handling
    //

    IObjectCollectorPtr GetEdgesAndFaces ( );
    IADParameterPtr GetDistance1 ( );
    IADParameterPtr GetDistance2 ( );
    IADParameterPtr GetAngle ( );
    VARIANT_BOOL GetTangentPropagate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EdgesAndFaces (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Distance1 (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Distance2 (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TangentPropagate (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("20f4b817-8b15-4b2c-85b5-02ed227a2a30"))
IADCoedge : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetTopologyType))
    enum ADTopologyType TopologyType;
    __declspec(property(get=GetPart))
    IADPartSessionPtr Part;
    __declspec(property(get=GetBody))
    IADBodyPtr Body;
    __declspec(property(get=GetLoop))
    IADLoopPtr Loop;
    __declspec(property(get=GetEdge))
    IADEdgePtr Edge;
    __declspec(property(get=GetPartnerCoedge))
    IADCoedgePtr PartnerCoedge;
    __declspec(property(get=GetIsSenseReversed))
    VARIANT_BOOL IsSenseReversed;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    enum ADTopologyType GetTopologyType ( );
    IADPartSessionPtr GetPart ( );
    IADBodyPtr GetBody ( );
    IADLoopPtr GetLoop ( );
    IADEdgePtr GetEdge ( );
    IADCoedgePtr GetPartnerCoedge ( );
    VARIANT_BOOL GetIsSenseReversed ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TopologyType (
        /*[out,retval]*/ enum ADTopologyType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Part (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct IADBody * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Loop (
        /*[out,retval]*/ struct IADLoop * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edge (
        /*[out,retval]*/ struct IADEdge * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PartnerCoedge (
        /*[out,retval]*/ struct IADCoedge * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSenseReversed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("87e8ec4b-6e89-4383-8fc8-e05ef3fd9ce9"))
IADCoedges : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADCoedgePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADPartSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADCoedgePtr GetItem (
        long index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADPartSessionPtr GetSession ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IADCoedge * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
};

struct __declspec(uuid("e159e8b5-53f9-4fa5-8d14-c097f27758d4"))
IADComplexSketchFigure : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCompositeFigure))
    IADCompositeFigurePtr CompositeFigure;

    //
    // Wrapper methods for error-handling
    //

    IADCompositeFigurePtr GetCompositeFigure ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CompositeFigure (
        /*[out,retval]*/ struct IADCompositeFigure * * pRetVal ) = 0;
};

struct __declspec(uuid("635d96e7-2593-479a-8fd3-e7a354bb1d98"))
IADCompositeFigure : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADSketchFigurePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetShapePattern))
    IADSketchShapePatternPtr ShapePattern;
    __declspec(property(get=GetSketchFigure))
    IADComplexSketchFigurePtr SketchFigure;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADSketchFigurePtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADSketchShapePatternPtr GetShapePattern ( );
    IADComplexSketchFigurePtr GetSketchFigure ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADSketchFigure * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShapePattern (
        /*[out,retval]*/ struct IADSketchShapePattern * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SketchFigure (
        /*[out,retval]*/ struct IADComplexSketchFigure * * pRetVal ) = 0;
};

struct __declspec(uuid("c261d69b-2f6a-42fc-a48a-0625c3041c8a"))
IADSketchShapePattern : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCompositeFigure))
    IADCompositeFigurePtr CompositeFigure;

    //
    // Wrapper methods for error-handling
    //

    IADCompositeFigurePtr GetCompositeFigure ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CompositeFigure (
        /*[out,retval]*/ struct IADCompositeFigure * * pRetVal ) = 0;
};

struct __declspec(uuid("cb30884c-9c67-4e4b-ab96-67ab54a7a804"))
IADConfiguration : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetLocks,put=PutLocks))
    enum ADConfigurationLockType Locks;
    __declspec(property(get=GetDesignSession))
    IADDesignSessionPtr DesignSession;
    __declspec(property(get=GetID))
    long ID;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    enum ADConfigurationLockType GetLocks ( );
    void PutLocks (
        enum ADConfigurationLockType pRetVal );
    IADDesignSessionPtr GetDesignSession ( );
    long GetID ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Locks (
        /*[out,retval]*/ enum ADConfigurationLockType * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Locks (
        /*[in]*/ enum ADConfigurationLockType pRetVal ) = 0;
      virtual HRESULT __stdcall get_DesignSession (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("b54d57d2-b64b-44e7-9fb2-f458ea22c243"))
IADConfigurations : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADConfigurationPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADConfigurationPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADConfigurationPtr AddConfiguration (
        _bstr_t Name,
        VARIANT_BOOL lockOption );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADConfiguration * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddConfiguration (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL lockOption,
        /*[out,retval]*/ struct IADConfiguration * * pRetVal ) = 0;
};

struct __declspec(uuid("236cd82c-3b01-4a01-a704-46d974255c02"))
IADGlobalParameterSession : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetActiveConfiguration,put=PutRefActiveConfiguration))
    IADConfigurationPtr ActiveConfiguration;
    __declspec(property(get=GetConfigurations))
    IADConfigurationsPtr Configurations;

    //
    // Wrapper methods for error-handling
    //

    IADConfigurationPtr GetActiveConfiguration ( );
    void PutRefActiveConfiguration (
        struct IADConfiguration * pRetVal );
    IADConfigurationsPtr GetConfigurations ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ActiveConfiguration (
        /*[out,retval]*/ struct IADConfiguration * * pRetVal ) = 0;
      virtual HRESULT __stdcall putref_ActiveConfiguration (
        /*[in]*/ struct IADConfiguration * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Configurations (
        /*[out,retval]*/ struct IADConfigurations * * pRetVal ) = 0;
};

struct __declspec(uuid("dfe9f38a-a24e-4194-b23f-146d285f6ee5"))
IADDesignAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADDesignAxisPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADDesignSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADDesignAxisPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADDesignSessionPtr GetSession ( );
    IADDesignAxisPtr CreateBy2Points (
        struct IADOccurrence * pOccurrence1,
        IDispatch * pPoint1,
        struct IADOccurrence * pOccurrence2,
        IDispatch * pPoint2,
        _bstr_t Name );
    IADDesignAxisPtr CreateFromCylindricalFace (
        struct IADOccurrence * pOccurrence,
        struct IADFace * pFace,
        _bstr_t Name );
    IADDesignAxisPtr CreateBy2Planes (
        struct IADOccurrence * pOccurrence1,
        IDispatch * pPlane1,
        struct IADOccurrence * pOccurrence2,
        IDispatch * pPlane2,
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADDesignAxis * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBy2Points (
        /*[in]*/ struct IADOccurrence * pOccurrence1,
        /*[in]*/ IDispatch * pPoint1,
        /*[in]*/ struct IADOccurrence * pOccurrence2,
        /*[in]*/ IDispatch * pPoint2,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDesignAxis * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFromCylindricalFace (
        /*[in]*/ struct IADOccurrence * pOccurrence,
        /*[in]*/ struct IADFace * pFace,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDesignAxis * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBy2Planes (
        /*[in]*/ struct IADOccurrence * pOccurrence1,
        /*[in]*/ IDispatch * pPlane1,
        /*[in]*/ struct IADOccurrence * pOccurrence2,
        /*[in]*/ IDispatch * pPlane2,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDesignAxis * * pRetVal ) = 0;
};

struct __declspec(uuid("b4190f49-05d2-413a-bc68-6864b2437798"))
IADDesignAxis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetAxisType))
    enum ADDesignGeometryType AxisType;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetSession))
    IADDesignSessionPtr Session;
    __declspec(property(get=GetParameters))
    IObjectCollectorPtr Parameters;
    __declspec(property(get=GetSourceObjects))
    IObjectCollectorPtr SourceObjects;
    __declspec(property(get=GetDirection))
    IADVectorPtr Direction;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pRetVal );
    enum ADDesignGeometryType GetAxisType ( );
    IADRootPtr GetRoot ( );
    IADDesignSessionPtr GetSession ( );
    HRESULT GetGeometry (
        struct IADPoint * * ppPoint1,
        struct IADPoint * * ppVector );
    IObjectCollectorPtr GetParameters ( );
    IObjectCollectorPtr GetSourceObjects ( );
    HRESULT Delete ( );
    IADVectorPtr GetDirection ( );
    HRESULT Show ( );
    HRESULT Hide ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_AxisType (
        /*[out,retval]*/ enum ADDesignGeometryType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetGeometry (
        /*[out]*/ struct IADPoint * * ppPoint1,
        /*[out]*/ struct IADPoint * * ppVector ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceObjects (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Show ( ) = 0;
      virtual HRESULT __stdcall raw_Hide ( ) = 0;
};

struct __declspec(uuid("bf3ec6d9-85ca-4ffe-99a8-694c3d1189b5"))
IADDesignMesh : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetSession))
    IADDesignSessionPtr Session;
    __declspec(property(get=GetIsSurfaced))
    VARIANT_BOOL IsSurfaced;
    __declspec(property(get=GetTriangleCount))
    __int64 TriangleCount;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pRetVal );
    IADRootPtr GetRoot ( );
    IADDesignSessionPtr GetSession ( );
    VARIANT_BOOL GetIsSurfaced ( );
    __int64 GetTriangleCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSurfaced (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TriangleCount (
        /*[out,retval]*/ __int64 * pRetVal ) = 0;
};

struct __declspec(uuid("e5f10486-f6bf-4aae-847a-6728b9ae18dd"))
IADDesignMeshes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADDesignMeshPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADDesignSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADDesignMeshPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADDesignSessionPtr GetSession ( );
    IObjectCollectorPtr CreateFromFile (
        _bstr_t fileName,
        _bstr_t meshName,
        enum ADUnits ADUnits );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADDesignMesh * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFromFile (
        /*[in]*/ BSTR fileName,
        /*[in]*/ BSTR meshName,
        /*[in]*/ enum ADUnits ADUnits,
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
};

struct __declspec(uuid("b2435cea-af54-47ac-ae75-4119bbecb4c5"))
IADDesignPlane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPlaneType))
    enum ADDesignGeometryType PlaneType;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetSession))
    IADDesignSessionPtr Session;
    __declspec(property(get=GetNormal))
    IADVectorPtr Normal;
    __declspec(property(get=GetParameters))
    IObjectCollectorPtr Parameters;
    __declspec(property(get=GetSourceObjects))
    IObjectCollectorPtr SourceObjects;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pRetVal );
    enum ADDesignGeometryType GetPlaneType ( );
    IADRootPtr GetRoot ( );
    IADDesignSessionPtr GetSession ( );
    HRESULT GetGeometry (
        struct IADPoint * * ppPoint1,
        struct IADPoint * * ppPoint2,
        struct IADPoint * * ppPoint3 );
    IADVectorPtr GetNormal ( );
    IObjectCollectorPtr GetParameters ( );
    IObjectCollectorPtr GetSourceObjects ( );
    HRESULT Delete ( );
    HRESULT Show ( );
    HRESULT Hide ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_PlaneType (
        /*[out,retval]*/ enum ADDesignGeometryType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetGeometry (
        /*[out]*/ struct IADPoint * * ppPoint1,
        /*[out]*/ struct IADPoint * * ppPoint2,
        /*[out]*/ struct IADPoint * * ppPoint3 ) = 0;
      virtual HRESULT __stdcall get_Normal (
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceObjects (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Show ( ) = 0;
      virtual HRESULT __stdcall raw_Hide ( ) = 0;
};

struct __declspec(uuid("0357e5eb-7e85-4a90-b52f-99948809806e"))
IADDesignPlanes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADDesignPlanePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADDesignSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADDesignPlanePtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADDesignSessionPtr GetSession ( );
    IADDesignPlanePtr CreateBy3Points (
        struct IADOccurrence * pOccurrence1,
        IDispatch * pPnt1,
        struct IADOccurrence * pOccurrence2,
        IDispatch * pPnt2,
        struct IADOccurrence * pOccurrence3,
        IDispatch * pPnt3,
        _bstr_t Name );
    IADDesignPlanePtr CreateAtOffsetToPlane (
        struct IADOccurrence * pOcc,
        IDispatch * pPlaneObject,
        const _variant_t & Offset,
        _bstr_t Name );
    IADDesignPlanePtr CreateAtAngleToPlane (
        struct IADOccurrence * pPlaneOcc,
        IDispatch * pPlane,
        struct IADOccurrence * pAxisOcc,
        IDispatch * pAxis,
        const _variant_t & Angle,
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADDesignPlane * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBy3Points (
        /*[in]*/ struct IADOccurrence * pOccurrence1,
        /*[in]*/ IDispatch * pPnt1,
        /*[in]*/ struct IADOccurrence * pOccurrence2,
        /*[in]*/ IDispatch * pPnt2,
        /*[in]*/ struct IADOccurrence * pOccurrence3,
        /*[in]*/ IDispatch * pPnt3,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDesignPlane * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateAtOffsetToPlane (
        /*[in]*/ struct IADOccurrence * pOcc,
        /*[in]*/ IDispatch * pPlaneObject,
        /*[in]*/ VARIANT Offset,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDesignPlane * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateAtAngleToPlane (
        /*[in]*/ struct IADOccurrence * pPlaneOcc,
        /*[in]*/ IDispatch * pPlane,
        /*[in]*/ struct IADOccurrence * pAxisOcc,
        /*[in]*/ IDispatch * pAxis,
        /*[in]*/ VARIANT Angle,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDesignPlane * * pRetVal ) = 0;
};

struct __declspec(uuid("4930ed59-e3ed-4c13-b5d5-38ddb76a5763"))
IADDesignPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPointType))
    enum ADDesignGeometryType PointType;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetSession))
    IADDesignSessionPtr Session;
    __declspec(property(get=GetGeometry))
    IADPointPtr Geometry;
    __declspec(property(get=GetParameters))
    IObjectCollectorPtr Parameters;
    __declspec(property(get=GetSourceObjects))
    IObjectCollectorPtr SourceObjects;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pRetVal );
    enum ADDesignGeometryType GetPointType ( );
    IADRootPtr GetRoot ( );
    IADDesignSessionPtr GetSession ( );
    IADPointPtr GetGeometry ( );
    IObjectCollectorPtr GetParameters ( );
    IObjectCollectorPtr GetSourceObjects ( );
    HRESULT Delete ( );
    HRESULT Show ( );
    HRESULT Hide ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[out,retval]*/ enum ADDesignGeometryType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Geometry (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceObjects (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Show ( ) = 0;
      virtual HRESULT __stdcall raw_Hide ( ) = 0;
};

struct __declspec(uuid("52daabb5-628c-4fbf-a18a-36f3773fa935"))
IADDesignPoints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADDesignPointPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADDesignSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADDesignPointPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADDesignSessionPtr GetSession ( );
    IADDesignPointPtr CreatePoint (
        double XCoord,
        double YCoord,
        double ZCoord,
        _bstr_t Name );
    IADDesignPointPtr CreatePointFromCircularEdge (
        struct IADOccurrence * pOccurrence,
        struct IADEdge * pEdge,
        _bstr_t Name );
    IADDesignPointPtr CreatePointFromToroidalFace (
        struct IADOccurrence * pOccurrence,
        struct IADFace * pFace,
        _bstr_t Name );
    IADDesignPointPtr CreateAtOffsetToPoint (
        struct IADOccurrence * pOccurrence,
        IDispatch * pPoint,
        const _variant_t & XOffset,
        const _variant_t & YOffset,
        const _variant_t & ZOffset,
        _bstr_t Name );
    IADDesignPointPtr CreateOnEdge (
        struct IADOccurrence * pOccurrence,
        struct IADEdge * pEdge,
        double ratio,
        _bstr_t Name );
    IADDesignPointPtr CreateBetween2Points (
        struct IADOccurrence * pOccurrence1,
        IDispatch * pPoint1,
        struct IADOccurrence * pOccurrence2,
        IDispatch * pPoint2,
        double ratio,
        _bstr_t Name );
    IADDesignPointPtr CreateByProjectingToPlane (
        struct IADOccurrence * pOccurrence1,
        IDispatch * pPoint,
        struct IADOccurrence * pOccurrence2,
        IDispatch * pPlane,
        const _variant_t & XOffset,
        const _variant_t & YOffset,
        _bstr_t Name );
    IADDesignPointPtr CreateBy3Planes (
        struct IADOccurrence * pOccurrence1,
        IDispatch * pPlane1,
        struct IADOccurrence * pOccurrence2,
        IDispatch * pPlane2,
        struct IADOccurrence * pOccurrence3,
        IDispatch * pPlane3,
        _bstr_t Name );
    IADDesignPointPtr CreateBy2Axes (
        struct IADOccurrence * pOccurrence1,
        IDispatch * pAxis1,
        struct IADOccurrence * pOccurrence2,
        IDispatch * pAxis2,
        _bstr_t Name );
    IADDesignPointPtr CreateByAxisAndPlane (
        struct IADOccurrence * pOccurrence1,
        IDispatch * pAxis,
        struct IADOccurrence * pOccurrence2,
        IDispatch * pPlane,
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADDesignPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePoint (
        /*[in]*/ double XCoord,
        /*[in]*/ double YCoord,
        /*[in]*/ double ZCoord,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDesignPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePointFromCircularEdge (
        /*[in]*/ struct IADOccurrence * pOccurrence,
        /*[in]*/ struct IADEdge * pEdge,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDesignPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePointFromToroidalFace (
        /*[in]*/ struct IADOccurrence * pOccurrence,
        /*[in]*/ struct IADFace * pFace,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDesignPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateAtOffsetToPoint (
        /*[in]*/ struct IADOccurrence * pOccurrence,
        /*[in]*/ IDispatch * pPoint,
        /*[in]*/ VARIANT XOffset,
        /*[in]*/ VARIANT YOffset,
        /*[in]*/ VARIANT ZOffset,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDesignPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnEdge (
        /*[in]*/ struct IADOccurrence * pOccurrence,
        /*[in]*/ struct IADEdge * pEdge,
        /*[in]*/ double ratio,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDesignPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBetween2Points (
        /*[in]*/ struct IADOccurrence * pOccurrence1,
        /*[in]*/ IDispatch * pPoint1,
        /*[in]*/ struct IADOccurrence * pOccurrence2,
        /*[in]*/ IDispatch * pPoint2,
        /*[in]*/ double ratio,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDesignPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateByProjectingToPlane (
        /*[in]*/ struct IADOccurrence * pOccurrence1,
        /*[in]*/ IDispatch * pPoint,
        /*[in]*/ struct IADOccurrence * pOccurrence2,
        /*[in]*/ IDispatch * pPlane,
        /*[in]*/ VARIANT XOffset,
        /*[in]*/ VARIANT YOffset,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDesignPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBy3Planes (
        /*[in]*/ struct IADOccurrence * pOccurrence1,
        /*[in]*/ IDispatch * pPlane1,
        /*[in]*/ struct IADOccurrence * pOccurrence2,
        /*[in]*/ IDispatch * pPlane2,
        /*[in]*/ struct IADOccurrence * pOccurrence3,
        /*[in]*/ IDispatch * pPlane3,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDesignPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBy2Axes (
        /*[in]*/ struct IADOccurrence * pOccurrence1,
        /*[in]*/ IDispatch * pAxis1,
        /*[in]*/ struct IADOccurrence * pOccurrence2,
        /*[in]*/ IDispatch * pAxis2,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDesignPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateByAxisAndPlane (
        /*[in]*/ struct IADOccurrence * pOccurrence1,
        /*[in]*/ IDispatch * pAxis,
        /*[in]*/ struct IADOccurrence * pOccurrence2,
        /*[in]*/ IDispatch * pPlane,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDesignPoint * * pRetVal ) = 0;
};

struct __declspec(uuid("591b330b-4af7-4dc5-b7ca-e68e6cbe12e8"))
IADDesignSession : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoBrepImportSummary))
    IADAutoBrepImportSummaryPtr AutoBrepImportSummary;
    __declspec(property(get=GetDesignMeshes))
    IADDesignMeshesPtr DesignMeshes;
    __declspec(property(get=GetSketches))
    IADSketchesPtr Sketches;
    __declspec(property(get=GetDesignProperties))
    IADDesignPropertiesPtr DesignProperties;
    __declspec(property(get=GetHasErrors))
    VARIANT_BOOL HasErrors;
    __declspec(property(get=GetDesignPoints))
    IADDesignPointsPtr DesignPoints;
    __declspec(property(get=GetDesignAxes))
    IADDesignAxesPtr DesignAxes;
    __declspec(property(get=GetDesignPlanes))
    IADDesignPlanesPtr DesignPlanes;
    __declspec(property(get=GetViewTransform))
    IADTransformationPtr ViewTransform;
    __declspec(property(get=GetModelTolerance))
    double ModelTolerance;
    __declspec(property(get=GetActiveConfiguration,put=PutRefActiveConfiguration))
    IADConfigurationPtr ActiveConfiguration;
    __declspec(property(get=GetConfigurations))
    IADConfigurationsPtr Configurations;
    __declspec(property(get=GetSavedViews))
    IADSavedViewsPtr SavedViews;
    __declspec(property(get=GetIsSectioning))
    VARIANT_BOOL IsSectioning;
    __declspec(property(get=GetIGESOptions))
    IADIGESOptionsPtr IGESOptions;
    __declspec(property(get=GetCameraPosition))
    IADPointPtr CameraPosition;
    __declspec(property(get=GetCircularFacets))
    long CircularFacets;
    __declspec(property(get=GetIsPerspective))
    VARIANT_BOOL IsPerspective;
    __declspec(property(get=GetSelectionFilter))
    IADDesignSelectionFilterPtr SelectionFilter;
    __declspec(property(get=GetAutoRegenerate,put=PutAutoRegenerate))
    VARIANT_BOOL AutoRegenerate;

    //
    // Wrapper methods for error-handling
    //

    HRESULT ExportSTEP (
        _bstr_t fileName );
    HRESULT ExportAP203 (
        _bstr_t fileName );
    HRESULT ExportAP214 (
        _bstr_t fileName );
    HRESULT ExportIGES (
        _bstr_t fileName );
    HRESULT ExportSAT (
        _bstr_t fileName,
        long version );
    HRESULT ExportSTL (
        _bstr_t fileName,
        double maxCellSize,
        double normalDeviation,
        double surfaceDeviation );
    HRESULT ExportBOM (
        _bstr_t fileName );
    HRESULT RegenerateDesign (
        VARIANT_BOOL deepRegenerate );
    IADDesignPropertiesPtr GetDesignProperties ( );
    VARIANT_BOOL GetHasErrors ( );
    HRESULT ExportSTL2 (
        _bstr_t fileName );
    HRESULT ExportSAT2 (
        _bstr_t fileName,
        long version,
        VARIANT_BOOL saveColorAttribute );
    IADDesignPointsPtr GetDesignPoints ( );
    IADDesignAxesPtr GetDesignAxes ( );
    IADDesignPlanesPtr GetDesignPlanes ( );
    IADPhysicalPropertiesPtr PhysicalProperties (
        enum ADAccuracySetting accuracy );
    IADTransformationPtr GetViewTransform ( );
    double GetModelTolerance ( );
    IADConfigurationPtr GetActiveConfiguration ( );
    void PutRefActiveConfiguration (
        struct IADConfiguration * pRetVal );
    IADConfigurationsPtr GetConfigurations ( );
    IADSavedViewsPtr GetSavedViews ( );
    HRESULT ViewExtents (
        struct IAD2DPoint * * pUpperLeft,
        struct IAD2DPoint * * pBottomRight );
    VARIANT_BOOL GetIsSectioning ( );
    IADIGESOptionsPtr GetIGESOptions ( );
    IADPointPtr GetCameraPosition ( );
    long GetCircularFacets ( );
    VARIANT_BOOL GetIsPerspective ( );
    IADDesignSelectionFilterPtr GetSelectionFilter ( );
    HRESULT ExportBIP (
        _bstr_t fileName );
    HRESULT ExportBIP_2 (
        _bstr_t fileName,
        _bstr_t optionFilePath );
    VARIANT_BOOL GetAutoRegenerate ( );
    void PutAutoRegenerate (
        VARIANT_BOOL pRetVal );
    HRESULT SetViewTransform (
        struct IADTransformation * transform );
    VARIANT_BOOL CheckPrintability (
        VARIANT_BOOL bCheckStatus );
    VARIANT_BOOL preparePrintabilityChecking ( );
    IADPrintabilityCheckResultsPtr PrintabilityCheckResults ( );
    VARIANT_BOOL postProcessPrintabilityChecking ( );
    IADAutoBrepImportSummaryPtr GetAutoBrepImportSummary ( );
    IADDesignMeshesPtr GetDesignMeshes ( );
    IADSketchesPtr GetSketches ( );
    HRESULT ExportParasolid (
        _bstr_t fileName );
    HRESULT StartChanges ( );
    HRESULT StopChanges ( );
    HRESULT ExportOBJ (
        _bstr_t fileName );
    HRESULT ExportAP242 (
        _bstr_t fileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ExportSTEP (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_ExportAP203 (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_ExportAP214 (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_ExportIGES (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_ExportSAT (
        /*[in]*/ BSTR fileName,
        /*[in]*/ long version ) = 0;
      virtual HRESULT __stdcall raw_ExportSTL (
        /*[in]*/ BSTR fileName,
        /*[in]*/ double maxCellSize,
        /*[in]*/ double normalDeviation,
        /*[in]*/ double surfaceDeviation ) = 0;
      virtual HRESULT __stdcall raw_ExportBOM (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_RegenerateDesign (
        /*[in]*/ VARIANT_BOOL deepRegenerate ) = 0;
      virtual HRESULT __stdcall get_DesignProperties (
        /*[out,retval]*/ struct IADDesignProperties * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasErrors (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExportSTL2 (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_ExportSAT2 (
        /*[in]*/ BSTR fileName,
        /*[in]*/ long version,
        /*[in]*/ VARIANT_BOOL saveColorAttribute ) = 0;
      virtual HRESULT __stdcall get_DesignPoints (
        /*[out,retval]*/ struct IADDesignPoints * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DesignAxes (
        /*[out,retval]*/ struct IADDesignAxes * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DesignPlanes (
        /*[out,retval]*/ struct IADDesignPlanes * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PhysicalProperties (
        /*[in]*/ enum ADAccuracySetting accuracy,
        /*[out,retval]*/ struct IADPhysicalProperties * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ViewTransform (
        /*[out,retval]*/ struct IADTransformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ModelTolerance (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ActiveConfiguration (
        /*[out,retval]*/ struct IADConfiguration * * pRetVal ) = 0;
      virtual HRESULT __stdcall putref_ActiveConfiguration (
        /*[in]*/ struct IADConfiguration * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Configurations (
        /*[out,retval]*/ struct IADConfigurations * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SavedViews (
        /*[out,retval]*/ struct IADSavedViews * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ViewExtents (
        /*[in,out]*/ struct IAD2DPoint * * pUpperLeft,
        /*[in,out]*/ struct IAD2DPoint * * pBottomRight ) = 0;
      virtual HRESULT __stdcall get_IsSectioning (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IGESOptions (
        /*[out,retval]*/ struct IADIGESOptions * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CameraPosition (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CircularFacets (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsPerspective (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SelectionFilter (
        /*[out,retval]*/ struct IADDesignSelectionFilter * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExportBIP (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_ExportBIP_2 (
        /*[in]*/ BSTR fileName,
        /*[in]*/ BSTR optionFilePath ) = 0;
      virtual HRESULT __stdcall get_AutoRegenerate (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_AutoRegenerate (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetViewTransform (
        /*[in]*/ struct IADTransformation * transform ) = 0;
      virtual HRESULT __stdcall raw_CheckPrintability (
        /*[in]*/ VARIANT_BOOL bCheckStatus,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_preparePrintabilityChecking (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PrintabilityCheckResults (
        /*[out,retval]*/ struct IADPrintabilityCheckResults * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_postProcessPrintabilityChecking (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AutoBrepImportSummary (
        /*[out,retval]*/ struct IADAutoBrepImportSummary * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DesignMeshes (
        /*[out,retval]*/ struct IADDesignMeshes * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketches (
        /*[out,retval]*/ struct IADSketches * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ExportParasolid (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_StartChanges ( ) = 0;
      virtual HRESULT __stdcall raw_StopChanges ( ) = 0;
      virtual HRESULT __stdcall raw_ExportOBJ (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_ExportAP242 (
        /*[in]*/ BSTR fileName ) = 0;
};

struct __declspec(uuid("360d4250-1eb7-4784-aaa3-4310624a47c0"))
IADSavedView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDesignSession))
    IADDesignSessionPtr DesignSession;
    __declspec(property(get=GetOrientation))
    IADTransformationPtr Orientation;
    __declspec(property(get=GetCameraPosition))
    IADPointPtr CameraPosition;
    __declspec(property(get=GetTargetPosition))
    IADPointPtr TargetPosition;
    __declspec(property(get=GetNearClippingDistanceFromCamera))
    double NearClippingDistanceFromCamera;
    __declspec(property(get=GetFarClippingDistanceFromCamera))
    double FarClippingDistanceFromCamera;
    __declspec(property(get=GetIsPerspective))
    VARIANT_BOOL IsPerspective;
    __declspec(property(get=GetOrthographicScaleFactor))
    double OrthographicScaleFactor;
    __declspec(property(get=GetFieldOfView))
    double FieldOfView;
    __declspec(property(get=GetUpVector))
    IADPointPtr UpVector;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    IADDesignSessionPtr GetDesignSession ( );
    IADTransformationPtr GetOrientation ( );
    HRESULT GetExtents (
        struct IAD2DPoint * * pUpperLeft,
        struct IAD2DPoint * * pBottomRight );
    IADPointPtr GetCameraPosition ( );
    IADPointPtr GetTargetPosition ( );
    double GetNearClippingDistanceFromCamera ( );
    double GetFarClippingDistanceFromCamera ( );
    VARIANT_BOOL GetIsPerspective ( );
    double GetOrthographicScaleFactor ( );
    double GetFieldOfView ( );
    IADPointPtr GetUpVector ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DesignSession (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ struct IADTransformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetExtents (
        /*[in,out]*/ struct IAD2DPoint * * pUpperLeft,
        /*[in,out]*/ struct IAD2DPoint * * pBottomRight ) = 0;
      virtual HRESULT __stdcall get_CameraPosition (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetPosition (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NearClippingDistanceFromCamera (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FarClippingDistanceFromCamera (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsPerspective (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OrthographicScaleFactor (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FieldOfView (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UpVector (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
};

struct __declspec(uuid("033a1513-0507-45db-ad4c-b652b003215b"))
IADSavedViews : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADSavedViewPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADSavedViewPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADSavedView * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
};

struct __declspec(uuid("709b53a8-baa4-4f0d-8213-8fd1ff85dd92"))
IADDesignSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetSession))
    IADPartSessionPtr Session;
    __declspec(property(get=GetFaces))
    IADFacesPtr Faces;
    __declspec(property(get=GetEdges))
    IADEdgesPtr Edges;
    __declspec(property(get=GetVertices))
    IADVerticesPtr Vertices;
    __declspec(property(get=Gettransform,put=PutReftransform))
    IADTransformationPtr transform;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pRetVal );
    IADRootPtr GetRoot ( );
    IADPartSessionPtr GetSession ( );
    HRESULT Delete ( );
    IADFacesPtr GetFaces ( );
    IADEdgesPtr GetEdges ( );
    IADVerticesPtr GetVertices ( );
    IADTransformationPtr Gettransform ( );
    void PutReftransform (
        struct IADTransformation * pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ struct IADFaces * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ struct IADEdges * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ struct IADVertices * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_transform (
        /*[out,retval]*/ struct IADTransformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall putref_transform (
        /*[in]*/ struct IADTransformation * pRetVal ) = 0;
};

struct __declspec(uuid("0b7191e7-2b8f-4f34-8b9e-4f483db8a8fc"))
IADDesignSurfaces : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADDesignSurfacePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADPartSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADDesignSurfacePtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADPartSessionPtr GetSession ( );
    IObjectCollectorPtr InsertFromFile (
        _bstr_t fileName,
        enum ADFaceProcessingType faceProcessingType,
        VARIANT_BOOL healOption,
        VARIANT_BOOL makeTolerantOption,
        enum ADUnits overridingUnit );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADDesignSurface * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InsertFromFile (
        /*[in]*/ BSTR fileName,
        /*[in]*/ enum ADFaceProcessingType faceProcessingType,
        /*[in]*/ VARIANT_BOOL healOption,
        /*[in]*/ VARIANT_BOOL makeTolerantOption,
        /*[in]*/ enum ADUnits overridingUnit,
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
};

struct __declspec(uuid("fe5c1bbb-3725-422e-9f10-dfbb03d72334"))
IADDimension : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParameter))
    IADParameterPtr Parameter;
    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetDimensionType))
    enum ADDimensionType DimensionType;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetSession))
    IADDesignSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IADParameterPtr GetParameter ( );
    enum ADObjectType GetType ( );
    enum ADDimensionType GetDimensionType ( );
    IADRootPtr GetRoot ( );
    IADDesignSessionPtr GetSession ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parameter (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DimensionType (
        /*[out,retval]*/ enum ADDimensionType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
};

struct __declspec(uuid("035f84bc-46b0-42de-84e7-713b9cd01f24"))
IADDimensions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADDimensionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSketch))
    IADSketchPtr Sketch;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADDimensionPtr GetItem (
        long index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADSketchPtr GetSketch ( );
    IADDimensionPtr PlaceLinearDimension (
        struct IADSketchLine * pSketchLine,
        const _variant_t & dimension );
    IADDimensionPtr PlaceRadialDimension (
        struct IADSketchFigure * pSketchFigure,
        const _variant_t & dimension );
    IADDimensionPtr PlaceDiametricDimension (
        struct IADSketchCircle * pSketchCircle,
        const _variant_t & dimension );
    IADDimensionPtr PlaceLinearDimension_2 (
        struct IADSketchPoint * pStartSketchPoint,
        struct IADSketchPoint * pEndSketchPoint,
        const _variant_t & dimension );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IADDimension * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IADSketch * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PlaceLinearDimension (
        /*[in]*/ struct IADSketchLine * pSketchLine,
        /*[in]*/ VARIANT dimension,
        /*[out,retval]*/ struct IADDimension * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PlaceRadialDimension (
        /*[in]*/ struct IADSketchFigure * pSketchFigure,
        /*[in]*/ VARIANT dimension,
        /*[out,retval]*/ struct IADDimension * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PlaceDiametricDimension (
        /*[in]*/ struct IADSketchCircle * pSketchCircle,
        /*[in]*/ VARIANT dimension,
        /*[out,retval]*/ struct IADDimension * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PlaceLinearDimension_2 (
        /*[in]*/ struct IADSketchPoint * pStartSketchPoint,
        /*[in]*/ struct IADSketchPoint * pEndSketchPoint,
        /*[in]*/ VARIANT dimension,
        /*[out,retval]*/ struct IADDimension * * pRetVal ) = 0;
};

struct __declspec(uuid("e1032973-2d79-4ff9-8865-802671f47fb8"))
IADDraftFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDraftAngleParameter))
    IADParameterPtr DraftAngleParameter;
    __declspec(property(get=GetIsOutwardDraft))
    VARIANT_BOOL IsOutwardDraft;
    __declspec(property(get=GetDraftNeutralPlane))
    IADTargetProxyPtr DraftNeutralPlane;
    __declspec(property(get=GetDraftFaces))
    IObjectCollectorPtr DraftFaces;

    //
    // Wrapper methods for error-handling
    //

    IADParameterPtr GetDraftAngleParameter ( );
    VARIANT_BOOL GetIsOutwardDraft ( );
    IADTargetProxyPtr GetDraftNeutralPlane ( );
    IObjectCollectorPtr GetDraftFaces ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DraftAngleParameter (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsOutwardDraft (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DraftNeutralPlane (
        /*[out,retval]*/ struct IADTargetProxy * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DraftFaces (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
};

struct __declspec(uuid("134ea0f1-f368-4c02-ad49-cd4592d53ae4"))
IADDrawingSession : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectionFilter))
    IADDrawingSelectionFilterPtr SelectionFilter;
    __declspec(property(get=GetSheets))
    IADSheetsPtr Sheets;
    __declspec(property(get=GetProperties))
    IADDrawingPropertiesPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    HRESULT ExportSTEP (
        _bstr_t fileName );
    HRESULT ExportDWG (
        _bstr_t fileName );
    HRESULT ExportDXF (
        _bstr_t fileName );
    HRESULT ExportBOM (
        _bstr_t fileName );
    IADDrawingSelectionFilterPtr GetSelectionFilter ( );
    IADSheetsPtr GetSheets ( );
    IADDrawingPropertiesPtr GetProperties ( );
    HRESULT ReprojectViews (
        struct IObjectCollector * Views,
        enum ADDrawingViewType projectViewMode,
        VARIANT_BOOL retainViewType );
    HRESULT ExportPDF (
        _bstr_t filePath,
        VARIANT_BOOL append );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ExportSTEP (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_ExportDWG (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_ExportDXF (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall raw_ExportBOM (
        /*[in]*/ BSTR fileName ) = 0;
      virtual HRESULT __stdcall get_SelectionFilter (
        /*[out,retval]*/ struct IADDrawingSelectionFilter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sheets (
        /*[out,retval]*/ struct IADSheets * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IADDrawingProperties * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ReprojectViews (
        /*[in]*/ struct IObjectCollector * Views,
        /*[in]*/ enum ADDrawingViewType projectViewMode,
        /*[in]*/ VARIANT_BOOL retainViewType ) = 0;
      virtual HRESULT __stdcall raw_ExportPDF (
        /*[in]*/ BSTR filePath,
        /*[in]*/ VARIANT_BOOL append ) = 0;
};

struct __declspec(uuid("8a4c85c2-0ecf-41eb-87a8-3b112d757cfe"))
IADDrawingView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetSheet))
    IADSheetPtr Sheet;
    __declspec(property(get=GetViewType))
    enum ADDrawingViewType ViewType;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pRetVal );
    IADRootPtr GetRoot ( );
    IADSheetPtr GetSheet ( );
    HRESULT GetExtents (
        struct IAD2DPoint * * pLower,
        struct IAD2DPoint * * pUpper );
    enum ADDrawingViewType GetViewType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sheet (
        /*[out,retval]*/ struct IADSheet * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetExtents (
        /*[out]*/ struct IAD2DPoint * * pLower,
        /*[out]*/ struct IAD2DPoint * * pUpper ) = 0;
      virtual HRESULT __stdcall get_ViewType (
        /*[out,retval]*/ enum ADDrawingViewType * pRetVal ) = 0;
};

struct __declspec(uuid("e92d76b0-7eab-4ea7-812b-f8f8f2b4c11c"))
IADDrawingViews : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADDrawingViewPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADDrawingSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADDrawingViewPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADDrawingSessionPtr GetSession ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADDrawingView * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDrawingSession * * pRetVal ) = 0;
};

struct __declspec(uuid("3cbb1377-a7bb-4f01-8948-59cb0d02046a"))
IADEdge : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetTopologyType))
    enum ADTopologyType TopologyType;
    __declspec(property(get=GetPart))
    IADPartSessionPtr Part;
    __declspec(property(get=GetBody))
    IADBodyPtr Body;
    __declspec(property(get=GetFaces))
    IADFacesPtr Faces;
    __declspec(property(get=GetStartVertex))
    IADVertexPtr StartVertex;
    __declspec(property(get=GetEndVertex))
    IADVertexPtr EndVertex;
    __declspec(property(get=GetKey))
    SAFEARRAY * Key;
    __declspec(property(get=GetGeometry))
    IADCurvePtr Geometry;
    __declspec(property(get=GetIsSenseReversed))
    VARIANT_BOOL IsSenseReversed;
    __declspec(property(get=GetTimeStamp))
    long TimeStamp;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    enum ADTopologyType GetTopologyType ( );
    IADPartSessionPtr GetPart ( );
    IADBodyPtr GetBody ( );
    IADFacesPtr GetFaces ( );
    IADCoedgePtr Coedge (
        struct IADFace * face );
    IADVertexPtr GetStartVertex ( );
    IADVertexPtr GetEndVertex ( );
    SAFEARRAY * GetKey ( );
    IADCurvePtr GetGeometry ( );
    HRESULT GetExtents (
        struct IADPoint * * ppLower,
        struct IADPoint * * ppUpper );
    VARIANT_BOOL GetIsSenseReversed ( );
    long GetTimeStamp ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TopologyType (
        /*[out,retval]*/ enum ADTopologyType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Part (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct IADBody * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ struct IADFaces * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Coedge (
        /*[in]*/ struct IADFace * face,
        /*[out,retval]*/ struct IADCoedge * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartVertex (
        /*[out,retval]*/ struct IADVertex * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndVertex (
        /*[out,retval]*/ struct IADVertex * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Geometry (
        /*[out,retval]*/ struct IADCurve * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetExtents (
        /*[out]*/ struct IADPoint * * ppLower,
        /*[out]*/ struct IADPoint * * ppUpper ) = 0;
      virtual HRESULT __stdcall get_IsSenseReversed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeStamp (
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("5993b2b1-7555-4bd5-951c-9e9d5977717b"))
IADEdges : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADEdgePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADPartSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADEdgePtr GetItem (
        long index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADPartSessionPtr GetSession ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IADEdge * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
};

struct __declspec(uuid("67215708-25cf-484a-b462-8cb7fd341d82"))
IADEventsCallback : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnInitialize ( );
    HRESULT OnTerminate ( );
    HRESULT OnSessionOpen (
        struct IADSession * pSession );
    HRESULT OnSessionClose (
        struct IADSession * pSession );
    HRESULT OnSessionChange (
        struct IADSession * pSession,
        SAFEARRAY * * pModifiedItems,
        SAFEARRAY * * changeType );
    HRESULT OnModelLoadComplete (
        struct IADSession * pSession );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnInitialize ( ) = 0;
      virtual HRESULT __stdcall raw_OnTerminate ( ) = 0;
      virtual HRESULT __stdcall raw_OnSessionOpen (
        /*[in]*/ struct IADSession * pSession ) = 0;
      virtual HRESULT __stdcall raw_OnSessionClose (
        /*[in]*/ struct IADSession * pSession ) = 0;
      virtual HRESULT __stdcall raw_OnSessionChange (
        /*[in]*/ struct IADSession * pSession,
        /*[in]*/ SAFEARRAY * * pModifiedItems,
        /*[in]*/ SAFEARRAY * * changeType ) = 0;
      virtual HRESULT __stdcall raw_OnModelLoadComplete (
        /*[in]*/ struct IADSession * pSession ) = 0;
};

struct __declspec(uuid("9485de5f-6f27-4db0-bcac-22ce8b9f70c7"))
IADExplodedView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSession))
    IADAssemblySessionPtr Session;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetIsCurrent))
    VARIANT_BOOL IsCurrent;
    __declspec(property(get=GetExplodedViewSteps))
    IADExplodedViewStepsPtr ExplodedViewSteps;
    __declspec(property(get=GetIdentifier))
    _bstr_t Identifier;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    IADAssemblySessionPtr GetSession ( );
    IADRootPtr GetRoot ( );
    VARIANT_BOOL GetIsCurrent ( );
    IADExplodedViewStepsPtr GetExplodedViewSteps ( );
    _bstr_t GetIdentifier ( );
    IADTransformationPtr GetTransformForOccurrence (
        struct IADOccurrence * pOccurrence );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADAssemblySession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsCurrent (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExplodedViewSteps (
        /*[out,retval]*/ struct IADExplodedViewSteps * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Identifier (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTransformForOccurrence (
        /*[in]*/ struct IADOccurrence * pOccurrence,
        /*[out,retval]*/ struct IADTransformation * * pRetVal ) = 0;
};

struct __declspec(uuid("f9713e78-2365-4644-95c4-7dd2193b8e0a"))
IADExplodedViews : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADExplodedViewPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetCurrentExplodedView))
    IADExplodedViewPtr CurrentExplodedView;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADExplodedViewPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADExplodedViewPtr GetCurrentExplodedView ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADExplodedView * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentExplodedView (
        /*[out,retval]*/ struct IADExplodedView * * pRetVal ) = 0;
};

struct __declspec(uuid("93b4cac6-7cea-40d6-837c-e434926f28c5"))
IADExplodedViewStep : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetExplodedView))
    IADExplodedViewPtr ExplodedView;
    __declspec(property(get=GetSerialNumber))
    long SerialNumber;
    __declspec(property(get=GetOccurrences))
    IADOccurrencesPtr Occurrences;
    __declspec(property(get=GetDescription))
    _bstr_t Description;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    IADExplodedViewPtr GetExplodedView ( );
    long GetSerialNumber ( );
    IADOccurrencesPtr GetOccurrences ( );
    IObjectCollectorPtr SegmentTransformations (
        struct IADOccurrence * Occurrence );
    long SegmentCount (
        struct IADOccurrence * Occurrence );
    _bstr_t GetDescription ( );
    IADTransformationPtr InitialTransform (
        struct IADOccurrence * pOccurrence );
    _bstr_t SegmentMemberName (
        struct IADOccurrence * Occurrence );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExplodedView (
        /*[out,retval]*/ struct IADExplodedView * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SerialNumber (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Occurrences (
        /*[out,retval]*/ struct IADOccurrences * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SegmentTransformations (
        /*[in]*/ struct IADOccurrence * Occurrence,
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SegmentCount (
        /*[in]*/ struct IADOccurrence * Occurrence,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_InitialTransform (
        /*[in]*/ struct IADOccurrence * pOccurrence,
        /*[out,retval]*/ struct IADTransformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SegmentMemberName (
        /*[in]*/ struct IADOccurrence * Occurrence,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("0896c891-8a11-443f-b4c9-7527c0148942"))
IADExplodedViewSteps : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADExplodedViewStepPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADExplodedViewStepPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADExplodedViewStep * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
};

struct __declspec(uuid("4293c34f-8d37-4dfe-b410-6bde754211b4"))
IADExternalThreadFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMajorDiameter))
    double MajorDiameter;
    __declspec(property(get=GetMinorDiameter))
    IADParameterPtr MinorDiameter;
    __declspec(property(get=GetThreadLength))
    IADParameterPtr ThreadLength;
    __declspec(property(get=GetHasEdgeChamfer))
    VARIANT_BOOL HasEdgeChamfer;
    __declspec(property(get=GetCallout))
    _bstr_t Callout;
    __declspec(property(get=GetCalloutRTF))
    _bstr_t CalloutRTF;

    //
    // Wrapper methods for error-handling
    //

    double GetMajorDiameter ( );
    IADParameterPtr GetMinorDiameter ( );
    IADParameterPtr GetThreadLength ( );
    VARIANT_BOOL GetHasEdgeChamfer ( );
    _bstr_t GetCallout ( );
    _bstr_t GetCalloutRTF ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MajorDiameter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinorDiameter (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ThreadLength (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasEdgeChamfer (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CalloutRTF (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("2db974d2-b951-425e-9210-85da8789a49a"))
IADExtrusionFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsCutout))
    VARIANT_BOOL IsCutout;
    __declspec(property(get=GetSketch))
    IADSketchPtr Sketch;
    __declspec(property(get=GetDepthParameter))
    IADParameterPtr DepthParameter;
    __declspec(property(get=GetDraftParameter))
    IADParameterPtr DraftParameter;
    __declspec(property(get=GetIsOutwardDraft,put=PutIsOutwardDraft))
    VARIANT_BOOL IsOutwardDraft;
    __declspec(property(get=GetEndCondition))
    IADTargetProxyPtr EndCondition;
    __declspec(property(get=GetEndConditionType))
    enum ADPartFeatureEndCondition EndConditionType;
    __declspec(property(get=GetDirection))
    IADTargetProxyPtr Direction;
    __declspec(property(get=GetDirectionVector))
    IADVectorPtr DirectionVector;
    __declspec(property(get=GetIsDirectionReversed))
    VARIANT_BOOL IsDirectionReversed;
    __declspec(property(get=GetDirectionType))
    enum ADDirectionType DirectionType;
    __declspec(property(get=GetToGeometryOffset))
    double ToGeometryOffset;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsCutout ( );
    IADSketchPtr GetSketch ( );
    IADParameterPtr GetDepthParameter ( );
    IADParameterPtr GetDraftParameter ( );
    VARIANT_BOOL GetIsOutwardDraft ( );
    void PutIsOutwardDraft (
        VARIANT_BOOL pRetVal );
    IADTargetProxyPtr GetEndCondition ( );
    enum ADPartFeatureEndCondition GetEndConditionType ( );
    IADTargetProxyPtr GetDirection ( );
    IADVectorPtr GetDirectionVector ( );
    VARIANT_BOOL GetIsDirectionReversed ( );
    enum ADDirectionType GetDirectionType ( );
    double GetToGeometryOffset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsCutout (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IADSketch * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DepthParameter (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DraftParameter (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsOutwardDraft (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsOutwardDraft (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndCondition (
        /*[out,retval]*/ struct IADTargetProxy * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndConditionType (
        /*[out,retval]*/ enum ADPartFeatureEndCondition * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ struct IADTargetProxy * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionVector (
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsDirectionReversed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DirectionType (
        /*[out,retval]*/ enum ADDirectionType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ToGeometryOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("9e8e4df7-4d59-49a5-8a26-4c4b86689176"))
IADFace : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetTopologyType))
    enum ADTopologyType TopologyType;
    __declspec(property(get=GetPart))
    IADPartSessionPtr Part;
    __declspec(property(get=GetBody))
    IADBodyPtr Body;
    __declspec(property(get=GetShell))
    IADShellPtr Shell;
    __declspec(property(get=GetLoops))
    IADLoopsPtr Loops;
    __declspec(property(get=GetEdges))
    IADEdgesPtr Edges;
    __declspec(property(get=GetVertices))
    IADVerticesPtr Vertices;
    __declspec(property(get=GetKey))
    SAFEARRAY * Key;
    __declspec(property(get=GetGeometry))
    IADSurfacePtr Geometry;
    __declspec(property(get=GetIsSenseReversed))
    VARIANT_BOOL IsSenseReversed;
    __declspec(property(get=GetTimeStamp))
    long TimeStamp;
    __declspec(property(get=GetColor))
    long Color;
    __declspec(property(get=GetAppearanceID))
    _bstr_t AppearanceID;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    enum ADTopologyType GetTopologyType ( );
    IADPartSessionPtr GetPart ( );
    IADBodyPtr GetBody ( );
    IADShellPtr GetShell ( );
    IADLoopsPtr GetLoops ( );
    IADEdgesPtr GetEdges ( );
    IADVerticesPtr GetVertices ( );
    SAFEARRAY * GetKey ( );
    IADSurfacePtr GetGeometry ( );
    HRESULT GetExtents (
        struct IADPoint * * ppLower,
        struct IADPoint * * ppUpper );
    VARIANT_BOOL GetIsSenseReversed ( );
    enum ADEntityPointRelation PointOnFace (
        struct IADPoint * pPoint );
    SAFEARRAY * FacetData (
        double surfaceTol );
    long GetTimeStamp ( );
    SAFEARRAY * FacetDataEx (
        double surfaceTol,
        double normalTol,
        double maxEdgeLength );
    HRESULT GetBSplineCurvesData (
        SAFEARRAY * * surfaceOrderUVArray,
        SAFEARRAY * * surfaceInfoArray,
        SAFEARRAY * * surfaceNumControlPointsUV,
        SAFEARRAY * * surfaceNoOfKnotsUV,
        SAFEARRAY * * surfaceControlPoints,
        SAFEARRAY * * surfaceWeights,
        SAFEARRAY * * surfaceKnotVectorU,
        SAFEARRAY * * surfaceKnotVectorV,
        SAFEARRAY * * regionInfoForLoopsArray,
        SAFEARRAY * * noOfTrimmedCurvesForLoopsArray,
        SAFEARRAY * * noOfControlPointsArray,
        SAFEARRAY * * noOfKnotsArray,
        SAFEARRAY * * surfaceIndicesArray,
        SAFEARRAY * * controlPointsArray,
        SAFEARRAY * * knotsArray,
        SAFEARRAY * * weightsArray );
    HRESULT GetMeshData (
        double surfaceTol,
        double normalTol,
        double maxEdgeLength,
        SAFEARRAY * * faceArray,
        SAFEARRAY * * normalArray,
        SAFEARRAY * * vertexArray );
    long GetColor ( );
    long GetColorForConfiguration (
        struct IADConfiguration * pConfiguration );
    _bstr_t GetAppearanceID ( );
    HRESULT GetAlibreMeshData (
        SAFEARRAY * * faceArray,
        SAFEARRAY * * normalArray,
        SAFEARRAY * * vertexArray );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TopologyType (
        /*[out,retval]*/ enum ADTopologyType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Part (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct IADBody * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Shell (
        /*[out,retval]*/ struct IADShell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Loops (
        /*[out,retval]*/ struct IADLoops * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ struct IADEdges * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ struct IADVertices * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Geometry (
        /*[out,retval]*/ struct IADSurface * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetExtents (
        /*[out]*/ struct IADPoint * * ppLower,
        /*[out]*/ struct IADPoint * * ppUpper ) = 0;
      virtual HRESULT __stdcall get_IsSenseReversed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_PointOnFace (
        /*[in]*/ struct IADPoint * pPoint,
        /*[out,retval]*/ enum ADEntityPointRelation * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FacetData (
        /*[in]*/ double surfaceTol,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TimeStamp (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FacetDataEx (
        /*[in]*/ double surfaceTol,
        /*[in]*/ double normalTol,
        /*[in]*/ double maxEdgeLength,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetBSplineCurvesData (
        /*[in,out]*/ SAFEARRAY * * surfaceOrderUVArray,
        /*[in,out]*/ SAFEARRAY * * surfaceInfoArray,
        /*[in,out]*/ SAFEARRAY * * surfaceNumControlPointsUV,
        /*[in,out]*/ SAFEARRAY * * surfaceNoOfKnotsUV,
        /*[in,out]*/ SAFEARRAY * * surfaceControlPoints,
        /*[in,out]*/ SAFEARRAY * * surfaceWeights,
        /*[in,out]*/ SAFEARRAY * * surfaceKnotVectorU,
        /*[in,out]*/ SAFEARRAY * * surfaceKnotVectorV,
        /*[in,out]*/ SAFEARRAY * * regionInfoForLoopsArray,
        /*[in,out]*/ SAFEARRAY * * noOfTrimmedCurvesForLoopsArray,
        /*[in,out]*/ SAFEARRAY * * noOfControlPointsArray,
        /*[in,out]*/ SAFEARRAY * * noOfKnotsArray,
        /*[in,out]*/ SAFEARRAY * * surfaceIndicesArray,
        /*[in,out]*/ SAFEARRAY * * controlPointsArray,
        /*[in,out]*/ SAFEARRAY * * knotsArray,
        /*[in,out]*/ SAFEARRAY * * weightsArray ) = 0;
      virtual HRESULT __stdcall raw_GetMeshData (
        /*[in]*/ double surfaceTol,
        /*[in]*/ double normalTol,
        /*[in]*/ double maxEdgeLength,
        /*[in,out]*/ SAFEARRAY * * faceArray,
        /*[in,out]*/ SAFEARRAY * * normalArray,
        /*[in,out]*/ SAFEARRAY * * vertexArray ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetColorForConfiguration (
        /*[in]*/ struct IADConfiguration * pConfiguration,
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AppearanceID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetAlibreMeshData (
        /*[in,out]*/ SAFEARRAY * * faceArray,
        /*[in,out]*/ SAFEARRAY * * normalArray,
        /*[in,out]*/ SAFEARRAY * * vertexArray ) = 0;
};

struct __declspec(uuid("71012787-a91f-4d00-be8d-f8c0b9958a8c"))
IADFaces : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADFacePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADPartSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADFacePtr GetItem (
        long index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADPartSessionPtr GetSession ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IADFace * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
};

struct __declspec(uuid("42b4cf71-f9e0-4b61-a618-6cbbaf40304d"))
IADFastenerConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOffset))
    IADParameterPtr Offset;
    __declspec(property(get=GetMaximumOffset))
    IADParameterPtr MaximumOffset;
    __declspec(property(get=GetMinimumOffset))
    IADParameterPtr MinimumOffset;

    //
    // Wrapper methods for error-handling
    //

    IADParameterPtr GetOffset ( );
    IADParameterPtr GetMaximumOffset ( );
    IADParameterPtr GetMinimumOffset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumOffset (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumOffset (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
};

struct __declspec(uuid("ff940ad5-4025-4eee-80d1-387dab509cbe"))
IADFilletFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEdgesOrFaces))
    IObjectCollectorPtr EdgesOrFaces;
    __declspec(property(get=GetIsConstantRadius))
    VARIANT_BOOL IsConstantRadius;
    __declspec(property(get=GetConstantRadius))
    IADParameterPtr ConstantRadius;
    __declspec(property(get=GetStartRadiusParams))
    IObjectCollectorPtr StartRadiusParams;
    __declspec(property(get=GetEndRadiusParams))
    IObjectCollectorPtr EndRadiusParams;
    __declspec(property(get=GetTangentPropagate))
    VARIANT_BOOL TangentPropagate;

    //
    // Wrapper methods for error-handling
    //

    IObjectCollectorPtr GetEdgesOrFaces ( );
    VARIANT_BOOL GetIsConstantRadius ( );
    IADParameterPtr GetConstantRadius ( );
    IObjectCollectorPtr GetStartRadiusParams ( );
    IObjectCollectorPtr GetEndRadiusParams ( );
    VARIANT_BOOL GetTangentPropagate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EdgesOrFaces (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsConstantRadius (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConstantRadius (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartRadiusParams (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndRadiusParams (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TangentPropagate (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("e5a7fcf8-e423-499f-b2fd-8ca23068a805"))
IADFolder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReference))
    _bstr_t Reference;
    __declspec(property(get=GetSubFolders))
    IADFoldersPtr SubFolders;
    __declspec(property(get=GetFolderItems))
    IADFolderItemsPtr FolderItems;
    __declspec(property(get=GetParentFolder))
    IADFolderPtr ParentFolder;
    __declspec(property(get=GetRepository))
    IADRepositoryPtr Repository;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    _bstr_t GetReference ( );
    IADFoldersPtr GetSubFolders ( );
    IADFolderItemsPtr GetFolderItems ( );
    IADFolderPtr GetParentFolder ( );
    IADRepositoryPtr GetRepository ( );
    IADRootPtr GetRoot ( );
    VARIANT_BOOL IsRecycleBin ( );
    HRESULT Deposit (
        _bstr_t fileName,
        VARIANT_BOOL checkInFlag );
    IADFolderPtr Copy (
        struct IADFolder * pDestination,
        _bstr_t newName );
    IADFolderPtr Move (
        struct IADFolder * pDestination,
        _bstr_t newName );
    HRESULT Rename (
        _bstr_t folderName );
    HRESULT Delete ( );
    IADFolderPtr CreateSubFolder (
        _bstr_t folderName );
    HRESULT setPermission (
        enum ADSecureObjectType secureObjectType,
        struct IObjectCollector * pUsers,
        struct IObjectCollector * pTeams,
        struct IObjectCollector * pRoles,
        struct IPermissionSelector * pPermissions,
        VARIANT_BOOL applyToAllSubFolders,
        VARIANT_BOOL applyToAllItems,
        VARIANT_BOOL publishingRepository );
    HRESULT setNotification (
        enum ADSecureObjectType secureObjectType,
        struct IObjectCollector * pUsers,
        struct IObjectCollector * pTeams,
        struct IObjectCollector * pRoles,
        struct INotificationSelector * pNotification,
        VARIANT_BOOL applyToAllSubFolders,
        VARIANT_BOOL applyToAllItems );
    HRESULT ClearPermission (
        enum ADSecureObjectType secureObjectType,
        struct IObjectCollector * pUsers,
        struct IObjectCollector * pTeams,
        struct IObjectCollector * pRoles,
        VARIANT_BOOL applyToAllSubFolders,
        VARIANT_BOOL applyToAllItems,
        VARIANT_BOOL unPublishingRepository );
    HRESULT ClearPermissionToAll (
        enum ADSecureObjectType secureObjectType,
        VARIANT_BOOL applyToAllSubFolders,
        VARIANT_BOOL applyToAllItems,
        VARIANT_BOOL unPublishingRepository );
    HRESULT ClearNotification (
        enum ADSecureObjectType secureObjectType,
        struct IObjectCollector * pUsers,
        struct IObjectCollector * pTeams,
        struct IObjectCollector * pRoles,
        VARIANT_BOOL applyToAllSubFolders,
        VARIANT_BOOL applyToAllItems );
    HRESULT ClearNotificationToAll (
        enum ADSecureObjectType secureObjectType,
        VARIANT_BOOL applyToAllSubFolders,
        VARIANT_BOOL applyToAllItems );
    VARIANT_BOOL IsAccessibleToTeam (
        struct IADTeam * pTeam,
        struct IPermissionSelector * * ppPermissions,
        struct INotificationSelector * * ppNotifications );
    VARIANT_BOOL IsAccessibleToUser (
        struct IADUser * pUser,
        struct IPermissionSelector * * ppPermissions,
        struct INotificationSelector * * ppNotifications );
    VARIANT_BOOL IsAccessibleToRole (
        struct IADTeamRole * pRole,
        struct IPermissionSelector * * ppPermissions,
        struct INotificationSelector * * ppNotifications );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Reference (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SubFolders (
        /*[out,retval]*/ struct IADFolders * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FolderItems (
        /*[out,retval]*/ struct IADFolderItems * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ParentFolder (
        /*[out,retval]*/ struct IADFolder * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Repository (
        /*[out,retval]*/ struct IADRepository * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsRecycleBin (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Deposit (
        /*[in]*/ BSTR fileName,
        /*[in]*/ VARIANT_BOOL checkInFlag ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct IADFolder * pDestination,
        /*[in]*/ BSTR newName,
        /*[out,retval]*/ struct IADFolder * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ struct IADFolder * pDestination,
        /*[in]*/ BSTR newName,
        /*[out,retval]*/ struct IADFolder * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR folderName ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_CreateSubFolder (
        /*[in]*/ BSTR folderName,
        /*[out,retval]*/ struct IADFolder * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPermission (
        /*[in]*/ enum ADSecureObjectType secureObjectType,
        /*[in]*/ struct IObjectCollector * pUsers,
        /*[in]*/ struct IObjectCollector * pTeams,
        /*[in]*/ struct IObjectCollector * pRoles,
        /*[in]*/ struct IPermissionSelector * pPermissions,
        /*[in]*/ VARIANT_BOOL applyToAllSubFolders,
        /*[in]*/ VARIANT_BOOL applyToAllItems,
        /*[in]*/ VARIANT_BOOL publishingRepository ) = 0;
      virtual HRESULT __stdcall raw_setNotification (
        /*[in]*/ enum ADSecureObjectType secureObjectType,
        /*[in]*/ struct IObjectCollector * pUsers,
        /*[in]*/ struct IObjectCollector * pTeams,
        /*[in]*/ struct IObjectCollector * pRoles,
        /*[in]*/ struct INotificationSelector * pNotification,
        /*[in]*/ VARIANT_BOOL applyToAllSubFolders,
        /*[in]*/ VARIANT_BOOL applyToAllItems ) = 0;
      virtual HRESULT __stdcall raw_ClearPermission (
        /*[in]*/ enum ADSecureObjectType secureObjectType,
        /*[in]*/ struct IObjectCollector * pUsers,
        /*[in]*/ struct IObjectCollector * pTeams,
        /*[in]*/ struct IObjectCollector * pRoles,
        /*[in]*/ VARIANT_BOOL applyToAllSubFolders,
        /*[in]*/ VARIANT_BOOL applyToAllItems,
        /*[in]*/ VARIANT_BOOL unPublishingRepository ) = 0;
      virtual HRESULT __stdcall raw_ClearPermissionToAll (
        /*[in]*/ enum ADSecureObjectType secureObjectType,
        /*[in]*/ VARIANT_BOOL applyToAllSubFolders,
        /*[in]*/ VARIANT_BOOL applyToAllItems,
        /*[in]*/ VARIANT_BOOL unPublishingRepository ) = 0;
      virtual HRESULT __stdcall raw_ClearNotification (
        /*[in]*/ enum ADSecureObjectType secureObjectType,
        /*[in]*/ struct IObjectCollector * pUsers,
        /*[in]*/ struct IObjectCollector * pTeams,
        /*[in]*/ struct IObjectCollector * pRoles,
        /*[in]*/ VARIANT_BOOL applyToAllSubFolders,
        /*[in]*/ VARIANT_BOOL applyToAllItems ) = 0;
      virtual HRESULT __stdcall raw_ClearNotificationToAll (
        /*[in]*/ enum ADSecureObjectType secureObjectType,
        /*[in]*/ VARIANT_BOOL applyToAllSubFolders,
        /*[in]*/ VARIANT_BOOL applyToAllItems ) = 0;
      virtual HRESULT __stdcall raw_IsAccessibleToTeam (
        /*[in]*/ struct IADTeam * pTeam,
        /*[out]*/ struct IPermissionSelector * * ppPermissions,
        /*[out]*/ struct INotificationSelector * * ppNotifications,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessibleToUser (
        /*[in]*/ struct IADUser * pUser,
        /*[out]*/ struct IPermissionSelector * * ppPermissions,
        /*[out]*/ struct INotificationSelector * * ppNotifications,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessibleToRole (
        /*[in]*/ struct IADTeamRole * pRole,
        /*[out]*/ struct IPermissionSelector * * ppPermissions,
        /*[out]*/ struct INotificationSelector * * ppNotifications,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("0af38d3c-9752-40c8-bdb5-03fa2030a92b"))
IADFolders : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADFolderPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADFolderPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADFolder * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
};

struct __declspec(uuid("38e67368-99d0-4e58-9c99-c7965106441f"))
IADFolderItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetItemType))
    enum ADObjectSubType ItemType;
    __declspec(property(get=GetReference))
    _bstr_t Reference;
    __declspec(property(get=GetParentFolder))
    IADFolderPtr ParentFolder;
    __declspec(property(get=GetRepository))
    IADRepositoryPtr Repository;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetCurrentVersionID))
    long CurrentVersionID;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    enum ADObjectSubType GetItemType ( );
    _bstr_t GetReference ( );
    IADFolderPtr GetParentFolder ( );
    IADRepositoryPtr GetRepository ( );
    IADRootPtr GetRoot ( );
    long GetCurrentVersionID ( );
    HRESULT Withdraw (
        _bstr_t destPath,
        VARIANT_BOOL checkOutFlag );
    HRESULT CheckOut ( );
    HRESULT CheckIn (
        _bstr_t comment );
    VARIANT_BOOL IsCheckedIn ( );
    HRESULT UndoCheckOut ( );
    IADFolderItemPtr Copy (
        struct IADFolder * pDestination,
        _bstr_t newName );
    IADFolderItemPtr Move (
        struct IADFolder * pDestination,
        _bstr_t newName );
    HRESULT Rename (
        _bstr_t newName );
    HRESULT Delete ( );
    IADFolderItemsPtr EnumConstituents ( );
    HRESULT Label (
        _bstr_t Label );
    HRESULT Share (
        struct IADFolder * pDestination,
        _bstr_t newName );
    HRESULT AddNote (
        _bstr_t subject,
        _bstr_t noteDescription );
    IADSessionPtr Open ( );
    HRESULT setPermission (
        struct IObjectCollector * pUsers,
        struct IObjectCollector * pTeams,
        struct IObjectCollector * pRoles,
        struct IPermissionSelector * pPermission,
        VARIANT_BOOL publishingRepository );
    HRESULT setNotification (
        struct IObjectCollector * pUsers,
        struct IObjectCollector * pTeams,
        struct IObjectCollector * pRoles,
        struct INotificationSelector * pNotification );
    HRESULT ClearPermission (
        struct IObjectCollector * pUsers,
        struct IObjectCollector * pTeams,
        struct IObjectCollector * pRoles,
        VARIANT_BOOL unPublishingRepository );
    HRESULT ClearPermissionToAll (
        VARIANT_BOOL unPublishingRepository );
    HRESULT ClearNotification (
        struct IObjectCollector * pUsers,
        struct IObjectCollector * pTeams,
        struct IObjectCollector * pRoles );
    HRESULT ClearNotificationToAll ( );
    VARIANT_BOOL IsAccessibleToTeam (
        struct IADTeam * pTeam,
        struct IPermissionSelector * * ppPermissions,
        struct INotificationSelector * * ppNotifications );
    VARIANT_BOOL IsAccessibleToUser (
        struct IADUser * pUser,
        struct IPermissionSelector * * ppPermissions,
        struct INotificationSelector * * ppNotifications );
    VARIANT_BOOL IsAccessibleToRole (
        struct IADTeamRole * pRole,
        struct IPermissionSelector * * ppPermissions,
        struct INotificationSelector * * ppNotifications );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ItemType (
        /*[out,retval]*/ enum ADObjectSubType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Reference (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ParentFolder (
        /*[out,retval]*/ struct IADFolder * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Repository (
        /*[out,retval]*/ struct IADRepository * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentVersionID (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Withdraw (
        /*[in]*/ BSTR destPath,
        /*[in]*/ VARIANT_BOOL checkOutFlag ) = 0;
      virtual HRESULT __stdcall raw_CheckOut ( ) = 0;
      virtual HRESULT __stdcall raw_CheckIn (
        /*[in]*/ BSTR comment ) = 0;
      virtual HRESULT __stdcall raw_IsCheckedIn (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_UndoCheckOut ( ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct IADFolder * pDestination,
        /*[in]*/ BSTR newName,
        /*[out,retval]*/ struct IADFolderItem * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ struct IADFolder * pDestination,
        /*[in]*/ BSTR newName,
        /*[out,retval]*/ struct IADFolderItem * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR newName ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_EnumConstituents (
        /*[out,retval]*/ struct IADFolderItems * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Label (
        /*[in]*/ BSTR Label ) = 0;
      virtual HRESULT __stdcall raw_Share (
        /*[in]*/ struct IADFolder * pDestination,
        /*[in]*/ BSTR newName ) = 0;
      virtual HRESULT __stdcall raw_AddNote (
        /*[in]*/ BSTR subject,
        /*[in]*/ BSTR noteDescription ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_setPermission (
        /*[in]*/ struct IObjectCollector * pUsers,
        /*[in]*/ struct IObjectCollector * pTeams,
        /*[in]*/ struct IObjectCollector * pRoles,
        /*[in]*/ struct IPermissionSelector * pPermission,
        /*[in]*/ VARIANT_BOOL publishingRepository ) = 0;
      virtual HRESULT __stdcall raw_setNotification (
        /*[in]*/ struct IObjectCollector * pUsers,
        /*[in]*/ struct IObjectCollector * pTeams,
        /*[in]*/ struct IObjectCollector * pRoles,
        /*[in]*/ struct INotificationSelector * pNotification ) = 0;
      virtual HRESULT __stdcall raw_ClearPermission (
        /*[in]*/ struct IObjectCollector * pUsers,
        /*[in]*/ struct IObjectCollector * pTeams,
        /*[in]*/ struct IObjectCollector * pRoles,
        /*[in]*/ VARIANT_BOOL unPublishingRepository ) = 0;
      virtual HRESULT __stdcall raw_ClearPermissionToAll (
        /*[in]*/ VARIANT_BOOL unPublishingRepository ) = 0;
      virtual HRESULT __stdcall raw_ClearNotification (
        /*[in]*/ struct IObjectCollector * pUsers,
        /*[in]*/ struct IObjectCollector * pTeams,
        /*[in]*/ struct IObjectCollector * pRoles ) = 0;
      virtual HRESULT __stdcall raw_ClearNotificationToAll ( ) = 0;
      virtual HRESULT __stdcall raw_IsAccessibleToTeam (
        /*[in]*/ struct IADTeam * pTeam,
        /*[out]*/ struct IPermissionSelector * * ppPermissions,
        /*[out]*/ struct INotificationSelector * * ppNotifications,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessibleToUser (
        /*[in]*/ struct IADUser * pUser,
        /*[out]*/ struct IPermissionSelector * * ppPermissions,
        /*[out]*/ struct INotificationSelector * * ppNotifications,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsAccessibleToRole (
        /*[in]*/ struct IADTeamRole * pRole,
        /*[out]*/ struct IPermissionSelector * * ppPermissions,
        /*[out]*/ struct INotificationSelector * * ppNotifications,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("52d03117-57e8-48bf-8d85-782d0a7d989c"))
IADFolderItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADFolderItemPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADFolderItemPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADFolderItem * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
};

struct __declspec(uuid("c7201542-30cb-4e69-a428-df0ff0f59290"))
IADGearConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRatio1))
    IADParameterPtr Ratio1;
    __declspec(property(get=GetRatio2))
    IADParameterPtr Ratio2;

    //
    // Wrapper methods for error-handling
    //

    IADParameterPtr GetRatio1 ( );
    IADParameterPtr GetRatio2 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Ratio1 (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Ratio2 (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
};

struct __declspec(uuid("b14308c1-72a8-4520-b535-cfd8b04c5d51"))
IADHelicalFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsCutout))
    VARIANT_BOOL IsCutout;
    __declspec(property(get=GetSketch))
    IADSketchPtr Sketch;
    __declspec(property(get=GetAxis))
    IADSketchLinePtr Axis;
    __declspec(property(get=GetIsClockwise))
    VARIANT_BOOL IsClockwise;
    __declspec(property(get=GetIsReverse))
    VARIANT_BOOL IsReverse;
    __declspec(property(get=GetIsParallelOriented))
    VARIANT_BOOL IsParallelOriented;
    __declspec(property(get=GetHeight))
    IADParameterPtr Height;
    __declspec(property(get=GetPitch))
    IADParameterPtr Pitch;
    __declspec(property(get=GetRevolutions))
    IADParameterPtr Revolutions;
    __declspec(property(get=GetPitchRatio))
    IADParameterPtr PitchRatio;
    __declspec(property(get=GetPitchEnd))
    IADParameterPtr PitchEnd;
    __declspec(property(get=GetTaper))
    IADParameterPtr Taper;
    __declspec(property(get=GetStartTransitionAngle))
    IADParameterPtr StartTransitionAngle;
    __declspec(property(get=GetEndTransitionAngle))
    IADParameterPtr EndTransitionAngle;
    __declspec(property(get=GetStartFlatAngle))
    IADParameterPtr StartFlatAngle;
    __declspec(property(get=GetEndFlatAngle))
    IADParameterPtr EndFlatAngle;
    __declspec(property(get=GetHelixType))
    enum ADHelixType HelixType;
    __declspec(property(get=GetPitchType))
    enum ADPitchType PitchType;
    __declspec(property(get=GetStartConditionType))
    enum ADHelixConditionType StartConditionType;
    __declspec(property(get=GetEndConditionType))
    enum ADHelixConditionType EndConditionType;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsCutout ( );
    IADSketchPtr GetSketch ( );
    IADSketchLinePtr GetAxis ( );
    VARIANT_BOOL GetIsClockwise ( );
    VARIANT_BOOL GetIsReverse ( );
    VARIANT_BOOL GetIsParallelOriented ( );
    IADParameterPtr GetHeight ( );
    IADParameterPtr GetPitch ( );
    IADParameterPtr GetRevolutions ( );
    IADParameterPtr GetPitchRatio ( );
    IADParameterPtr GetPitchEnd ( );
    IADParameterPtr GetTaper ( );
    IADParameterPtr GetStartTransitionAngle ( );
    IADParameterPtr GetEndTransitionAngle ( );
    IADParameterPtr GetStartFlatAngle ( );
    IADParameterPtr GetEndFlatAngle ( );
    enum ADHelixType GetHelixType ( );
    enum ADPitchType GetPitchType ( );
    enum ADHelixConditionType GetStartConditionType ( );
    enum ADHelixConditionType GetEndConditionType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsCutout (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IADSketch * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ struct IADSketchLine * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsClockwise (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReverse (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsParallelOriented (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Pitch (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Revolutions (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PitchRatio (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PitchEnd (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Taper (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartTransitionAngle (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndTransitionAngle (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartFlatAngle (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndFlatAngle (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HelixType (
        /*[out,retval]*/ enum ADHelixType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_PitchType (
        /*[out,retval]*/ enum ADPitchType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartConditionType (
        /*[out,retval]*/ enum ADHelixConditionType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndConditionType (
        /*[out,retval]*/ enum ADHelixConditionType * pRetVal ) = 0;
};

struct __declspec(uuid("ecb50b1a-ae2d-4b96-ab8d-7a579dc4ad9a"))
IADHoleFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHoleType))
    enum ADHoleType HoleType;
    __declspec(property(get=GetDepthConditionType))
    enum ADHoleDepthCondition DepthConditionType;
    __declspec(property(get=GetStartPlane))
    IDispatchPtr StartPlane;
    __declspec(property(get=GetNumberOfHoles))
    long NumberOfHoles;
    __declspec(property(get=GetStartPoints))
    SAFEARRAY * StartPoints;
    __declspec(property(get=GetDiameter))
    double Diameter;
    __declspec(property(get=GetDepth))
    double Depth;
    __declspec(property(get=GetCounterBoreDiameter))
    double CounterBoreDiameter;
    __declspec(property(get=GetCounterBoreDepth))
    double CounterBoreDepth;
    __declspec(property(get=GetDrillAngle))
    double DrillAngle;
    __declspec(property(get=GetCounterDrillDiameter))
    double CounterDrillDiameter;
    __declspec(property(get=GetCounterDrillDepth))
    double CounterDrillDepth;
    __declspec(property(get=GetCounterDrillAngle))
    double CounterDrillAngle;
    __declspec(property(get=GetCounterSinkDiameter))
    double CounterSinkDiameter;
    __declspec(property(get=GetCounterSinkAngle))
    double CounterSinkAngle;
    __declspec(property(get=GetMajorDiameter))
    double MajorDiameter;
    __declspec(property(get=GetMinorDiameter))
    double MinorDiameter;
    __declspec(property(get=GetLimitingGeometry))
    IADFacePtr LimitingGeometry;
    __declspec(property(get=GetOffsetFromLimitingGeometry))
    double OffsetFromLimitingGeometry;
    __declspec(property(get=GetHasThread))
    VARIANT_BOOL HasThread;
    __declspec(property(get=GetTappedThread))
    IADTappedThreadInfoPtr TappedThread;
    __declspec(property(get=GetSketch))
    IADSketchPtr Sketch;

    //
    // Wrapper methods for error-handling
    //

    enum ADHoleType GetHoleType ( );
    enum ADHoleDepthCondition GetDepthConditionType ( );
    IDispatchPtr GetStartPlane ( );
    long GetNumberOfHoles ( );
    SAFEARRAY * GetStartPoints ( );
    double GetDiameter ( );
    double GetDepth ( );
    double GetCounterBoreDiameter ( );
    double GetCounterBoreDepth ( );
    double GetDrillAngle ( );
    double GetCounterDrillDiameter ( );
    double GetCounterDrillDepth ( );
    double GetCounterDrillAngle ( );
    double GetCounterSinkDiameter ( );
    double GetCounterSinkAngle ( );
    double GetMajorDiameter ( );
    double GetMinorDiameter ( );
    IADFacePtr GetLimitingGeometry ( );
    double GetOffsetFromLimitingGeometry ( );
    VARIANT_BOOL GetHasThread ( );
    IADTappedThreadInfoPtr GetTappedThread ( );
    IADSketchPtr GetSketch ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HoleType (
        /*[out,retval]*/ enum ADHoleType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DepthConditionType (
        /*[out,retval]*/ enum ADHoleDepthCondition * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartPlane (
        /*[out,retval]*/ IDispatch * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfHoles (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StartPoints (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Diameter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CounterBoreDiameter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CounterBoreDepth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DrillAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CounterDrillDiameter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CounterDrillDepth (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CounterDrillAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CounterSinkDiameter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CounterSinkAngle (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MajorDiameter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinorDiameter (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LimitingGeometry (
        /*[out,retval]*/ struct IADFace * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OffsetFromLimitingGeometry (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall get_HasThread (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TappedThread (
        /*[out,retval]*/ struct IADTappedThreadInfo * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IADSketch * * pRetVal ) = 0;
};

struct __declspec(uuid("cdd15733-d36f-47d2-bf8f-5fd4bf4800ef"))
IADInterference : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPart1))
    IADOccurrencePtr Part1;
    __declspec(property(get=GetPart2))
    IADOccurrencePtr Part2;
    __declspec(property(get=GetInterferenceVolume))
    double InterferenceVolume;

    //
    // Wrapper methods for error-handling
    //

    IADOccurrencePtr GetPart1 ( );
    IADOccurrencePtr GetPart2 ( );
    double GetInterferenceVolume ( );
    HRESULT GetExtents (
        struct IADPoint * * ppLower,
        struct IADPoint * * ppUpper );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Part1 (
        /*[out,retval]*/ struct IADOccurrence * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Part2 (
        /*[out,retval]*/ struct IADOccurrence * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InterferenceVolume (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetExtents (
        /*[out]*/ struct IADPoint * * ppLower,
        /*[out]*/ struct IADPoint * * ppUpper ) = 0;
};

struct __declspec(uuid("509e94da-d4a8-4f41-a444-b210fbe54c31"))
IADInterferences : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADInterferencePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    long GetCount ( );
    IADInterferencePtr GetItem (
        long index );
    DIEnumPtr GetEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IADInterference * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
};

struct __declspec(uuid("a9bcd13d-c427-48a4-841b-98b49088c61b"))
IADMaterialLibraries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADMaterialLibraryPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADMaterialLibraryPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADMaterialLibrary * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
};

struct __declspec(uuid("a33bbd43-0dcb-4fb9-a336-927f4bcad4de"))
IADMaterialLibrary : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFolders))
    IADMaterialLibraryFoldersPtr Folders;
    __declspec(property(get=GetMaterials))
    IADMaterialsPtr Materials;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    IADRootPtr GetRoot ( );
    _bstr_t GetName ( );
    IADMaterialLibraryFoldersPtr GetFolders ( );
    IADMaterialLibraryFolderPtr createFolder (
        _bstr_t folderName );
    IADMaterialPtr createMaterial (
        _bstr_t materialName );
    IADMaterialsPtr GetMaterials ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Folders (
        /*[out,retval]*/ struct IADMaterialLibraryFolders * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_createFolder (
        /*[in]*/ BSTR folderName,
        /*[out,retval]*/ struct IADMaterialLibraryFolder * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_createMaterial (
        /*[in]*/ BSTR materialName,
        /*[out,retval]*/ struct IADMaterial * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Materials (
        /*[out,retval]*/ struct IADMaterials * * pRetVal ) = 0;
};

struct __declspec(uuid("48de661e-6cd8-4855-a5be-00599e7634fd"))
IADMaterialLibraryFolder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetMaterials))
    IADMaterialsPtr Materials;
    __declspec(property(get=GetSubFolders))
    IADMaterialLibraryFoldersPtr SubFolders;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    IADRootPtr GetRoot ( );
    _bstr_t GetName ( );
    IADMaterialsPtr GetMaterials ( );
    IADMaterialLibraryFolderPtr CreateSubFolder (
        _bstr_t folderName );
    IADMaterialPtr createMaterial (
        _bstr_t materialName );
    IADMaterialLibraryFoldersPtr GetSubFolders ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Materials (
        /*[out,retval]*/ struct IADMaterials * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSubFolder (
        /*[in]*/ BSTR folderName,
        /*[out,retval]*/ struct IADMaterialLibraryFolder * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_createMaterial (
        /*[in]*/ BSTR materialName,
        /*[out,retval]*/ struct IADMaterial * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SubFolders (
        /*[out,retval]*/ struct IADMaterialLibraryFolders * * pRetVal ) = 0;
};

struct __declspec(uuid("bc14b812-a78e-441a-ad11-344b747a02a4"))
IADMaterialLibraryFolders : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADMaterialLibraryFolderPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADMaterialLibraryFolderPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADMaterialLibraryFolder * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
};

struct __declspec(uuid("6005509b-2ea0-4ae6-bab2-98b94ee6c69e"))
IADLoop : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetTopologyType))
    enum ADTopologyType TopologyType;
    __declspec(property(get=GetPart))
    IADPartSessionPtr Part;
    __declspec(property(get=GetBody))
    IADBodyPtr Body;
    __declspec(property(get=Getface))
    IADFacePtr face;
    __declspec(property(get=GetEdges))
    IADEdgesPtr Edges;
    __declspec(property(get=GetCoedges))
    IADCoedgesPtr Coedges;
    __declspec(property(get=GetIsOuter))
    VARIANT_BOOL IsOuter;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    enum ADTopologyType GetTopologyType ( );
    IADPartSessionPtr GetPart ( );
    IADBodyPtr GetBody ( );
    IADFacePtr Getface ( );
    IADEdgesPtr GetEdges ( );
    IADCoedgesPtr GetCoedges ( );
    VARIANT_BOOL GetIsOuter ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TopologyType (
        /*[out,retval]*/ enum ADTopologyType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Part (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct IADBody * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_face (
        /*[out,retval]*/ struct IADFace * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ struct IADEdges * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Coedges (
        /*[out,retval]*/ struct IADCoedges * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsOuter (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("0668c416-5187-45d0-a59a-16635bfa280e"))
IADLoops : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADLoopPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADPartSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADLoopPtr GetItem (
        long index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADPartSessionPtr GetSession ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IADLoop * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
};

struct __declspec(uuid("52d91049-1ba5-4243-96df-c13ac01dcbe5"))
IADLump : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetTopologyType))
    enum ADTopologyType TopologyType;
    __declspec(property(get=GetPart))
    IADPartSessionPtr Part;
    __declspec(property(get=GetBody))
    IADBodyPtr Body;
    __declspec(property(get=GetShells))
    IADShellsPtr Shells;
    __declspec(property(get=GetFaces))
    IADFacesPtr Faces;
    __declspec(property(get=GetEdges))
    IADEdgesPtr Edges;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    enum ADTopologyType GetTopologyType ( );
    IADPartSessionPtr GetPart ( );
    IADBodyPtr GetBody ( );
    IADShellsPtr GetShells ( );
    IADFacesPtr GetFaces ( );
    IADEdgesPtr GetEdges ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TopologyType (
        /*[out,retval]*/ enum ADTopologyType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Part (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct IADBody * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Shells (
        /*[out,retval]*/ struct IADShells * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ struct IADFaces * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ struct IADEdges * * pRetVal ) = 0;
};

struct __declspec(uuid("5ba35eb8-63b6-4529-979c-483921b3d006"))
IADLumps : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADLumpPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADPartSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADLumpPtr GetItem (
        long index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADPartSessionPtr GetSession ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IADLump * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
};

struct __declspec(uuid("038f4cb1-f2d1-4e0f-b986-7eda437b138c"))
IADMateConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOffset))
    IADParameterPtr Offset;
    __declspec(property(get=GetMaximumOffset))
    IADParameterPtr MaximumOffset;
    __declspec(property(get=GetMinimumOffset))
    IADParameterPtr MinimumOffset;

    //
    // Wrapper methods for error-handling
    //

    IADParameterPtr GetOffset ( );
    IADParameterPtr GetMaximumOffset ( );
    IADParameterPtr GetMinimumOffset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaximumOffset (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MinimumOffset (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
};

struct __declspec(uuid("8d869325-2ce7-40d7-ac37-f78319b3b19d"))
IADMaterial : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDensity))
    double Density;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    IADRootPtr GetRoot ( );
    _bstr_t GetName ( );
    double GetDensity ( );
    double getMaterialPropertyValue (
        enum ADMaterialPropertyKey materialAPIPropertyKey );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Density (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_getMaterialPropertyValue (
        /*[in]*/ enum ADMaterialPropertyKey materialAPIPropertyKey,
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("bd7228f5-496a-47e1-afa7-d2b8de14c2ae"))
IADMaterials : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADMaterialPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADMaterialPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADMaterial * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
};

struct __declspec(uuid("d4d44f26-50e3-4d92-895c-859f09d20d84"))
IADOccurrence : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetReflectivity,put=PutReflectivity))
    long Reflectivity;
    __declspec(property(get=GetPath))
    IADAssemblyPathPtr Path;
    __declspec(property(get=GetOccurrences))
    IADOccurrencesPtr Occurrences;
    __declspec(property(get=GetParentOccurrence))
    IADOccurrencePtr ParentOccurrence;
    __declspec(property(get=GetNestLevel))
    long NestLevel;
    __declspec(property(get=GetTotalLeafNodes))
    long TotalLeafNodes;
    __declspec(property(get=GetWorldTransform))
    IADTransformationPtr WorldTransform;
    __declspec(property(get=GetLocalTransform))
    IADTransformationPtr LocalTransform;
    __declspec(property(get=GetRootOccurrence))
    IADOccurrencePtr RootOccurrence;
    __declspec(property(get=GetDesignSession))
    IADDesignSessionPtr DesignSession;
    __declspec(property(get=GetIsAnchored,put=PutIsAnchored))
    VARIANT_BOOL IsAnchored;
    __declspec(property(get=GetIsHidden,put=PutIsHidden))
    VARIANT_BOOL IsHidden;
    __declspec(property(get=GetKey))
    SAFEARRAY * Key;
    __declspec(property(get=GetParentAssemblySession))
    IADAssemblySessionPtr ParentAssemblySession;
    __declspec(property(get=GetRootAssemblySession))
    IADAssemblySessionPtr RootAssemblySession;
    __declspec(property(get=GetIsFlexible,put=PutIsFlexible))
    VARIANT_BOOL IsFlexible;
    __declspec(property(get=GetIsSuppressed,put=PutIsSuppressed))
    VARIANT_BOOL IsSuppressed;
    __declspec(property(get=GetConfiguration,put=PutRefConfiguration))
    IADConfigurationPtr Configuration;
    __declspec(property(get=GetSectionBody))
    IADBodyPtr SectionBody;
    __declspec(property(get=GetShowFeatureColor))
    VARIANT_BOOL ShowFeatureColor;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    long GetColor ( );
    void PutColor (
        long pRetVal );
    long GetTransparency ( );
    void PutTransparency (
        long pRetVal );
    long GetReflectivity ( );
    void PutReflectivity (
        long pRetVal );
    IADAssemblyPathPtr GetPath ( );
    IADOccurrencesPtr GetOccurrences ( );
    IADOccurrencePtr GetParentOccurrence ( );
    long GetNestLevel ( );
    long GetTotalLeafNodes ( );
    IADTransformationPtr GetWorldTransform ( );
    IADTransformationPtr GetLocalTransform ( );
    HRESULT ApplyTransform (
        struct IADTransformation * pTransform );
    IADOccurrencePtr GetRootOccurrence ( );
    IADDesignSessionPtr GetDesignSession ( );
    VARIANT_BOOL GetIsAnchored ( );
    void PutIsAnchored (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsHidden ( );
    void PutIsHidden (
        VARIANT_BOOL pRetVal );
    HRESULT GetExtents (
        struct IADPoint * * ppLower,
        struct IADPoint * * ppUpper );
    SAFEARRAY * GetKey ( );
    IADAssemblySessionPtr GetParentAssemblySession ( );
    IADAssemblySessionPtr GetRootAssemblySession ( );
    VARIANT_BOOL GetIsFlexible ( );
    void PutIsFlexible (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsSuppressed ( );
    void PutIsSuppressed (
        VARIANT_BOOL pRetVal );
    IADConfigurationPtr GetConfiguration ( );
    void PutRefConfiguration (
        struct IADConfiguration * pRetVal );
    HRESULT GetMeshDefinitionForSectionView (
        long * faceDataSize,
        long * vertexDataSize );
    HRESULT GetMeshDataForSectionView (
        SAFEARRAY * * faceData,
        SAFEARRAY * * vertexData );
    HRESULT GetMeshDefinitionForSectionViewEx (
        long minCircularFacets,
        long * faceDataSize,
        long * vertexDataSize,
        long * normalDataSize );
    HRESULT GetMeshDataForSectionViewEx (
        SAFEARRAY * * faceData,
        SAFEARRAY * * vertexData,
        SAFEARRAY * * normalData );
    IADBodyPtr GetSectionBody ( );
    VARIANT_BOOL GetShowFeatureColor ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Reflectivity (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Reflectivity (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ struct IADAssemblyPath * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Occurrences (
        /*[out,retval]*/ struct IADOccurrences * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ParentOccurrence (
        /*[out,retval]*/ struct IADOccurrence * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_NestLevel (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TotalLeafNodes (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_WorldTransform (
        /*[out,retval]*/ struct IADTransformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_LocalTransform (
        /*[out,retval]*/ struct IADTransformation * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyTransform (
        /*[in]*/ struct IADTransformation * pTransform ) = 0;
      virtual HRESULT __stdcall get_RootOccurrence (
        /*[out,retval]*/ struct IADOccurrence * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DesignSession (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsAnchored (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsAnchored (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsHidden (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsHidden (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetExtents (
        /*[out]*/ struct IADPoint * * ppLower,
        /*[out]*/ struct IADPoint * * ppUpper ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ParentAssemblySession (
        /*[out,retval]*/ struct IADAssemblySession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RootAssemblySession (
        /*[out,retval]*/ struct IADAssemblySession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsFlexible (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsFlexible (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSuppressed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsSuppressed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Configuration (
        /*[out,retval]*/ struct IADConfiguration * * pRetVal ) = 0;
      virtual HRESULT __stdcall putref_Configuration (
        /*[in]*/ struct IADConfiguration * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMeshDefinitionForSectionView (
        /*[in,out]*/ long * faceDataSize,
        /*[in,out]*/ long * vertexDataSize ) = 0;
      virtual HRESULT __stdcall raw_GetMeshDataForSectionView (
        /*[in,out]*/ SAFEARRAY * * faceData,
        /*[in,out]*/ SAFEARRAY * * vertexData ) = 0;
      virtual HRESULT __stdcall raw_GetMeshDefinitionForSectionViewEx (
        /*[in]*/ long minCircularFacets,
        /*[in,out]*/ long * faceDataSize,
        /*[in,out]*/ long * vertexDataSize,
        /*[in,out]*/ long * normalDataSize ) = 0;
      virtual HRESULT __stdcall raw_GetMeshDataForSectionViewEx (
        /*[in,out]*/ SAFEARRAY * * faceData,
        /*[in,out]*/ SAFEARRAY * * vertexData,
        /*[in,out]*/ SAFEARRAY * * normalData ) = 0;
      virtual HRESULT __stdcall get_SectionBody (
        /*[out,retval]*/ struct IADBody * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowFeatureColor (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("e1f4da56-3383-4827-be0a-8469395ba577"))
IADOccurrences : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADOccurrencePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADOccurrencePtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADOccurrencePtr AddEmptyPart (
        _bstr_t Name,
        VARIANT_BOOL isSheetMetal,
        struct IADTransformation * pTransform );
    IADOccurrencePtr AddEmptyAssembly (
        _bstr_t Name,
        struct IADTransformation * pTransform );
    IADOccurrencePtr Add (
        VARIANT * designObject,
        struct IADTransformation * pTransform );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADOccurrence * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddEmptyPart (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL isSheetMetal,
        /*[in]*/ struct IADTransformation * pTransform,
        /*[out,retval]*/ struct IADOccurrence * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddEmptyAssembly (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IADTransformation * pTransform,
        /*[out,retval]*/ struct IADOccurrence * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT * designObject,
        /*[in]*/ struct IADTransformation * pTransform,
        /*[out,retval]*/ struct IADOccurrence * * pRetVal ) = 0;
};

struct __declspec(uuid("fdd89a8c-9235-4f8f-8ce3-4b3bfdfedb9e"))
IADTargetProxy : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOccurrence))
    IADOccurrencePtr Occurrence;
    __declspec(property(get=GetTarget))
    IDispatchPtr Target;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;

    //
    // Wrapper methods for error-handling
    //

    IADOccurrencePtr GetOccurrence ( );
    IDispatchPtr GetTarget ( );
    _bstr_t GetDisplayName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Occurrence (
        /*[out,retval]*/ struct IADOccurrence * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ IDispatch * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("c85b34ec-e715-4fd9-9e8d-0b4905e698cb"))
IADOffsetFaceFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOffsetFaces))
    IObjectCollectorPtr OffsetFaces;
    __declspec(property(get=GetOffsetParameter))
    IADParameterPtr OffsetParameter;

    //
    // Wrapper methods for error-handling
    //

    IObjectCollectorPtr GetOffsetFaces ( );
    IADParameterPtr GetOffsetParameter ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OffsetFaces (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OffsetParameter (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
};

struct __declspec(uuid("c6427a08-343f-4a13-ae23-b11d97e0a4d3"))
IADParameter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetParameterType))
    enum ADParameterType ParameterType;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetEquation,put=PutEquation))
    _bstr_t Equation;
    __declspec(property(get=GetExternallyDriven,put=PutExternallyDriven))
    VARIANT_BOOL ExternallyDriven;
    __declspec(property(get=GetUnits,put=PutUnits))
    enum ADUnits Units;
    __declspec(property(get=Getcomment,put=Putcomment))
    _bstr_t comment;
    __declspec(property(get=GetSourceDocumentID,put=PutSourceDocumentID))
    _bstr_t SourceDocumentID;
    __declspec(property(get=GetSourceItemID,put=PutSourceItemID))
    _bstr_t SourceItemID;
    __declspec(property(get=GetIsMissingGlobal))
    VARIANT_BOOL IsMissingGlobal;
    __declspec(property(get=GetIsConflictingGlobal))
    VARIANT_BOOL IsConflictingGlobal;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    enum ADParameterType GetParameterType ( );
    IADRootPtr GetRoot ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pRetVal );
    double GetValue ( );
    void PutValue (
        double pRetVal );
    _bstr_t GetEquation ( );
    void PutEquation (
        _bstr_t pRetVal );
    VARIANT_BOOL GetExternallyDriven ( );
    void PutExternallyDriven (
        VARIANT_BOOL pRetVal );
    enum ADUnits GetUnits ( );
    void PutUnits (
        enum ADUnits pRetVal );
    _bstr_t Getcomment ( );
    void Putcomment (
        _bstr_t pRetVal );
    _bstr_t GetSourceDocumentID ( );
    void PutSourceDocumentID (
        _bstr_t pRetVal );
    _bstr_t GetSourceItemID ( );
    void PutSourceItemID (
        _bstr_t pRetVal );
    HRESULT Remove ( );
    VARIANT_BOOL GetIsMissingGlobal ( );
    VARIANT_BOOL GetIsConflictingGlobal ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ParameterType (
        /*[out,retval]*/ enum ADParameterType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pRetVal ) = 0;
      virtual HRESULT __stdcall get_Equation (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Equation (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_ExternallyDriven (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_ExternallyDriven (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ enum ADUnits * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ enum ADUnits pRetVal ) = 0;
      virtual HRESULT __stdcall get_comment (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_comment (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceDocumentID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceDocumentID (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_SourceItemID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_SourceItemID (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove ( ) = 0;
      virtual HRESULT __stdcall get_IsMissingGlobal (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsConflictingGlobal (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("d7d87458-500f-4e0d-ab8c-b496c5ddf5e5"))
IADParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADParameterPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADParameterPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADParameterPtr NewParameter (
        _bstr_t Name,
        enum ADParameterType Type );
    HRESULT OpenParameterTransaction ( );
    HRESULT CloseParameterTransaction ( );
    HRESULT CancelParameterTransaction ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewParameter (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum ADParameterType Type,
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenParameterTransaction ( ) = 0;
      virtual HRESULT __stdcall raw_CloseParameterTransaction ( ) = 0;
      virtual HRESULT __stdcall raw_CancelParameterTransaction ( ) = 0;
};

struct __declspec(uuid("53b955dd-3489-4312-b166-1ff13d21c336"))
IADRackConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPinionRadius))
    IADParameterPtr PinionRadius;

    //
    // Wrapper methods for error-handling
    //

    IADParameterPtr GetPinionRadius ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PinionRadius (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
};

struct __declspec(uuid("a03fe8a6-750d-4c1d-8818-d1eb0c41a657"))
IADScaleFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetscaleAboutCenteroid))
    VARIANT_BOOL scaleAboutCenteroid;
    __declspec(property(get=GetIsUniformScaling))
    VARIANT_BOOL IsUniformScaling;
    __declspec(property(get=GetuniformScaleFactor))
    IADParameterPtr uniformScaleFactor;
    __declspec(property(get=GetUniformScaleFactorX))
    IADParameterPtr UniformScaleFactorX;
    __declspec(property(get=GetUniformScaleFactorY))
    IADParameterPtr UniformScaleFactorY;
    __declspec(property(get=GetUniformScaleFactorZ))
    IADParameterPtr UniformScaleFactorZ;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetscaleAboutCenteroid ( );
    VARIANT_BOOL GetIsUniformScaling ( );
    IADParameterPtr GetuniformScaleFactor ( );
    IADParameterPtr GetUniformScaleFactorX ( );
    IADParameterPtr GetUniformScaleFactorY ( );
    IADParameterPtr GetUniformScaleFactorZ ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_scaleAboutCenteroid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsUniformScaling (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_uniformScaleFactor (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UniformScaleFactorX (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UniformScaleFactorY (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_UniformScaleFactorZ (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
};

struct __declspec(uuid("ee56c2fb-66c3-4240-87aa-ffc19b0cc736"))
IADScrewConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPitch))
    IADParameterPtr Pitch;

    //
    // Wrapper methods for error-handling
    //

    IADParameterPtr GetPitch ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Pitch (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
};

struct __declspec(uuid("0e02476d-4e21-44d1-bb2c-3487ab2ff4ee"))
IADShellFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRemovedFaces))
    IObjectCollectorPtr RemovedFaces;
    __declspec(property(get=GetMultiThicknessFaces))
    IObjectCollectorPtr MultiThicknessFaces;
    __declspec(property(get=GetStandardThickness))
    IADParameterPtr StandardThickness;
    __declspec(property(get=GetmultiThicknesses))
    SAFEARRAY * multiThicknesses;
    __declspec(property(get=GetisShellOutward))
    VARIANT_BOOL isShellOutward;

    //
    // Wrapper methods for error-handling
    //

    IObjectCollectorPtr GetRemovedFaces ( );
    IObjectCollectorPtr GetMultiThicknessFaces ( );
    IADParameterPtr GetStandardThickness ( );
    SAFEARRAY * GetmultiThicknesses ( );
    VARIANT_BOOL GetisShellOutward ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RemovedFaces (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MultiThicknessFaces (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_StandardThickness (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_multiThicknesses (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_isShellOutward (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("82e2103c-06f9-4d4b-a040-5656c111cfc4"))
IADTangentInsideConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOffset))
    IADParameterPtr Offset;

    //
    // Wrapper methods for error-handling
    //

    IADParameterPtr GetOffset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
};

struct __declspec(uuid("8c43dc51-7f39-49f3-a62d-1eecaaeeebd2"))
IADTangentOutsideConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOffset))
    IADParameterPtr Offset;

    //
    // Wrapper methods for error-handling
    //

    IADParameterPtr GetOffset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
};

struct __declspec(uuid("289dec28-bc19-4589-ab45-2e681e8c5ead"))
IADVertexChamferFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVertices))
    IObjectCollectorPtr Vertices;
    __declspec(property(get=GetDistance1))
    IADParameterPtr Distance1;
    __declspec(property(get=GetDistance2))
    IADParameterPtr Distance2;
    __declspec(property(get=GetDistance3))
    IADParameterPtr Distance3;

    //
    // Wrapper methods for error-handling
    //

    IObjectCollectorPtr GetVertices ( );
    IADParameterPtr GetDistance1 ( );
    IADParameterPtr GetDistance2 ( );
    IADParameterPtr GetDistance3 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Distance1 (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Distance2 (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Distance3 (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
};

struct __declspec(uuid("b345b5a4-98da-4c15-b9b8-d3bb53854ad7"))
IADPartFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetSession))
    IADSessionPtr Session;
    __declspec(property(get=GetFeatureType))
    enum ADPartFeatureType FeatureType;
    __declspec(property(get=GetIsSuppressed,put=PutIsSuppressed))
    VARIANT_BOOL IsSuppressed;
    __declspec(property(get=GetHasError))
    VARIANT_BOOL HasError;
    __declspec(property(get=GetIsSheetMetalFeature))
    VARIANT_BOOL IsSheetMetalFeature;
    __declspec(property(get=GetFaces))
    IADFacesPtr Faces;
    __declspec(property(get=GetIsActive,put=PutIsActive))
    VARIANT_BOOL IsActive;
    __declspec(property(get=GetFaceColor,put=PutFaceColor))
    long FaceColor;
    __declspec(property(get=GetEdgeColor,put=PutEdgeColor))
    long EdgeColor;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    long Opacity;
    __declspec(property(get=GetReflectivity,put=PutReflectivity))
    long Reflectivity;
    __declspec(property(get=GetUsePartColor,put=PutUsePartColor))
    VARIANT_BOOL UsePartColor;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pRetVal );
    IADRootPtr GetRoot ( );
    IADSessionPtr GetSession ( );
    enum ADPartFeatureType GetFeatureType ( );
    VARIANT_BOOL GetIsSuppressed ( );
    void PutIsSuppressed (
        VARIANT_BOOL pRetVal );
    HRESULT Delete ( );
    VARIANT_BOOL GetHasError ( );
    HRESULT GetExtents (
        struct IADPoint * * ppLower,
        struct IADPoint * * ppUpper );
    VARIANT_BOOL GetIsSheetMetalFeature ( );
    IADFacesPtr GetFaces ( );
    VARIANT_BOOL GetIsActive ( );
    void PutIsActive (
        VARIANT_BOOL pRetVal );
    long GetFaceColor ( );
    void PutFaceColor (
        long pRetVal );
    long GetEdgeColor ( );
    void PutEdgeColor (
        long pRetVal );
    long GetOpacity ( );
    void PutOpacity (
        long pRetVal );
    long GetReflectivity ( );
    void PutReflectivity (
        long pRetVal );
    VARIANT_BOOL GetUsePartColor ( );
    void PutUsePartColor (
        VARIANT_BOOL pRetVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FeatureType (
        /*[out,retval]*/ enum ADPartFeatureType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSuppressed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsSuppressed (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_HasError (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetExtents (
        /*[out]*/ struct IADPoint * * ppLower,
        /*[out]*/ struct IADPoint * * ppUpper ) = 0;
      virtual HRESULT __stdcall get_IsSheetMetalFeature (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ struct IADFaces * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsActive (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsActive (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_FaceColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_FaceColor (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_EdgeColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EdgeColor (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Opacity (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Opacity (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Reflectivity (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Reflectivity (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_UsePartColor (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_UsePartColor (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
};

struct __declspec(uuid("d8f13f3a-2ee3-4856-92a5-6834cca559f1"))
IADPartFeatures : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADPartFeaturePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADPartSessionPtr Session;
    __declspec(property(get=GetCurrentFeature,put=PutRefCurrentFeature))
    IADPartFeaturePtr CurrentFeature;
    __declspec(property(get=GetCurrentState,put=PutRefCurrentState))
    IADPartFeaturePtr CurrentState;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADPartFeaturePtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADPartSessionPtr GetSession ( );
    IADPartFeaturePtr GetCurrentFeature ( );
    void PutRefCurrentFeature (
        struct IADPartFeature * pRetVal );
    IADExtrusionFeaturePtr AddExtrudedBoss (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        enum ADPartFeatureEndCondition EndCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        enum ADDirectionType Direction,
        struct IADOccurrence * pDirectionOcc,
        IDispatch * pDirectionObject,
        VARIANT_BOOL IsDirectionReversed,
        const _variant_t & draftAngle,
        VARIANT_BOOL IsOutwardDraft,
        _bstr_t Name,
        _bstr_t depthParameterName,
        _bstr_t angleParameterName );
    IADExtrusionFeaturePtr AddExtrudedCutout (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        enum ADPartFeatureEndCondition EndCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        enum ADDirectionType Direction,
        struct IADOccurrence * pDirectionOcc,
        IDispatch * pDirectionObject,
        VARIANT_BOOL IsDirectionReversed,
        const _variant_t & draftAngle,
        VARIANT_BOOL IsOutwardDraft,
        _bstr_t Name,
        _bstr_t depthParameterName,
        _bstr_t angleParameterName );
    IADRevolutionFeaturePtr AddRevolvedBoss (
        struct IADSketch * pSketch,
        struct IADOccurrence * axisOcc,
        IDispatch * axisObject,
        const _variant_t & revolveAngle,
        _bstr_t Name );
    IADRevolutionFeaturePtr AddRevolvedCutout (
        struct IADSketch * pSketch,
        struct IADOccurrence * axisOcc,
        IDispatch * axisObject,
        const _variant_t & revolveAngle,
        _bstr_t Name );
    IADSweepFeaturePtr AddSweptBoss (
        struct IADSketch * pProfileSketch,
        struct IObjectCollector * pPathSketch,
        VARIANT_BOOL IsRigid,
        enum ADPartFeatureEndCondition EndCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        const _variant_t & draftAngle,
        VARIANT_BOOL IsOutwardDraft,
        _bstr_t Name );
    IADSweepFeaturePtr AddSweptCutout (
        struct IADSketch * pProfileSketch,
        struct IObjectCollector * pPathSketch,
        VARIANT_BOOL IsRigid,
        enum ADPartFeatureEndCondition EndCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        const _variant_t & draftAngle,
        VARIANT_BOOL IsOutwardDraft,
        _bstr_t Name );
    IADPartFeaturePtr GetCurrentState ( );
    void PutRefCurrentState (
        struct IADPartFeature * pRetVal );
    IADChamferFeaturePtr AddEdgeChamferFeature (
        struct IObjectCollector * colEdgesAndFaces,
        enum ADEdgeChamferType chamferType,
        const _variant_t & chamferDistance1,
        const _variant_t & chamferDistance2,
        const _variant_t & chamferAngle,
        VARIANT_BOOL TangentPropagate,
        _bstr_t dist1ParameterName,
        _bstr_t dist2ParameterName,
        _bstr_t chamferAngleParameterName,
        _bstr_t Name );
    IADVertexChamferFeaturePtr AddVertexChamferFeature (
        struct IObjectCollector * colVertices,
        const _variant_t & Distance1,
        const _variant_t & Distance2,
        const _variant_t & Distance3,
        _bstr_t dist1ParameterName,
        _bstr_t dist2ParameterName,
        _bstr_t dist3ParameterName,
        _bstr_t Name );
    IADFilletFeaturePtr AddConstantRadiusFilletFeature (
        struct IObjectCollector * colEdgesAndFaces,
        const _variant_t & vConstantRadius,
        VARIANT_BOOL bTangentPropagate,
        _bstr_t strConstRadParameterName,
        _bstr_t Name );
    IADFilletFeaturePtr AddVariableRadiusFilletFeature (
        struct IObjectCollector * colEdgesAndFaces,
        SAFEARRAY * * pStartRadiui,
        SAFEARRAY * * pEndRadiui,
        VARIANT_BOOL bTangentPropagate,
        _bstr_t Name );
    IADOffsetFaceFeaturePtr AddOffsetFaceFeature (
        struct IObjectCollector * pFaces,
        const _variant_t & vOffset,
        _bstr_t Name,
        _bstr_t strOffsetParameterName );
    IADScaleFeaturePtr AddScaleFeature (
        VARIANT_BOOL scaleAboutCenteroid,
        VARIANT_BOOL uniformScaling,
        const _variant_t & uniformScaleFactor,
        const _variant_t & scaleFactorX,
        const _variant_t & scaleFactorY,
        const _variant_t & scaleFactorZ,
        _bstr_t uniformScaleParamName,
        _bstr_t scaleFactorXParameterName,
        _bstr_t scaleFactorYParameterName,
        _bstr_t scaleFactorZParameterName,
        _bstr_t Name );
    IADDraftFeaturePtr AddDraftFeature (
        struct IObjectCollector * DraftFaces,
        struct IADOccurrence * toDraftPlaneOcc,
        IDispatch * DraftNeutralPlane,
        const _variant_t & draftAngle,
        VARIANT_BOOL IsOutwardDraft,
        _bstr_t angleParameterName,
        _bstr_t Name );
    IADShellFeaturePtr AddShellFeature (
        struct IObjectCollector * colFacesToRemove,
        const _variant_t & vStandardThickness,
        VARIANT_BOOL isShellOutward,
        struct IObjectCollector * colMultiThickFaces,
        SAFEARRAY * * multiThicknesses,
        _bstr_t thicknessParameterName,
        _bstr_t Name );
    IADHoleFeaturePtr AddSimpleHole (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & Diameter,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName );
    IADHoleFeaturePtr AddDrilledHole (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & Diameter,
        const _variant_t & DrillAngle,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName );
    IADHoleFeaturePtr AddTaperedHole (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & MajorDiameter,
        const _variant_t & MinorDiameter,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName );
    IADHoleFeaturePtr AddTaperedDrilledHole (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & MajorDiameter,
        const _variant_t & MinorDiameter,
        const _variant_t & DrillAngle,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName );
    IADHoleFeaturePtr AddCounterSunkHole (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & Diameter,
        const _variant_t & CounterSinkDiameter,
        const _variant_t & CounterSinkAngle,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName );
    IADHoleFeaturePtr AddCounterSunkDrilledHole (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & Diameter,
        const _variant_t & DrillAngle,
        const _variant_t & CounterSinkDiameter,
        const _variant_t & CounterSinkAngle,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName );
    IADHoleFeaturePtr AddCounterBoredHole (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & Diameter,
        const _variant_t & CounterBoreDepth,
        const _variant_t & CounterBoreDiameter,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName );
    IADHoleFeaturePtr AddCounterBoredDrilledHole (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & Diameter,
        const _variant_t & DrillAngle,
        const _variant_t & CounterBoreDepth,
        const _variant_t & CounterBoreDiameter,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName );
    IADHoleFeaturePtr AddCounterDrilledHole (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & Diameter,
        const _variant_t & CounterDrillDepth,
        const _variant_t & CounterDrillDiameter,
        const _variant_t & CounterDrillAngle,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName );
    IADHoleFeaturePtr AddCounterDrilledDrilledHole (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & Diameter,
        const _variant_t & DrillAngle,
        const _variant_t & CounterDrillDepth,
        const _variant_t & CounterDrillDiameter,
        const _variant_t & CounterDrillAngle,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName );
    IADTappedThreadInfoPtr CreateTappedThreadInfo (
        enum ADTappedThreadType threadType,
        _bstr_t Name,
        _bstr_t threadClass,
        double Pitch,
        double tapDrillDiameter,
        double MajorDiameter,
        double MinorDiameter,
        double pitchDiameter,
        double ThreadLength );
    IADMeshBooleanFeaturePtr AddMeshBooleanFeature (
        struct IADDesignMesh * designMesh,
        struct IADOccurrence * designMeshOcc,
        enum ADBooleanOperator ADBooleanOperator,
        _bstr_t Name );
    IADLoftFeaturePtr AddLoftBoss (
        struct IObjectCollector * CrossSections,
        struct IObjectCollector * Tangents,
        struct IObjectCollector * TangentMagnitudes,
        struct IObjectCollector * TangentAngles,
        struct IObjectCollector * GuideCurves,
        enum ADLoftGuideType GuideCurveType,
        VARIANT_BOOL MinimizeTwist,
        VARIANT_BOOL MinimizeCurvature,
        VARIANT_BOOL SimplifySurface,
        VARIANT_BOOL ConnectEnds,
        _bstr_t Name );
    IADLoftFeaturePtr AddLoftCut (
        struct IObjectCollector * CrossSections,
        struct IObjectCollector * Tangents,
        struct IObjectCollector * TangentMagnitudes,
        struct IObjectCollector * TangentAngles,
        struct IObjectCollector * GuideCurves,
        enum ADLoftGuideType GuideCurveType,
        VARIANT_BOOL MinimizeTwist,
        VARIANT_BOOL MinimizeCurvature,
        VARIANT_BOOL SimplifySurface,
        VARIANT_BOOL ConnectEnds,
        _bstr_t Name );
    IADHoleFeaturePtr AddSimpleHoleEx (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & Diameter,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName,
        _bstr_t diameterParameterName );
    IADHoleFeaturePtr AddDrilledHoleEx (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & Diameter,
        const _variant_t & DrillAngle,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName,
        _bstr_t diameterParameterName,
        _bstr_t drillAngleParameterName );
    IADHoleFeaturePtr AddTaperedHoleEx (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & MajorDiameter,
        const _variant_t & MinorDiameter,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName,
        _bstr_t majorDiameterParameterName,
        _bstr_t minorDiameterParameterName );
    IADHoleFeaturePtr AddTaperedDrilledHoleEx (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & MajorDiameter,
        const _variant_t & MinorDiameter,
        const _variant_t & DrillAngle,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName,
        _bstr_t majorDiameterParameterName,
        _bstr_t minorDiameterParameterName,
        _bstr_t drillAngleParameterName );
    IADHoleFeaturePtr AddCounterSunkHoleEx (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & Diameter,
        const _variant_t & CounterSinkDiameter,
        const _variant_t & CounterSinkAngle,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName,
        _bstr_t diameterParameterName,
        _bstr_t counterSinkDiameterParameterName,
        _bstr_t counterSinkAngleParameterName );
    IADHoleFeaturePtr AddCounterSunkDrilledHoleEx (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & Diameter,
        const _variant_t & DrillAngle,
        const _variant_t & CounterSinkDiameter,
        const _variant_t & CounterSinkAngle,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName,
        _bstr_t diameterParameterName,
        _bstr_t drillAngleParameterName,
        _bstr_t counterSinkDiameterParameterName,
        _bstr_t counterSinkAngleParameterName );
    IADHoleFeaturePtr AddCounterBoredHoleEx (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & Diameter,
        const _variant_t & CounterBoreDepth,
        const _variant_t & CounterBoreDiameter,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName,
        _bstr_t diameterParameterName,
        _bstr_t counterBoreDepthParameterName,
        _bstr_t counterBoreDiameterParameterName );
    IADHoleFeaturePtr AddCounterBoredDrilledHoleEx (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & Diameter,
        const _variant_t & DrillAngle,
        const _variant_t & CounterBoreDepth,
        const _variant_t & CounterBoreDiameter,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName,
        _bstr_t diameterParameterName,
        _bstr_t drillAngleParameterName,
        _bstr_t counterBoreDepthParameterName,
        _bstr_t counterBoreDiameterParameterName );
    IADHoleFeaturePtr AddCounterDrilledHoleEx (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & Diameter,
        const _variant_t & CounterDrillDepth,
        const _variant_t & CounterDrillDiameter,
        const _variant_t & CounterDrillAngle,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName,
        _bstr_t diameterParameterName,
        _bstr_t counterDrillDepthParameterName,
        _bstr_t counterDrillDiameterParameterName,
        _bstr_t counterDrillAngleParameterName );
    IADHoleFeaturePtr AddCounterDrilledDrilledHoleEx (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        const _variant_t & Diameter,
        const _variant_t & DrillAngle,
        const _variant_t & CounterDrillDepth,
        const _variant_t & CounterDrillDiameter,
        const _variant_t & CounterDrillAngle,
        VARIANT_BOOL isReversed,
        struct IADTappedThreadInfo * TappedThread,
        enum ADHoleDepthCondition depthCondition,
        struct IADOccurrence * toGeometryOcc,
        IDispatch * toGeometryObject,
        double ToGeometryOffset,
        _bstr_t Name,
        _bstr_t depthParameterName,
        _bstr_t diameterParameterName,
        _bstr_t drillAngleParameterName,
        _bstr_t counterDrillDepthParameterName,
        _bstr_t counterDrillDiameterParameterName,
        _bstr_t counterDrillAngleParameterName );
    IADWrapFeaturePtr AddWrap (
        struct IADSketch * pSketch,
        IDispatch * targetFaceObject,
        const _variant_t & Depth,
        enum ADWrapFocusType FocusType,
        enum ADBooleanOperator BooleanOperator,
        _bstr_t Name );
    IADProjectFeaturePtr AddProject (
        struct IADSketch * pSketch,
        const _variant_t & Depth,
        enum ADBooleanOperator BooleanOperator,
        VARIANT_BOOL IsIntoSketchPlane,
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADPartFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentFeature (
        /*[out,retval]*/ struct IADPartFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall putref_CurrentFeature (
        /*[in]*/ struct IADPartFeature * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddExtrudedBoss (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ enum ADPartFeatureEndCondition EndCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ enum ADDirectionType Direction,
        /*[in]*/ struct IADOccurrence * pDirectionOcc,
        /*[in]*/ IDispatch * pDirectionObject,
        /*[in]*/ VARIANT_BOOL IsDirectionReversed,
        /*[in]*/ VARIANT draftAngle,
        /*[in]*/ VARIANT_BOOL IsOutwardDraft,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[in]*/ BSTR angleParameterName,
        /*[out,retval]*/ struct IADExtrusionFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddExtrudedCutout (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ enum ADPartFeatureEndCondition EndCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ enum ADDirectionType Direction,
        /*[in]*/ struct IADOccurrence * pDirectionOcc,
        /*[in]*/ IDispatch * pDirectionObject,
        /*[in]*/ VARIANT_BOOL IsDirectionReversed,
        /*[in]*/ VARIANT draftAngle,
        /*[in]*/ VARIANT_BOOL IsOutwardDraft,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[in]*/ BSTR angleParameterName,
        /*[out,retval]*/ struct IADExtrusionFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddRevolvedBoss (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ struct IADOccurrence * axisOcc,
        /*[in]*/ IDispatch * axisObject,
        /*[in]*/ VARIANT revolveAngle,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADRevolutionFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddRevolvedCutout (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ struct IADOccurrence * axisOcc,
        /*[in]*/ IDispatch * axisObject,
        /*[in]*/ VARIANT revolveAngle,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADRevolutionFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddSweptBoss (
        /*[in]*/ struct IADSketch * pProfileSketch,
        /*[in]*/ struct IObjectCollector * pPathSketch,
        /*[in]*/ VARIANT_BOOL IsRigid,
        /*[in]*/ enum ADPartFeatureEndCondition EndCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ VARIANT draftAngle,
        /*[in]*/ VARIANT_BOOL IsOutwardDraft,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADSweepFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddSweptCutout (
        /*[in]*/ struct IADSketch * pProfileSketch,
        /*[in]*/ struct IObjectCollector * pPathSketch,
        /*[in]*/ VARIANT_BOOL IsRigid,
        /*[in]*/ enum ADPartFeatureEndCondition EndCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ VARIANT draftAngle,
        /*[in]*/ VARIANT_BOOL IsOutwardDraft,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADSweepFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_CurrentState (
        /*[out,retval]*/ struct IADPartFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall putref_CurrentState (
        /*[in]*/ struct IADPartFeature * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddEdgeChamferFeature (
        /*[in]*/ struct IObjectCollector * colEdgesAndFaces,
        /*[in]*/ enum ADEdgeChamferType chamferType,
        /*[in]*/ VARIANT chamferDistance1,
        /*[in]*/ VARIANT chamferDistance2,
        /*[in]*/ VARIANT chamferAngle,
        /*[in]*/ VARIANT_BOOL TangentPropagate,
        /*[in]*/ BSTR dist1ParameterName,
        /*[in]*/ BSTR dist2ParameterName,
        /*[in]*/ BSTR chamferAngleParameterName,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADChamferFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddVertexChamferFeature (
        /*[in]*/ struct IObjectCollector * colVertices,
        /*[in]*/ VARIANT Distance1,
        /*[in]*/ VARIANT Distance2,
        /*[in]*/ VARIANT Distance3,
        /*[in]*/ BSTR dist1ParameterName,
        /*[in]*/ BSTR dist2ParameterName,
        /*[in]*/ BSTR dist3ParameterName,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADVertexChamferFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddConstantRadiusFilletFeature (
        /*[in]*/ struct IObjectCollector * colEdgesAndFaces,
        /*[in]*/ VARIANT vConstantRadius,
        /*[in]*/ VARIANT_BOOL bTangentPropagate,
        /*[in]*/ BSTR strConstRadParameterName,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADFilletFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddVariableRadiusFilletFeature (
        /*[in]*/ struct IObjectCollector * colEdgesAndFaces,
        /*[in]*/ SAFEARRAY * * pStartRadiui,
        /*[in]*/ SAFEARRAY * * pEndRadiui,
        /*[in]*/ VARIANT_BOOL bTangentPropagate,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADFilletFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddOffsetFaceFeature (
        /*[in]*/ struct IObjectCollector * pFaces,
        /*[in]*/ VARIANT vOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR strOffsetParameterName,
        /*[out,retval]*/ struct IADOffsetFaceFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddScaleFeature (
        /*[in]*/ VARIANT_BOOL scaleAboutCenteroid,
        /*[in]*/ VARIANT_BOOL uniformScaling,
        /*[in]*/ VARIANT uniformScaleFactor,
        /*[in]*/ VARIANT scaleFactorX,
        /*[in]*/ VARIANT scaleFactorY,
        /*[in]*/ VARIANT scaleFactorZ,
        /*[in]*/ BSTR uniformScaleParamName,
        /*[in]*/ BSTR scaleFactorXParameterName,
        /*[in]*/ BSTR scaleFactorYParameterName,
        /*[in]*/ BSTR scaleFactorZParameterName,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADScaleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddDraftFeature (
        /*[in]*/ struct IObjectCollector * DraftFaces,
        /*[in]*/ struct IADOccurrence * toDraftPlaneOcc,
        /*[in]*/ IDispatch * DraftNeutralPlane,
        /*[in]*/ VARIANT draftAngle,
        /*[in]*/ VARIANT_BOOL IsOutwardDraft,
        /*[in]*/ BSTR angleParameterName,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDraftFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddShellFeature (
        /*[in]*/ struct IObjectCollector * colFacesToRemove,
        /*[in]*/ VARIANT vStandardThickness,
        /*[in]*/ VARIANT_BOOL isShellOutward,
        /*[in]*/ struct IObjectCollector * colMultiThickFaces,
        /*[in]*/ SAFEARRAY * * multiThicknesses,
        /*[in]*/ BSTR thicknessParameterName,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADShellFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddSimpleHole (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT Diameter,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddDrilledHole (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT Diameter,
        /*[in]*/ VARIANT DrillAngle,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddTaperedHole (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT MajorDiameter,
        /*[in]*/ VARIANT MinorDiameter,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddTaperedDrilledHole (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT MajorDiameter,
        /*[in]*/ VARIANT MinorDiameter,
        /*[in]*/ VARIANT DrillAngle,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCounterSunkHole (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT Diameter,
        /*[in]*/ VARIANT CounterSinkDiameter,
        /*[in]*/ VARIANT CounterSinkAngle,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCounterSunkDrilledHole (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT Diameter,
        /*[in]*/ VARIANT DrillAngle,
        /*[in]*/ VARIANT CounterSinkDiameter,
        /*[in]*/ VARIANT CounterSinkAngle,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCounterBoredHole (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT Diameter,
        /*[in]*/ VARIANT CounterBoreDepth,
        /*[in]*/ VARIANT CounterBoreDiameter,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCounterBoredDrilledHole (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT Diameter,
        /*[in]*/ VARIANT DrillAngle,
        /*[in]*/ VARIANT CounterBoreDepth,
        /*[in]*/ VARIANT CounterBoreDiameter,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCounterDrilledHole (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT Diameter,
        /*[in]*/ VARIANT CounterDrillDepth,
        /*[in]*/ VARIANT CounterDrillDiameter,
        /*[in]*/ VARIANT CounterDrillAngle,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCounterDrilledDrilledHole (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT Diameter,
        /*[in]*/ VARIANT DrillAngle,
        /*[in]*/ VARIANT CounterDrillDepth,
        /*[in]*/ VARIANT CounterDrillDiameter,
        /*[in]*/ VARIANT CounterDrillAngle,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTappedThreadInfo (
        /*[in]*/ enum ADTappedThreadType threadType,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR threadClass,
        /*[in]*/ double Pitch,
        /*[in]*/ double tapDrillDiameter,
        /*[in]*/ double MajorDiameter,
        /*[in]*/ double MinorDiameter,
        /*[in]*/ double pitchDiameter,
        /*[in]*/ double ThreadLength,
        /*[out,retval]*/ struct IADTappedThreadInfo * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddMeshBooleanFeature (
        /*[in]*/ struct IADDesignMesh * designMesh,
        /*[in]*/ struct IADOccurrence * designMeshOcc,
        /*[in]*/ enum ADBooleanOperator ADBooleanOperator,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADMeshBooleanFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddLoftBoss (
        /*[in]*/ struct IObjectCollector * CrossSections,
        /*[in]*/ struct IObjectCollector * Tangents,
        /*[in]*/ struct IObjectCollector * TangentMagnitudes,
        /*[in]*/ struct IObjectCollector * TangentAngles,
        /*[in]*/ struct IObjectCollector * GuideCurves,
        /*[in]*/ enum ADLoftGuideType GuideCurveType,
        /*[in]*/ VARIANT_BOOL MinimizeTwist,
        /*[in]*/ VARIANT_BOOL MinimizeCurvature,
        /*[in]*/ VARIANT_BOOL SimplifySurface,
        /*[in]*/ VARIANT_BOOL ConnectEnds,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADLoftFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddLoftCut (
        /*[in]*/ struct IObjectCollector * CrossSections,
        /*[in]*/ struct IObjectCollector * Tangents,
        /*[in]*/ struct IObjectCollector * TangentMagnitudes,
        /*[in]*/ struct IObjectCollector * TangentAngles,
        /*[in]*/ struct IObjectCollector * GuideCurves,
        /*[in]*/ enum ADLoftGuideType GuideCurveType,
        /*[in]*/ VARIANT_BOOL MinimizeTwist,
        /*[in]*/ VARIANT_BOOL MinimizeCurvature,
        /*[in]*/ VARIANT_BOOL SimplifySurface,
        /*[in]*/ VARIANT_BOOL ConnectEnds,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADLoftFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddSimpleHoleEx (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT Diameter,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[in]*/ BSTR diameterParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddDrilledHoleEx (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT Diameter,
        /*[in]*/ VARIANT DrillAngle,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[in]*/ BSTR diameterParameterName,
        /*[in]*/ BSTR drillAngleParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddTaperedHoleEx (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT MajorDiameter,
        /*[in]*/ VARIANT MinorDiameter,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[in]*/ BSTR majorDiameterParameterName,
        /*[in]*/ BSTR minorDiameterParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddTaperedDrilledHoleEx (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT MajorDiameter,
        /*[in]*/ VARIANT MinorDiameter,
        /*[in]*/ VARIANT DrillAngle,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[in]*/ BSTR majorDiameterParameterName,
        /*[in]*/ BSTR minorDiameterParameterName,
        /*[in]*/ BSTR drillAngleParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCounterSunkHoleEx (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT Diameter,
        /*[in]*/ VARIANT CounterSinkDiameter,
        /*[in]*/ VARIANT CounterSinkAngle,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[in]*/ BSTR diameterParameterName,
        /*[in]*/ BSTR counterSinkDiameterParameterName,
        /*[in]*/ BSTR counterSinkAngleParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCounterSunkDrilledHoleEx (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT Diameter,
        /*[in]*/ VARIANT DrillAngle,
        /*[in]*/ VARIANT CounterSinkDiameter,
        /*[in]*/ VARIANT CounterSinkAngle,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[in]*/ BSTR diameterParameterName,
        /*[in]*/ BSTR drillAngleParameterName,
        /*[in]*/ BSTR counterSinkDiameterParameterName,
        /*[in]*/ BSTR counterSinkAngleParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCounterBoredHoleEx (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT Diameter,
        /*[in]*/ VARIANT CounterBoreDepth,
        /*[in]*/ VARIANT CounterBoreDiameter,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[in]*/ BSTR diameterParameterName,
        /*[in]*/ BSTR counterBoreDepthParameterName,
        /*[in]*/ BSTR counterBoreDiameterParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCounterBoredDrilledHoleEx (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT Diameter,
        /*[in]*/ VARIANT DrillAngle,
        /*[in]*/ VARIANT CounterBoreDepth,
        /*[in]*/ VARIANT CounterBoreDiameter,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[in]*/ BSTR diameterParameterName,
        /*[in]*/ BSTR drillAngleParameterName,
        /*[in]*/ BSTR counterBoreDepthParameterName,
        /*[in]*/ BSTR counterBoreDiameterParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCounterDrilledHoleEx (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT Diameter,
        /*[in]*/ VARIANT CounterDrillDepth,
        /*[in]*/ VARIANT CounterDrillDiameter,
        /*[in]*/ VARIANT CounterDrillAngle,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[in]*/ BSTR diameterParameterName,
        /*[in]*/ BSTR counterDrillDepthParameterName,
        /*[in]*/ BSTR counterDrillDiameterParameterName,
        /*[in]*/ BSTR counterDrillAngleParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCounterDrilledDrilledHoleEx (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ VARIANT Diameter,
        /*[in]*/ VARIANT DrillAngle,
        /*[in]*/ VARIANT CounterDrillDepth,
        /*[in]*/ VARIANT CounterDrillDiameter,
        /*[in]*/ VARIANT CounterDrillAngle,
        /*[in]*/ VARIANT_BOOL isReversed,
        /*[in]*/ struct IADTappedThreadInfo * TappedThread,
        /*[in]*/ enum ADHoleDepthCondition depthCondition,
        /*[in]*/ struct IADOccurrence * toGeometryOcc,
        /*[in]*/ IDispatch * toGeometryObject,
        /*[in]*/ double ToGeometryOffset,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR depthParameterName,
        /*[in]*/ BSTR diameterParameterName,
        /*[in]*/ BSTR drillAngleParameterName,
        /*[in]*/ BSTR counterDrillDepthParameterName,
        /*[in]*/ BSTR counterDrillDiameterParameterName,
        /*[in]*/ BSTR counterDrillAngleParameterName,
        /*[out,retval]*/ struct IADHoleFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddWrap (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ IDispatch * targetFaceObject,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ enum ADWrapFocusType FocusType,
        /*[in]*/ enum ADBooleanOperator BooleanOperator,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADWrapFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddProject (
        /*[in]*/ struct IADSketch * pSketch,
        /*[in]*/ VARIANT Depth,
        /*[in]*/ enum ADBooleanOperator BooleanOperator,
        /*[in]*/ VARIANT_BOOL IsIntoSketchPlane,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADProjectFeature * * pRetVal ) = 0;
};

struct __declspec(uuid("82dfec3f-aea5-4733-90d6-620b59f0a97b"))
IADPartSession : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFacetData))
    SAFEARRAY * FacetData;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    long Transparency;
    __declspec(property(get=GetReflectivity,put=PutReflectivity))
    long Reflectivity;
    __declspec(property(get=GetFeatureCount))
    long FeatureCount;
    __declspec(property(get=GetSketches))
    IADSketchesPtr Sketches;
    __declspec(property(get=GetFeatures))
    IADPartFeaturesPtr Features;
    __declspec(property(get=GetBodies))
    IADBodiesPtr Bodies;
    __declspec(property(get=GetDesignSurfaces))
    IADDesignSurfacesPtr DesignSurfaces;
    __declspec(property(get=GetSketches3D))
    IAD3DSketchesPtr Sketches3D;
    __declspec(property(get=GetEdgeColor,put=PutEdgeColor))
    long EdgeColor;
    __declspec(property(get=GetSectionBody))
    IADBodyPtr SectionBody;
    __declspec(property(get=GetShowFeatureColor))
    VARIANT_BOOL ShowFeatureColor;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetFacetData ( );
    long GetColor ( );
    void PutColor (
        long pRetVal );
    long GetTransparency ( );
    void PutTransparency (
        long pRetVal );
    long GetReflectivity ( );
    void PutReflectivity (
        long pRetVal );
    long GetFeatureCount ( );
    IADSketchesPtr GetSketches ( );
    IADPartFeaturesPtr GetFeatures ( );
    HRESULT RegenerateAll ( );
    HRESULT UnSuppressAll ( );
    IADBodiesPtr GetBodies ( );
    IADDesignSurfacesPtr GetDesignSurfaces ( );
    IAD3DSketchesPtr GetSketches3D ( );
    SAFEARRAY * FacetDataForConfiguration (
        struct IADConfiguration * pConfiguration );
    HRESULT GetMeshDefinition (
        struct IADConfiguration * pConfiguration,
        long * pFaceDataSize,
        long * pVertexDataSize );
    HRESULT GetMeshData (
        struct IADConfiguration * pConfiguration,
        SAFEARRAY * * faceData,
        SAFEARRAY * * vertexData );
    HRESULT GetMeshDefinitionEx (
        struct IADConfiguration * pConfiguration,
        long minCircularFacets,
        long * pFaceDataSize,
        long * pVertexDataSize,
        long * pNormalDataSize );
    HRESULT GetMeshDataEx (
        struct IADConfiguration * pConfiguration,
        SAFEARRAY * * faceData,
        SAFEARRAY * * vertexData,
        SAFEARRAY * * normalData );
    HRESULT Suppress (
        struct IObjectCollector * states );
    HRESULT Unsuppress (
        struct IObjectCollector * states );
    IADBodiesPtr GetBodiesForConfiguration (
        struct IADConfiguration * pConfiguration );
    long GetEdgeColor ( );
    void PutEdgeColor (
        long pRetVal );
    IADBodyPtr GetSectionBody ( );
    VARIANT_BOOL GetShowFeatureColor ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FacetData (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_Reflectivity (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Reflectivity (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_FeatureCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketches (
        /*[out,retval]*/ struct IADSketches * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Features (
        /*[out,retval]*/ struct IADPartFeatures * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RegenerateAll ( ) = 0;
      virtual HRESULT __stdcall raw_UnSuppressAll ( ) = 0;
      virtual HRESULT __stdcall get_Bodies (
        /*[out,retval]*/ struct IADBodies * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DesignSurfaces (
        /*[out,retval]*/ struct IADDesignSurfaces * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketches3D (
        /*[out,retval]*/ struct IAD3DSketches * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_FacetDataForConfiguration (
        /*[in]*/ struct IADConfiguration * pConfiguration,
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetMeshDefinition (
        /*[in]*/ struct IADConfiguration * pConfiguration,
        /*[in,out]*/ long * pFaceDataSize,
        /*[in,out]*/ long * pVertexDataSize ) = 0;
      virtual HRESULT __stdcall raw_GetMeshData (
        /*[in]*/ struct IADConfiguration * pConfiguration,
        /*[in,out]*/ SAFEARRAY * * faceData,
        /*[in,out]*/ SAFEARRAY * * vertexData ) = 0;
      virtual HRESULT __stdcall raw_GetMeshDefinitionEx (
        /*[in]*/ struct IADConfiguration * pConfiguration,
        /*[in]*/ long minCircularFacets,
        /*[in,out]*/ long * pFaceDataSize,
        /*[in,out]*/ long * pVertexDataSize,
        /*[in,out]*/ long * pNormalDataSize ) = 0;
      virtual HRESULT __stdcall raw_GetMeshDataEx (
        /*[in]*/ struct IADConfiguration * pConfiguration,
        /*[in,out]*/ SAFEARRAY * * faceData,
        /*[in,out]*/ SAFEARRAY * * vertexData,
        /*[in,out]*/ SAFEARRAY * * normalData ) = 0;
      virtual HRESULT __stdcall raw_Suppress (
        /*[in]*/ struct IObjectCollector * states ) = 0;
      virtual HRESULT __stdcall raw_Unsuppress (
        /*[in]*/ struct IObjectCollector * states ) = 0;
      virtual HRESULT __stdcall raw_GetBodiesForConfiguration (
        /*[in]*/ struct IADConfiguration * pConfiguration,
        /*[out,retval]*/ struct IADBodies * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EdgeColor (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall put_EdgeColor (
        /*[in]*/ long pRetVal ) = 0;
      virtual HRESULT __stdcall get_SectionBody (
        /*[out,retval]*/ struct IADBody * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ShowFeatureColor (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("f2708af0-50d4-4c90-b25f-e7b5ab65c2f3"))
IADShell : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetTopologyType))
    enum ADTopologyType TopologyType;
    __declspec(property(get=GetPart))
    IADPartSessionPtr Part;
    __declspec(property(get=GetBody))
    IADBodyPtr Body;
    __declspec(property(get=GetFaces))
    IADFacesPtr Faces;
    __declspec(property(get=GetEdges))
    IADEdgesPtr Edges;
    __declspec(property(get=GetLump))
    IADLumpPtr Lump;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    enum ADTopologyType GetTopologyType ( );
    IADPartSessionPtr GetPart ( );
    IADBodyPtr GetBody ( );
    IADFacesPtr GetFaces ( );
    IADEdgesPtr GetEdges ( );
    IADLumpPtr GetLump ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TopologyType (
        /*[out,retval]*/ enum ADTopologyType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Part (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct IADBody * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ struct IADFaces * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ struct IADEdges * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Lump (
        /*[out,retval]*/ struct IADLump * * pRetVal ) = 0;
};

struct __declspec(uuid("1bd659d3-b286-48a3-9563-fd5476415345"))
IADShells : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADShellPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADPartSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADShellPtr GetItem (
        long index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADPartSessionPtr GetSession ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IADShell * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
};

struct __declspec(uuid("19c4a0d3-da39-476a-a48c-4c0cc5ea9ae4"))
IADVertex : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetTopologyType))
    enum ADTopologyType TopologyType;
    __declspec(property(get=GetPart))
    IADPartSessionPtr Part;
    __declspec(property(get=GetBody))
    IADBodyPtr Body;
    __declspec(property(get=GetEdges))
    IADEdgesPtr Edges;
    __declspec(property(get=GetFaces))
    IADFacesPtr Faces;
    __declspec(property(get=GetPoint))
    IADPointPtr Point;
    __declspec(property(get=GetKey))
    SAFEARRAY * Key;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    enum ADTopologyType GetTopologyType ( );
    IADPartSessionPtr GetPart ( );
    IADBodyPtr GetBody ( );
    IADEdgesPtr GetEdges ( );
    IADFacesPtr GetFaces ( );
    IADPointPtr GetPoint ( );
    SAFEARRAY * GetKey ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TopologyType (
        /*[out,retval]*/ enum ADTopologyType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Part (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ struct IADBody * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ struct IADEdges * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ struct IADFaces * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Point (
        /*[out,retval]*/ struct IADPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
};

struct __declspec(uuid("83fd7be3-8257-409d-ab3a-f53018ac7009"))
IADVertices : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADVertexPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADPartSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADVertexPtr GetItem (
        long index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADPartSessionPtr GetSession ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IADVertex * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
};

struct __declspec(uuid("af0bee6d-208b-45ac-9624-fe89ddccd7bb"))
IADProjectFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsCutout))
    VARIANT_BOOL IsCutout;
    __declspec(property(get=GetSketch))
    IADSketchPtr Sketch;
    __declspec(property(get=GetDepthParameter))
    IADParameterPtr DepthParameter;
    __declspec(property(get=GetIsIntoSketchPlane))
    VARIANT_BOOL IsIntoSketchPlane;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsCutout ( );
    IADSketchPtr GetSketch ( );
    IADParameterPtr GetDepthParameter ( );
    VARIANT_BOOL GetIsIntoSketchPlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsCutout (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IADSketch * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DepthParameter (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsIntoSketchPlane (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("c5e87cf5-27b2-4ea8-9098-2f255e5c7269"))
IADRepositories : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADRepositoryPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADRepositoryPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADRepository * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
};

struct __declspec(uuid("4390925e-605c-4ec3-87c1-1e771a7d1c5e"))
IADRepository : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetRootFolder))
    IADFolderPtr RootFolder;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    IADFolderPtr GetRootFolder ( );
    IADRootPtr GetRoot ( );
    HRESULT Publish (
        struct IObjectCollector * pUsers,
        struct IObjectCollector * pTeams,
        struct IObjectCollector * pRoles );
    HRESULT UnPublish (
        struct IObjectCollector * pUsers,
        struct IObjectCollector * pTeams,
        struct IObjectCollector * pRoles );
    HRESULT UnPublishToAll ( );
    VARIANT_BOOL IsPublished ( );
    VARIANT_BOOL IsPublishedToTeam (
        struct IADTeam * pTeam );
    VARIANT_BOOL IsPublishedToUser (
        struct IADUser * pUser );
    VARIANT_BOOL IsPublishedToRole (
        struct IADTeamRole * pRole );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RootFolder (
        /*[out,retval]*/ struct IADFolder * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Publish (
        /*[in]*/ struct IObjectCollector * pUsers,
        /*[in]*/ struct IObjectCollector * pTeams,
        /*[in]*/ struct IObjectCollector * pRoles ) = 0;
      virtual HRESULT __stdcall raw_UnPublish (
        /*[in]*/ struct IObjectCollector * pUsers,
        /*[in]*/ struct IObjectCollector * pTeams,
        /*[in]*/ struct IObjectCollector * pRoles ) = 0;
      virtual HRESULT __stdcall raw_UnPublishToAll ( ) = 0;
      virtual HRESULT __stdcall raw_IsPublished (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsPublishedToTeam (
        /*[in]*/ struct IADTeam * pTeam,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsPublishedToUser (
        /*[in]*/ struct IADUser * pUser,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsPublishedToRole (
        /*[in]*/ struct IADTeamRole * pRole,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("b73214c5-c55f-46a5-933f-a0d12a9cdefa"))
IADRevolutionFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsCutout))
    VARIANT_BOOL IsCutout;
    __declspec(property(get=GetSketch))
    IADSketchPtr Sketch;
    __declspec(property(get=GetAngleParameter))
    IADParameterPtr AngleParameter;
    __declspec(property(get=GetAxis))
    IADTargetProxyPtr Axis;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsCutout ( );
    IADSketchPtr GetSketch ( );
    IADParameterPtr GetAngleParameter ( );
    IADTargetProxyPtr GetAxis ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsCutout (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IADSketch * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_AngleParameter (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ struct IADTargetProxy * * pRetVal ) = 0;
};

struct __declspec(uuid("4c6b6c09-7a65-4e2c-89e8-0a08c1684ecd"))
IADRoot : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetRepositories))
    IADRepositoriesPtr Repositories;
    __declspec(property(get=GetEventManager))
    IUnknownPtr EventManager;
    __declspec(property(get=GetLanguageForResources))
    _bstr_t LanguageForResources;
    __declspec(property(get=GetTopmostSession))
    IADSessionPtr TopmostSession;
    __declspec(property(get=GetSessions))
    IADSessionsPtr Sessions;
    __declspec(property(get=GetVaultInfo))
    IADVaultInfoPtr VaultInfo;
    __declspec(property(get=GetUser))
    IADUserPtr User;
    __declspec(property(get=GetTeams))
    IADTeamsPtr Teams;
    __declspec(property(get=GetListedUsers))
    IADUsersPtr ListedUsers;
    __declspec(property(get=GetAlibreAddOns))
    IADAddOnsPtr AlibreAddOns;
    __declspec(property(get=GetInstalledDrawingTemplates))
    SAFEARRAY * InstalledDrawingTemplates;
    __declspec(property(get=GetMaterials))
    IADMaterialsPtr Materials;
    __declspec(property(get=GetMaterialLibraries))
    IADMaterialLibrariesPtr MaterialLibraries;
    __declspec(property(get=Getversion))
    _bstr_t version;
    __declspec(property(get=GetAppTitle))
    _bstr_t AppTitle;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    IADRepositoriesPtr GetRepositories ( );
    IADRepositoryPtr GetRepositoryByName (
        _bstr_t Name );
    IDispatchPtr BindReferenceToObject (
        _bstr_t referenceString,
        enum ADObjectType objectType );
    IADSessionPtr ImportSTEPFile (
        _bstr_t filePath );
    IADSessionPtr ImportSATFile (
        _bstr_t filePath );
    IADSessionPtr ImportIGESFile (
        _bstr_t filePath );
    IADSessionPtr ImportDWGFile (
        _bstr_t filePath,
        enum ADUnits overridingUnit,
        VARIANT_BOOL maintainProjection );
    IADSessionPtr ImportDXFFile (
        _bstr_t filePath,
        enum ADUnits overridingUnit,
        VARIANT_BOOL maintainProjection );
    IADSessionsPtr GetSessions ( );
    HRESULT Terminate ( );
    IADUserPtr GetUser ( );
    IADTeamsPtr GetTeams ( );
    IADUsersPtr GetListedUsers ( );
    IADUserPtr CreateUser (
        _bstr_t Name );
    IADUserPtr GetUserByName (
        _bstr_t Name );
    IADTeamPtr CreateTeam (
        _bstr_t Name );
    IADTeamPtr GetTeamByName (
        _bstr_t Name );
    HRESULT SendMessage (
        struct IObjectCollector * pUsers,
        struct IObjectCollector * pTeams,
        _bstr_t message );
    IObjectCollectorPtr NewObjectCollector ( );
    IPermissionSelectorPtr NewPermissionSelector ( );
    INotificationSelectorPtr NewNotificationSelector ( );
    HRESULT SetAgentProperty (
        _bstr_t Name,
        _bstr_t Value );
    _bstr_t GetAgentProperty (
        _bstr_t Name );
    HRESULT RegisterAgent (
        SAFEARRAY * * pAgentBytes );
    HRESULT RunAgent (
        _bstr_t className );
    VARIANT_BOOL IsOpenedFromRepository (
        _bstr_t filePathOnDisk );
    _bstr_t GetRepositoryReference (
        _bstr_t filePathOnDisk );
    IADSessionPtr OpenFile (
        _bstr_t filePath );
    _bstr_t Getversion ( );
    IADPartSessionPtr CreateEmptyPart (
        _bstr_t Name,
        VARIANT_BOOL isSheetMetal );
    IADAssemblySessionPtr CreateEmptyAssembly (
        _bstr_t Name );
    IUnknownPtr GetEventManager ( );
    _bstr_t EncryptPassword (
        _bstr_t plainTextPassword );
    IADSessionPtr Import3DMFile (
        _bstr_t filePath );
    IADSessionPtr ImportImages (
        SAFEARRAY * * pFilePaths );
    HRESULT OpenFileWithUI (
        _bstr_t filePath );
    _bstr_t GetLanguageForResources ( );
    IADSessionPtr GetTopmostSession ( );
    IADSessionPtr ImportSTEPFileEx (
        _bstr_t filePath,
        VARIANT_BOOL applyImportOptions,
        VARIANT_BOOL openEditor );
    IADSessionPtr ImportSATFileEx (
        _bstr_t filePath,
        VARIANT_BOOL applyImportOptions,
        VARIANT_BOOL openEditor );
    IADSessionPtr ImportIGESFileEx (
        _bstr_t filePath,
        VARIANT_BOOL applyImportOptions,
        VARIANT_BOOL openEditor );
    IADVaultInfoPtr GetVaultInfo ( );
    HRESULT TerminateAll ( );
    IADAddOnsPtr GetAlibreAddOns ( );
    SAFEARRAY * GetInstalledDrawingTemplates ( );
    IADDrawingSessionPtr CreateEmptyDrawing (
        _bstr_t Name );
    _bstr_t RestorePackage (
        _bstr_t packageFilePath,
        _bstr_t restoreDirectoryPath,
        VARIANT_BOOL overwrite );
    IADSessionPtr ImportNonNative3DFile (
        _bstr_t filePath,
        enum ADUnits unitCodeForMeshFile );
    VARIANT_BOOL IsMeshTypeFile (
        _bstr_t filePath );
    HRESULT GetGuidAndConstituentInformation (
        _bstr_t filePath,
        BSTR * guid,
        struct IObjectCollector * * constituentGuids,
        struct IObjectCollector * * constituentNames,
        struct IObjectCollector * * constituentRelativeFilePaths );
    HRESULT GetGuidAndTPConstituentsData (
        _bstr_t filePath,
        BSTR * guid,
        struct IObjectCollector * * constituentGuids,
        struct IObjectCollector * * constituentNames,
        struct IObjectCollector * * constituentAbsoluteTPLocations,
        struct IObjectCollector * * constituentRelativeTPLocations );
    IADGlobalParameterSessionPtr CreateEmptyGlobalParameters (
        _bstr_t Name );
    IADSessionPtr OpenFileEx (
        _bstr_t filePath,
        VARIANT_BOOL openEditor );
    IADPartSessionPtr CreateEmptyPartEx (
        _bstr_t Name,
        VARIANT_BOOL isSheetMetal,
        VARIANT_BOOL openEditor );
    IADAssemblySessionPtr CreateEmptyAssemblyEx (
        _bstr_t Name,
        VARIANT_BOOL openEditor );
    IADDrawingSessionPtr CreateEmptyDrawingEx (
        _bstr_t Name,
        VARIANT_BOOL openEditor );
    IADGlobalParameterSessionPtr CreateEmptyGlobalParametersEx (
        _bstr_t Name,
        VARIANT_BOOL openEditor );
    IADMaterialsPtr GetMaterials ( );
    IADMaterialLibrariesPtr GetMaterialLibraries ( );
    IADMaterialLibraryPtr createMaterialLibrary (
        _bstr_t Name );
    HRESULT removeMaterialLibrary (
        _bstr_t Name );
    _bstr_t GetAppTitle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Repositories (
        /*[out,retval]*/ struct IADRepositories * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRepositoryByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADRepository * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_BindReferenceToObject (
        /*[in]*/ BSTR referenceString,
        /*[in]*/ enum ADObjectType objectType,
        /*[out,retval]*/ IDispatch * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ImportSTEPFile (
        /*[in]*/ BSTR filePath,
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ImportSATFile (
        /*[in]*/ BSTR filePath,
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ImportIGESFile (
        /*[in]*/ BSTR filePath,
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ImportDWGFile (
        /*[in]*/ BSTR filePath,
        /*[in]*/ enum ADUnits overridingUnit,
        /*[in]*/ VARIANT_BOOL maintainProjection,
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ImportDXFFile (
        /*[in]*/ BSTR filePath,
        /*[in]*/ enum ADUnits overridingUnit,
        /*[in]*/ VARIANT_BOOL maintainProjection,
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sessions (
        /*[out,retval]*/ struct IADSessions * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Terminate ( ) = 0;
      virtual HRESULT __stdcall get_User (
        /*[out,retval]*/ struct IADUser * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Teams (
        /*[out,retval]*/ struct IADTeams * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ListedUsers (
        /*[out,retval]*/ struct IADUsers * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateUser (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADUser * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetUserByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADUser * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTeam (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADTeam * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetTeamByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADTeam * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SendMessage (
        /*[in]*/ struct IObjectCollector * pUsers,
        /*[in]*/ struct IObjectCollector * pTeams,
        /*[in]*/ BSTR message ) = 0;
      virtual HRESULT __stdcall raw_NewObjectCollector (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewPermissionSelector (
        /*[out,retval]*/ struct IPermissionSelector * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_NewNotificationSelector (
        /*[out,retval]*/ struct INotificationSelector * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetAgentProperty (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_GetAgentProperty (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RegisterAgent (
        /*[in]*/ SAFEARRAY * * pAgentBytes ) = 0;
      virtual HRESULT __stdcall raw_RunAgent (
        /*[in]*/ BSTR className ) = 0;
      virtual HRESULT __stdcall raw_IsOpenedFromRepository (
        /*[in]*/ BSTR filePathOnDisk,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetRepositoryReference (
        /*[in]*/ BSTR filePathOnDisk,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenFile (
        /*[in]*/ BSTR filePath,
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_version (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEmptyPart (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL isSheetMetal,
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEmptyAssembly (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADAssemblySession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EventManager (
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_EncryptPassword (
        /*[in]*/ BSTR plainTextPassword,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Import3DMFile (
        /*[in]*/ BSTR filePath,
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ImportImages (
        /*[in]*/ SAFEARRAY * * pFilePaths,
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenFileWithUI (
        /*[in]*/ BSTR filePath ) = 0;
      virtual HRESULT __stdcall get_LanguageForResources (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TopmostSession (
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ImportSTEPFileEx (
        /*[in]*/ BSTR filePath,
        /*[in]*/ VARIANT_BOOL applyImportOptions,
        /*[in]*/ VARIANT_BOOL openEditor,
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ImportSATFileEx (
        /*[in]*/ BSTR filePath,
        /*[in]*/ VARIANT_BOOL applyImportOptions,
        /*[in]*/ VARIANT_BOOL openEditor,
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ImportIGESFileEx (
        /*[in]*/ BSTR filePath,
        /*[in]*/ VARIANT_BOOL applyImportOptions,
        /*[in]*/ VARIANT_BOOL openEditor,
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VaultInfo (
        /*[out,retval]*/ struct IADVaultInfo * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_TerminateAll ( ) = 0;
      virtual HRESULT __stdcall get_AlibreAddOns (
        /*[out,retval]*/ struct IADAddOns * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_InstalledDrawingTemplates (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEmptyDrawing (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADDrawingSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_RestorePackage (
        /*[in]*/ BSTR packageFilePath,
        /*[in]*/ BSTR restoreDirectoryPath,
        /*[in]*/ VARIANT_BOOL overwrite,
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_ImportNonNative3DFile (
        /*[in]*/ BSTR filePath,
        /*[in]*/ enum ADUnits unitCodeForMeshFile,
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_IsMeshTypeFile (
        /*[in]*/ BSTR filePath,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetGuidAndConstituentInformation (
        /*[in]*/ BSTR filePath,
        /*[out]*/ BSTR * guid,
        /*[out]*/ struct IObjectCollector * * constituentGuids,
        /*[out]*/ struct IObjectCollector * * constituentNames,
        /*[out]*/ struct IObjectCollector * * constituentRelativeFilePaths ) = 0;
      virtual HRESULT __stdcall raw_GetGuidAndTPConstituentsData (
        /*[in]*/ BSTR filePath,
        /*[out]*/ BSTR * guid,
        /*[out]*/ struct IObjectCollector * * constituentGuids,
        /*[out]*/ struct IObjectCollector * * constituentNames,
        /*[out]*/ struct IObjectCollector * * constituentAbsoluteTPLocations,
        /*[out]*/ struct IObjectCollector * * constituentRelativeTPLocations ) = 0;
      virtual HRESULT __stdcall raw_CreateEmptyGlobalParameters (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADGlobalParameterSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_OpenFileEx (
        /*[in]*/ BSTR filePath,
        /*[in]*/ VARIANT_BOOL openEditor,
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEmptyPartEx (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL isSheetMetal,
        /*[in]*/ VARIANT_BOOL openEditor,
        /*[out,retval]*/ struct IADPartSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEmptyAssemblyEx (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL openEditor,
        /*[out,retval]*/ struct IADAssemblySession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEmptyDrawingEx (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL openEditor,
        /*[out,retval]*/ struct IADDrawingSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEmptyGlobalParametersEx (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL openEditor,
        /*[out,retval]*/ struct IADGlobalParameterSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Materials (
        /*[out,retval]*/ struct IADMaterials * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_MaterialLibraries (
        /*[out,retval]*/ struct IADMaterialLibraries * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_createMaterialLibrary (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADMaterialLibrary * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_removeMaterialLibrary (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_AppTitle (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("6aff3b68-fa68-458a-bf05-fd5a5101f6ec"))
IADSession : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSessionType))
    enum ADObjectSubType SessionType;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetIdentifier))
    _bstr_t Identifier;
    __declspec(property(get=GetParameters))
    IADParametersPtr Parameters;
    __declspec(property(get=GetGeometryFactory))
    IADGeometryFactoryPtr GeometryFactory;
    __declspec(property(get=GetSelectedObjects))
    IObjectCollectorPtr SelectedObjects;
    __declspec(property(get=GetIsGUIVisible))
    VARIANT_BOOL IsGUIVisible;
    __declspec(property(get=GetPreviewSnapshot))
    IUnknownPtr PreviewSnapshot;
    __declspec(property(get=GetTimeStamp))
    long TimeStamp;
    __declspec(property(get=GetfilePath))
    _bstr_t filePath;
    __declspec(property(get=GetConstituentFilePaths))
    IObjectCollectorPtr ConstituentFilePaths;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    enum ADObjectSubType GetSessionType ( );
    IADRootPtr GetRoot ( );
    HRESULT SaveAs (
        VARIANT * pDestination,
        _bstr_t itemName );
    HRESULT Save ( );
    HRESULT Close (
        VARIANT_BOOL saveSession );
    _bstr_t GetIdentifier ( );
    IADParametersPtr GetParameters ( );
    IADGeometryFactoryPtr GetGeometryFactory ( );
    IDispatchPtr BindKeyToItem (
        SAFEARRAY * * pKey,
        enum ADObjectType objectType );
    IObjectCollectorPtr GetSelectedObjects ( );
    VARIANT_BOOL GetIsGUIVisible ( );
    HRESULT SaveNew (
        VARIANT * pDestination );
    IUnknownPtr GetPreviewSnapshot ( );
    HRESULT Select (
        struct IObjectCollector * pEntities );
    IADTargetProxyPtr NewTargetProxy (
        struct IADOccurrence * pOccurrence,
        IDispatch * ptarget );
    HRESULT Highlight (
        IDispatch * ptarget );
    HRESULT SaveCurrentViewSnapshot (
        _bstr_t fullImagePath,
        long Width,
        long Height,
        VARIANT_BOOL bUseCanvasAspectRatio,
        VARIANT_BOOL bUseCanvasWidthAndHeight );
    IObjectCollectorPtr SelectedObjectsEx (
        struct IADPoint * * lastSelectedPoint );
    HRESULT SaveAll (
        _bstr_t destination );
    long GetTimeStamp ( );
    _bstr_t GetfilePath ( );
    HRESULT CreatePackage (
        _bstr_t filePath );
    IObjectCollectorPtr GetConstituentFilePaths ( );
    HRESULT UpdatePreviewSnaphot (
        VARIANT_BOOL overwriteExistingSnapshot );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SessionType (
        /*[out,retval]*/ enum ADObjectSubType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ VARIANT * pDestination,
        /*[in]*/ BSTR itemName ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in]*/ VARIANT_BOOL saveSession ) = 0;
      virtual HRESULT __stdcall get_Identifier (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ struct IADParameters * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_GeometryFactory (
        /*[out,retval]*/ struct IADGeometryFactory * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_BindKeyToItem (
        /*[in]*/ SAFEARRAY * * pKey,
        /*[in]*/ enum ADObjectType objectType,
        /*[out,retval]*/ IDispatch * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SelectedObjects (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsGUIVisible (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SaveNew (
        /*[in]*/ VARIANT * pDestination ) = 0;
      virtual HRESULT __stdcall get_PreviewSnapshot (
        /*[out,retval]*/ IUnknown * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ struct IObjectCollector * pEntities ) = 0;
      virtual HRESULT __stdcall raw_NewTargetProxy (
        /*[in]*/ struct IADOccurrence * pOccurrence,
        /*[in]*/ IDispatch * ptarget,
        /*[out,retval]*/ struct IADTargetProxy * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Highlight (
        /*[in]*/ IDispatch * ptarget ) = 0;
      virtual HRESULT __stdcall raw_SaveCurrentViewSnapshot (
        /*[in]*/ BSTR fullImagePath,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[in]*/ VARIANT_BOOL bUseCanvasAspectRatio,
        /*[in]*/ VARIANT_BOOL bUseCanvasWidthAndHeight ) = 0;
      virtual HRESULT __stdcall raw_SelectedObjectsEx (
        /*[in,out]*/ struct IADPoint * * lastSelectedPoint,
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_SaveAll (
        /*[in]*/ BSTR destination ) = 0;
      virtual HRESULT __stdcall get_TimeStamp (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_filePath (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePackage (
        /*[in]*/ BSTR filePath ) = 0;
      virtual HRESULT __stdcall get_ConstituentFilePaths (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_UpdatePreviewSnaphot (
        /*[in]*/ VARIANT_BOOL overwriteExistingSnapshot ) = 0;
};

struct __declspec(uuid("a48fdded-77ab-433f-9764-16eaf0b88fee"))
IADSessions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADSessionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADSessionPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
};

struct __declspec(uuid("3e844fc5-636a-4a5e-a912-fe9f92c7a795"))
IADSheet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetSession))
    IADDrawingSessionPtr Session;
    __declspec(property(get=GetViews))
    IADDrawingViewsPtr Views;
    __declspec(property(get=GetDissociatedDimensionCount))
    long DissociatedDimensionCount;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pRetVal );
    IADRootPtr GetRoot ( );
    IADDrawingSessionPtr GetSession ( );
    HRESULT GetExtents (
        struct IAD2DPoint * * pLower,
        struct IAD2DPoint * * pUpper );
    HRESULT GetSheetSize (
        double * Width,
        double * Height );
    HRESULT ModifySheetBlank (
        _bstr_t sheetName,
        double Width,
        double Height,
        enum ADUnits Units,
        double defaultScaleNumerator,
        double defaultScaleDenomenator );
    HRESULT ModifySheetTemplate (
        _bstr_t sheetName,
        _bstr_t templateName,
        double defaultScaleNumerator,
        double defaultScaleDenomenator,
        VARIANT_BOOL retainTemplateLayers,
        VARIANT_BOOL overwriteExistingDimStyles );
    IADDrawingViewsPtr GetViews ( );
    IObjectCollectorPtr CreateStandardViews (
        _bstr_t designFilePath,
        enum ADDrawingViewType ViewType,
        enum ADDetailingOption detailingOptions,
        double scaleNumerator,
        double scaleDenominator,
        enum ADViewOrientation viewOrientations,
        struct IAD2DPoint * insertionPoint,
        struct IADTransformation * workspaceOrientation,
        const _variant_t & designConfiguration,
        const _variant_t & ExplodedView );
    long GetDissociatedDimensionCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDrawingSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetExtents (
        /*[out]*/ struct IAD2DPoint * * pLower,
        /*[out]*/ struct IAD2DPoint * * pUpper ) = 0;
      virtual HRESULT __stdcall raw_GetSheetSize (
        /*[out]*/ double * Width,
        /*[out]*/ double * Height ) = 0;
      virtual HRESULT __stdcall raw_ModifySheetBlank (
        /*[in]*/ BSTR sheetName,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ enum ADUnits Units,
        /*[in]*/ double defaultScaleNumerator,
        /*[in]*/ double defaultScaleDenomenator ) = 0;
      virtual HRESULT __stdcall raw_ModifySheetTemplate (
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR templateName,
        /*[in]*/ double defaultScaleNumerator,
        /*[in]*/ double defaultScaleDenomenator,
        /*[in]*/ VARIANT_BOOL retainTemplateLayers,
        /*[in]*/ VARIANT_BOOL overwriteExistingDimStyles ) = 0;
      virtual HRESULT __stdcall get_Views (
        /*[out,retval]*/ struct IADDrawingViews * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStandardViews (
        /*[in]*/ BSTR designFilePath,
        /*[in]*/ enum ADDrawingViewType ViewType,
        /*[in]*/ enum ADDetailingOption detailingOptions,
        /*[in]*/ double scaleNumerator,
        /*[in]*/ double scaleDenominator,
        /*[in]*/ enum ADViewOrientation viewOrientations,
        /*[in]*/ struct IAD2DPoint * insertionPoint,
        /*[in]*/ struct IADTransformation * workspaceOrientation,
        /*[in]*/ VARIANT designConfiguration,
        /*[in]*/ VARIANT ExplodedView,
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DissociatedDimensionCount (
        /*[out,retval]*/ long * pRetVal ) = 0;
};

struct __declspec(uuid("1cd82fd9-5d69-4c3f-ba14-e8cb0a05facd"))
IADSheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADSheetPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADDrawingSessionPtr Session;
    __declspec(property(get=GetActiveSheet,put=PutRefActiveSheet))
    IADSheetPtr ActiveSheet;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADSheetPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADDrawingSessionPtr GetSession ( );
    IADSheetPtr GetActiveSheet ( );
    void PutRefActiveSheet (
        struct IADSheet * pRetVal );
    IADSheetPtr CreateSheetFromTemplate (
        _bstr_t sheetName,
        _bstr_t templateName,
        double defaultScaleNumerator,
        double defaultScaleDenomenator,
        VARIANT_BOOL retainTemplateLayers,
        VARIANT_BOOL overwriteExistingLayers,
        VARIANT_BOOL overwriteExistingDimStyles );
    IADSheetPtr CreateBlankSheet (
        _bstr_t sheetName,
        double Width,
        double Height,
        enum ADUnits Units,
        double defaultScaleNumerator,
        double defaultScaleDenomenator );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADSheet * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDrawingSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ActiveSheet (
        /*[out,retval]*/ struct IADSheet * * pRetVal ) = 0;
      virtual HRESULT __stdcall putref_ActiveSheet (
        /*[in]*/ struct IADSheet * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSheetFromTemplate (
        /*[in]*/ BSTR sheetName,
        /*[in]*/ BSTR templateName,
        /*[in]*/ double defaultScaleNumerator,
        /*[in]*/ double defaultScaleDenomenator,
        /*[in]*/ VARIANT_BOOL retainTemplateLayers,
        /*[in]*/ VARIANT_BOOL overwriteExistingLayers,
        /*[in]*/ VARIANT_BOOL overwriteExistingDimStyles,
        /*[out,retval]*/ struct IADSheet * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBlankSheet (
        /*[in]*/ BSTR sheetName,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ enum ADUnits Units,
        /*[in]*/ double defaultScaleNumerator,
        /*[in]*/ double defaultScaleDenomenator,
        /*[out,retval]*/ struct IADSheet * * pRetVal ) = 0;
};

struct __declspec(uuid("5d597f97-726c-43f9-8083-2e2d7e9ed203"))
IADSketchConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetSketchConstraintType))
    enum ADSketchConstraintType SketchConstraintType;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetSession))
    IADDesignSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    enum ADSketchConstraintType GetSketchConstraintType ( );
    IADRootPtr GetRoot ( );
    IADDesignSessionPtr GetSession ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SketchConstraintType (
        /*[out,retval]*/ enum ADSketchConstraintType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
};

struct __declspec(uuid("0424bb75-6aa9-4249-9ea7-e25cf0fdbd5a"))
IADTeamRole : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetRoleName))
    _bstr_t RoleName;
    __declspec(property(get=GetTeamName))
    _bstr_t TeamName;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetRoleName ( );
    _bstr_t GetTeamName ( );
    IADRootPtr GetRoot ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_RoleName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TeamName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
};

struct __declspec(uuid("98872fb4-a7cb-436d-91c6-6696699e1955"))
IADTeamRoles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADTeamRolePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADTeamRolePtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADTeamRole * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
};

struct __declspec(uuid("c47aa15a-6b48-4a00-b8d8-4f3fd9e4674a"))
IADUser : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    IADRootPtr GetRoot ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
};

struct __declspec(uuid("2e231f97-bdc1-4d2e-b020-ce98085bc905"))
IADUsers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADUserPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADUserPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADUser * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
};

struct __declspec(uuid("18b9ad52-1eda-4317-a1da-f48057e672d6"))
IADTeam : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetTeamMembers))
    IADUsersPtr TeamMembers;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetRoles))
    IADTeamRolesPtr Roles;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    IADUsersPtr GetTeamMembers ( );
    IADRootPtr GetRoot ( );
    HRESULT AddMember (
        struct IADUser * pUser );
    VARIANT_BOOL IsMember (
        struct IADUser * pUser );
    HRESULT Remove ( );
    IADTeamRolePtr AddRole (
        _bstr_t RoleName );
    HRESULT AssigneRoleToMember (
        struct IADUser * pUser,
        _bstr_t RoleName );
    IADTeamRolesPtr GetRoles ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TeamMembers (
        /*[out,retval]*/ struct IADUsers * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddMember (
        /*[in]*/ struct IADUser * pUser ) = 0;
      virtual HRESULT __stdcall raw_IsMember (
        /*[in]*/ struct IADUser * pUser,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Remove ( ) = 0;
      virtual HRESULT __stdcall raw_AddRole (
        /*[in]*/ BSTR RoleName,
        /*[out,retval]*/ struct IADTeamRole * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AssigneRoleToMember (
        /*[in]*/ struct IADUser * pUser,
        /*[in]*/ BSTR RoleName ) = 0;
      virtual HRESULT __stdcall get_Roles (
        /*[out,retval]*/ struct IADTeamRoles * * pRetVal ) = 0;
};

struct __declspec(uuid("20779b1a-bb18-494b-822f-fea7e9462016"))
IADTeams : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADTeamPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADTeamPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADTeam * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
};

struct __declspec(uuid("262300a8-2ffc-4480-a1c7-f7a3d373e0dd"))
IADVaultInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsUsingVault))
    VARIANT_BOOL IsUsingVault;
    __declspec(property(get=GetVaultDriveLetter))
    _bstr_t VaultDriveLetter;
    __declspec(property(get=GetSelectedVaultName))
    _bstr_t SelectedVaultName;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsUsingVault ( );
    _bstr_t GetVaultDriveLetter ( );
    _bstr_t GetSelectedVaultName ( );
    IADRootPtr GetRoot ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsUsingVault (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_VaultDriveLetter (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SelectedVaultName (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
};

struct __declspec(uuid("498750ad-6df1-4b08-88dc-091d2ddcd06e"))
IADSketch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetSession))
    IADDesignSessionPtr Session;
    __declspec(property(get=GetFigures))
    IADSketchFiguresPtr Figures;
    __declspec(property(get=GetIsClosed))
    VARIANT_BOOL IsClosed;
    __declspec(property(get=GetSketchPlaneNormal))
    IADVectorPtr SketchPlaneNormal;
    __declspec(property(get=GetSketchPlane))
    IADTargetProxyPtr SketchPlane;
    __declspec(property(get=GetIsConsumed))
    VARIANT_BOOL IsConsumed;
    __declspec(property(get=GetConsumingFeature))
    IADPartFeaturePtr ConsumingFeature;
    __declspec(property(get=GetDimensions))
    IADDimensionsPtr Dimensions;
    __declspec(property(get=GetKey))
    SAFEARRAY * Key;
    __declspec(property(get=GetIsSuppressed))
    VARIANT_BOOL IsSuppressed;
    __declspec(property(get=GetIsActive))
    VARIANT_BOOL IsActive;
    __declspec(property(get=GetSketchConstraints))
    IADSketchConstraintsPtr SketchConstraints;
    __declspec(property(get=GetOriginPoint))
    IADSketchPointPtr OriginPoint;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pRetVal );
    IADRootPtr GetRoot ( );
    IADDesignSessionPtr GetSession ( );
    IADSketchFiguresPtr GetFigures ( );
    VARIANT_BOOL GetIsClosed ( );
    IADVectorPtr GetSketchPlaneNormal ( );
    IADTargetProxyPtr GetSketchPlane ( );
    VARIANT_BOOL GetIsConsumed ( );
    IADPartFeaturePtr GetConsumingFeature ( );
    HRESULT Delete ( );
    HRESULT BeginChange ( );
    HRESULT BeginChangeEx (
        struct IADPoint * pOrigin,
        struct IADVector * pXAxis,
        struct IADVector * pYDirection );
    HRESULT EndChange ( );
    HRESULT MapFromWorldToSketch (
        struct IADPoint * xyzPoint,
        double * uCoord,
        double * vCoord );
    IADDimensionsPtr GetDimensions ( );
    HRESULT GetExtents (
        struct IAD2DPoint * * ppLower,
        struct IAD2DPoint * * ppUpper );
    IAnalyzedSketchDataPtr Analyze (
        VARIANT_BOOL bDisjointEnds,
        VARIANT_BOOL bOpenLoops,
        VARIANT_BOOL bOverLaps,
        VARIANT_BOOL bSelfIntersections,
        VARIANT_BOOL bDegenerateFigures,
        VARIANT_BOOL bHealSketch,
        double dblHealingTolerance );
    HRESULT MapFromSketchToWorld (
        double uCoord,
        double vCoord,
        struct IADPoint * * xyzPoint );
    SAFEARRAY * GetKey ( );
    VARIANT_BOOL GetIsSuppressed ( );
    VARIANT_BOOL GetIsActive ( );
    IADSketchConstraintsPtr GetSketchConstraints ( );
    IADSketchPointPtr GetOriginPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Figures (
        /*[out,retval]*/ struct IADSketchFigures * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsClosed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SketchPlaneNormal (
        /*[out,retval]*/ struct IADVector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SketchPlane (
        /*[out,retval]*/ struct IADTargetProxy * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsConsumed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ConsumingFeature (
        /*[out,retval]*/ struct IADPartFeature * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_BeginChange ( ) = 0;
      virtual HRESULT __stdcall raw_BeginChangeEx (
        /*[in]*/ struct IADPoint * pOrigin,
        /*[in]*/ struct IADVector * pXAxis,
        /*[in]*/ struct IADVector * pYDirection ) = 0;
      virtual HRESULT __stdcall raw_EndChange ( ) = 0;
      virtual HRESULT __stdcall raw_MapFromWorldToSketch (
        /*[in]*/ struct IADPoint * xyzPoint,
        /*[out]*/ double * uCoord,
        /*[out]*/ double * vCoord ) = 0;
      virtual HRESULT __stdcall get_Dimensions (
        /*[out,retval]*/ struct IADDimensions * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetExtents (
        /*[out]*/ struct IAD2DPoint * * ppLower,
        /*[out]*/ struct IAD2DPoint * * ppUpper ) = 0;
      virtual HRESULT __stdcall raw_Analyze (
        /*[in]*/ VARIANT_BOOL bDisjointEnds,
        /*[in]*/ VARIANT_BOOL bOpenLoops,
        /*[in]*/ VARIANT_BOOL bOverLaps,
        /*[in]*/ VARIANT_BOOL bSelfIntersections,
        /*[in]*/ VARIANT_BOOL bDegenerateFigures,
        /*[in]*/ VARIANT_BOOL bHealSketch,
        /*[in]*/ double dblHealingTolerance,
        /*[out,retval]*/ struct IAnalyzedSketchData * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_MapFromSketchToWorld (
        /*[in]*/ double uCoord,
        /*[in]*/ double vCoord,
        /*[out]*/ struct IADPoint * * xyzPoint ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ SAFEARRAY * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsSuppressed (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsActive (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_SketchConstraints (
        /*[out,retval]*/ struct IADSketchConstraints * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_OriginPoint (
        /*[out,retval]*/ struct IADSketchPoint * * pRetVal ) = 0;
};

struct __declspec(uuid("33360fb6-5248-4373-8370-2ecf5322c4cd"))
IADSketchConstraints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADSketchConstraintPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSketch))
    IADSketchPtr Sketch;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADSketchConstraintPtr GetItem (
        long index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADSketchPtr GetSketch ( );
    VARIANT_BOOL AddConstraint (
        struct IObjectCollector * targets,
        enum ADSketchConstraintType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IADSketchConstraint * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IADSketch * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddConstraint (
        /*[in]*/ struct IObjectCollector * targets,
        /*[in]*/ enum ADSketchConstraintType Type,
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
};

struct __declspec(uuid("cb525560-79aa-498d-851b-495a98d5dd38"))
IADSketches : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADSketchPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSession))
    IADDesignSessionPtr Session;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADSketchPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADDesignSessionPtr GetSession ( );
    IADSketchPtr AddSketch (
        struct IADOccurrence * pOccurrence,
        IDispatch * pSketchPlane,
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADSketch * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Session (
        /*[out,retval]*/ struct IADDesignSession * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddSketch (
        /*[in]*/ struct IADOccurrence * pOccurrence,
        /*[in]*/ IDispatch * pSketchPlane,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IADSketch * * pRetVal ) = 0;
};

struct __declspec(uuid("2686dba4-a49c-4294-aba5-5ea6f7003383"))
IADSketchFigure : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum ADObjectType Type;
    __declspec(property(get=GetFigureType))
    enum ADGeometryType FigureType;
    __declspec(property(get=GetRoot))
    IADRootPtr Root;
    __declspec(property(get=GetSketch))
    IADSketchPtr Sketch;
    __declspec(property(get=GetIsReference,put=PutIsReference))
    VARIANT_BOOL IsReference;
    __declspec(property(get=GetIsAnchored,put=PutIsAnchored))
    VARIANT_BOOL IsAnchored;
    __declspec(property(get=GetIsOwned))
    VARIANT_BOOL IsOwned;
    __declspec(property(get=GetID))
    _bstr_t ID;

    //
    // Wrapper methods for error-handling
    //

    enum ADObjectType GetType ( );
    enum ADGeometryType GetFigureType ( );
    IADRootPtr GetRoot ( );
    IADSketchPtr GetSketch ( );
    VARIANT_BOOL GetIsReference ( );
    void PutIsReference (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsAnchored ( );
    void PutIsAnchored (
        VARIANT_BOOL pRetVal );
    HRESULT Delete ( );
    VARIANT_BOOL GetIsOwned ( );
    _bstr_t GetID ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ADObjectType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FigureType (
        /*[out,retval]*/ enum ADGeometryType * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct IADRoot * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IADSketch * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsReference (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsReference (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsAnchored (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsAnchored (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_IsOwned (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pRetVal ) = 0;
};

struct __declspec(uuid("4e8bf3ec-781f-496c-ade9-65b6b1892361"))
IADSketchFigures : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IADSketchFigurePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetEnum))
    DIEnumPtr Enum;
    __declspec(property(get=GetSketch))
    IADSketchPtr Sketch;

    //
    // Wrapper methods for error-handling
    //

    IEnumVARIANTPtr GetEnumerator ( );
    IADSketchFigurePtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    DIEnumPtr GetEnum ( );
    IADSketchPtr GetSketch ( );
    IADSketchPointPtr AddSketchPoint (
        double XCoord,
        double YCoord );
    IADSketchLinePtr AddLine (
        double x1,
        double y1,
        double x2,
        double y2 );
    IADSketchCirclePtr AddCircle (
        double XCenter,
        double YCenter,
        const _variant_t & Radius );
    IADSketchCircularArcPtr AddCircularArcByCenterStartAngle (
        double XCenter,
        double YCenter,
        double XStartPt,
        double YStartPt,
        double ArcAngle );
    IADSketchCircularArcPtr AddCircularArcByCenterStartEnd (
        double XCenter,
        double YCenter,
        double XStartPt,
        double YStartPt,
        double XEndPt,
        double YEndPt );
    IObjectCollectorPtr AddRectangle (
        double Xlow,
        double Ylow,
        double Xhigh,
        double Yhigh );
    IADSketchBsplinePtr AddBspline (
        long order,
        long numCtlPoints,
        SAFEARRAY * * pCtlPoints,
        SAFEARRAY * * pKnotVector,
        SAFEARRAY * * pWeights );
    IADSketchCircularArcPtr AddCircularArcBy3Points (
        double XCenter,
        double YCenter,
        double XStartPt,
        double YStartPt,
        double XEndPt,
        double YEndPt );
    IADSketchCircularArcPtr AddCircularArc (
        double XCenter,
        double YCenter,
        double XStartPt,
        double YStartPt,
        double ArcAngle );
    IADSketchFigurePtr GetFigureByID (
        _bstr_t ID );
    IADSketchBsplinePtr AddBsplineByInterpolation (
        SAFEARRAY * * pInterpolationPoints );
    IADSketchEllipsePtr AddEllipse (
        double XCenter,
        double YCenter,
        double MajorAxis,
        double MinorMajorRatio,
        double MajorAxisAngle );
    IADSketchEllipsePtr AddEllipseBy3Points (
        double XCenter,
        double YCenter,
        double XMajor,
        double YMajor,
        double XMinor,
        double YMinor );
    IADSketchEllipticArcPtr AddEllipticArc (
        double XCenter,
        double YCenter,
        double MajorAxis,
        double MinorMajorRatio,
        double XStart,
        double YStart,
        double XEnd,
        double YEnd,
        double MajorAxisAngle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetEnumerator (
        /*[out,retval]*/ struct IEnumVARIANT * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct IADSketchFigure * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Enum (
        /*[out,retval]*/ struct DIEnum * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IADSketch * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddSketchPoint (
        /*[in]*/ double XCoord,
        /*[in]*/ double YCoord,
        /*[out,retval]*/ struct IADSketchPoint * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[out,retval]*/ struct IADSketchLine * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCircle (
        /*[in]*/ double XCenter,
        /*[in]*/ double YCenter,
        /*[in]*/ VARIANT Radius,
        /*[out,retval]*/ struct IADSketchCircle * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCircularArcByCenterStartAngle (
        /*[in]*/ double XCenter,
        /*[in]*/ double YCenter,
        /*[in]*/ double XStartPt,
        /*[in]*/ double YStartPt,
        /*[in]*/ double ArcAngle,
        /*[out,retval]*/ struct IADSketchCircularArc * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCircularArcByCenterStartEnd (
        /*[in]*/ double XCenter,
        /*[in]*/ double YCenter,
        /*[in]*/ double XStartPt,
        /*[in]*/ double YStartPt,
        /*[in]*/ double XEndPt,
        /*[in]*/ double YEndPt,
        /*[out,retval]*/ struct IADSketchCircularArc * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddRectangle (
        /*[in]*/ double Xlow,
        /*[in]*/ double Ylow,
        /*[in]*/ double Xhigh,
        /*[in]*/ double Yhigh,
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddBspline (
        /*[in]*/ long order,
        /*[in]*/ long numCtlPoints,
        /*[in]*/ SAFEARRAY * * pCtlPoints,
        /*[in]*/ SAFEARRAY * * pKnotVector,
        /*[in]*/ SAFEARRAY * * pWeights,
        /*[out,retval]*/ struct IADSketchBspline * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCircularArcBy3Points (
        /*[in]*/ double XCenter,
        /*[in]*/ double YCenter,
        /*[in]*/ double XStartPt,
        /*[in]*/ double YStartPt,
        /*[in]*/ double XEndPt,
        /*[in]*/ double YEndPt,
        /*[out,retval]*/ struct IADSketchCircularArc * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddCircularArc (
        /*[in]*/ double XCenter,
        /*[in]*/ double YCenter,
        /*[in]*/ double XStartPt,
        /*[in]*/ double YStartPt,
        /*[in]*/ double ArcAngle,
        /*[out,retval]*/ struct IADSketchCircularArc * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_GetFigureByID (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ struct IADSketchFigure * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddBsplineByInterpolation (
        /*[in]*/ SAFEARRAY * * pInterpolationPoints,
        /*[out,retval]*/ struct IADSketchBspline * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddEllipse (
        /*[in]*/ double XCenter,
        /*[in]*/ double YCenter,
        /*[in]*/ double MajorAxis,
        /*[in]*/ double MinorMajorRatio,
        /*[in]*/ double MajorAxisAngle,
        /*[out,retval]*/ struct IADSketchEllipse * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddEllipseBy3Points (
        /*[in]*/ double XCenter,
        /*[in]*/ double YCenter,
        /*[in]*/ double XMajor,
        /*[in]*/ double YMajor,
        /*[in]*/ double XMinor,
        /*[in]*/ double YMinor,
        /*[out,retval]*/ struct IADSketchEllipse * * pRetVal ) = 0;
      virtual HRESULT __stdcall raw_AddEllipticArc (
        /*[in]*/ double XCenter,
        /*[in]*/ double YCenter,
        /*[in]*/ double MajorAxis,
        /*[in]*/ double MinorMajorRatio,
        /*[in]*/ double XStart,
        /*[in]*/ double YStart,
        /*[in]*/ double XEnd,
        /*[in]*/ double YEnd,
        /*[in]*/ double MajorAxisAngle,
        /*[out,retval]*/ struct IADSketchEllipticArc * * pRetVal ) = 0;
};

struct __declspec(uuid("a81ee12d-b836-4710-a8e3-91fd7fdbf448"))
IADSweepFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsCutout))
    VARIANT_BOOL IsCutout;
    __declspec(property(get=GetSketch))
    IADSketchPtr Sketch;
    __declspec(property(get=GetPath))
    IObjectCollectorPtr Path;
    __declspec(property(get=GetDraftParameter))
    IADParameterPtr DraftParameter;
    __declspec(property(get=GetIsOutwardDraft,put=PutIsOutwardDraft))
    VARIANT_BOOL IsOutwardDraft;
    __declspec(property(get=GetIsRigid,put=PutIsRigid))
    VARIANT_BOOL IsRigid;
    __declspec(property(get=GetEndCondition))
    IADTargetProxyPtr EndCondition;
    __declspec(property(get=GetEndConditionType))
    enum ADPartFeatureEndCondition EndConditionType;
    __declspec(property(get=GetToGeometryOffset))
    double ToGeometryOffset;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsCutout ( );
    IADSketchPtr GetSketch ( );
    IObjectCollectorPtr GetPath ( );
    IADParameterPtr GetDraftParameter ( );
    VARIANT_BOOL GetIsOutwardDraft ( );
    void PutIsOutwardDraft (
        VARIANT_BOOL pRetVal );
    VARIANT_BOOL GetIsRigid ( );
    void PutIsRigid (
        VARIANT_BOOL pRetVal );
    IADTargetProxyPtr GetEndCondition ( );
    enum ADPartFeatureEndCondition GetEndConditionType ( );
    double GetToGeometryOffset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsCutout (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IADSketch * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ struct IObjectCollector * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DraftParameter (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsOutwardDraft (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsOutwardDraft (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_IsRigid (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall put_IsRigid (
        /*[in]*/ VARIANT_BOOL pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndCondition (
        /*[out,retval]*/ struct IADTargetProxy * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_EndConditionType (
        /*[out,retval]*/ enum ADPartFeatureEndCondition * pRetVal ) = 0;
      virtual HRESULT __stdcall get_ToGeometryOffset (
        /*[out,retval]*/ double * pRetVal ) = 0;
};

struct __declspec(uuid("1fac0595-e136-4eda-8ad0-50bd3c23f90b"))
IADWrapFeature : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsCutout))
    VARIANT_BOOL IsCutout;
    __declspec(property(get=GetSketch))
    IADSketchPtr Sketch;
    __declspec(property(get=GetDepthParameter))
    IADParameterPtr DepthParameter;
    __declspec(property(get=GetTargetFace))
    IADTargetProxyPtr TargetFace;
    __declspec(property(get=GetFocusType))
    enum ADWrapFocusType FocusType;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsCutout ( );
    IADSketchPtr GetSketch ( );
    IADParameterPtr GetDepthParameter ( );
    IADTargetProxyPtr GetTargetFace ( );
    enum ADWrapFocusType GetFocusType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsCutout (
        /*[out,retval]*/ VARIANT_BOOL * pRetVal ) = 0;
      virtual HRESULT __stdcall get_Sketch (
        /*[out,retval]*/ struct IADSketch * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_DepthParameter (
        /*[out,retval]*/ struct IADParameter * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_TargetFace (
        /*[out,retval]*/ struct IADTargetProxy * * pRetVal ) = 0;
      virtual HRESULT __stdcall get_FocusType (
        /*[out,retval]*/ enum ADWrapFocusType * pRetVal ) = 0;
};

//
// Function implementation mapping
//

#pragma start_map_region("T:\3-alibredesign\SelectionAddOnSample\Debug\AlibreX_64.tli")
__declspec(implementation_key(1)) IDispatchPtr DIEnum::GetNextElement ( );
__declspec(implementation_key(2)) VARIANT_BOOL DIEnum::HasMoreElements ( );
__declspec(implementation_key(3)) double IAD2DPoint::GetX ( );
__declspec(implementation_key(4)) double IAD2DPoint::GetY ( );
__declspec(implementation_key(5)) double IAD3DSketchPoint::GetX ( );
__declspec(implementation_key(6)) double IAD3DSketchPoint::GetY ( );
__declspec(implementation_key(7)) double IAD3DSketchPoint::GetZ ( );
__declspec(implementation_key(8)) VARIANT_BOOL IAD3DSketchPoint::GetIsSketchNode ( );
__declspec(implementation_key(9)) IAD3DSketchPointPtr IAD3DSketchCircularArc::GetCenter ( );
__declspec(implementation_key(10)) double IAD3DSketchCircularArc::GetRadius ( );
__declspec(implementation_key(11)) IAD3DSketchPointPtr IAD3DSketchCircularArc::GetStart ( );
__declspec(implementation_key(12)) IAD3DSketchPointPtr IAD3DSketchCircularArc::GetEnd ( );
__declspec(implementation_key(13)) double IAD3DSketchCircularArc::GetIncludedAngle ( );
__declspec(implementation_key(14)) VARIANT_BOOL IAD3DSketchCircularArc::GetIsRightHandRule ( );
__declspec(implementation_key(15)) IAD3DSketchPointPtr IAD3DSketchEllipse::GetCenter ( );
__declspec(implementation_key(16)) IAD3DSketchPointPtr IAD3DSketchEllipse::GetMajorRadiusPoint ( );
__declspec(implementation_key(17)) IAD3DSketchPointPtr IAD3DSketchEllipse::GetMinorRadiusPoint ( );
__declspec(implementation_key(18)) IAD3DSketchPointPtr IAD3DSketchEllipticArc::GetCenter ( );
__declspec(implementation_key(19)) IAD3DSketchPointPtr IAD3DSketchEllipticArc::GetMajorRadiusPoint ( );
__declspec(implementation_key(20)) IAD3DSketchPointPtr IAD3DSketchEllipticArc::GetMinorRadiusPoint ( );
__declspec(implementation_key(21)) IAD3DSketchPointPtr IAD3DSketchEllipticArc::GetStart ( );
__declspec(implementation_key(22)) IAD3DSketchPointPtr IAD3DSketchEllipticArc::GetEnd ( );
__declspec(implementation_key(23)) VARIANT_BOOL IAD3DSketchEllipticArc::GetIsRightHandRule ( );
__declspec(implementation_key(24)) IAD3DSketchPointPtr IAD3DSketchLine::GetStart ( );
__declspec(implementation_key(25)) IAD3DSketchPointPtr IAD3DSketchLine::GetEnd ( );
__declspec(implementation_key(26)) double IAD3DSketchLine::GetLength ( );
__declspec(implementation_key(27)) _bstr_t IADAutoBrepImportSummary::GetFailReason ( );
__declspec(implementation_key(28)) long IADAutoBrepImportSummary::GetNum_MeshComponent ( );
__declspec(implementation_key(29)) VARIANT_BOOL IADAutoBrepImportSummary::GetIsMeshHealed ( );
__declspec(implementation_key(30)) _bstr_t IADAutoBrepImportSummary::GetPlannarFallbackReason ( );
__declspec(implementation_key(31)) _bstr_t IADAutoBrepImportSummary::GetIsCreatedByFallback ( );
__declspec(implementation_key(32)) _bstr_t IADAutoBrepImportSummary::GetSegmentationTime ( );
__declspec(implementation_key(33)) _bstr_t IADAutoBrepImportSummary::GetGMCADCreationTime ( );
__declspec(implementation_key(34)) _bstr_t IADAutoBrepImportSummary::GetCADCreationFromGMCADTime ( );
__declspec(implementation_key(35)) _bstr_t IADAutoBrepImportSummary::GetCADExportTime ( );
__declspec(implementation_key(36)) HRESULT IADBsplineCurve::GetDefinition ( long * pOrder, long * pNumPoles, long * pNumKnots, VARIANT_BOOL * pIsRational, VARIANT_BOOL * pIsClosed, VARIANT_BOOL * pIsPlanar );
__declspec(implementation_key(37)) HRESULT IADBsplineCurve::GetData ( SAFEARRAY * * pKnots, SAFEARRAY * * pPoles, SAFEARRAY * * pWeights );
__declspec(implementation_key(38)) HRESULT IADBsplineSurface::GetDefinition ( long * pOrderU, long * pOrderV, long * pNumPolesU, long * pNumPolesV, long * pNumKnotsU, long * pNumKnotsV, VARIANT_BOOL * pIsRational, VARIANT_BOOL * pIsClosedU, VARIANT_BOOL * pvIsClosedV, VARIANT_BOOL * pIsPlanar );
__declspec(implementation_key(39)) HRESULT IADBsplineSurface::GetData ( SAFEARRAY * * pKnotsU, SAFEARRAY * * pKnotsV, SAFEARRAY * * pPoles, SAFEARRAY * * pWeights );
__declspec(implementation_key(40)) enum ADObjectType IADDataFont::GetType ( );
__declspec(implementation_key(41)) _bstr_t IADDataFont::GetName ( );
__declspec(implementation_key(42)) double IADDataFont::GetSize ( );
__declspec(implementation_key(43)) VARIANT_BOOL IADDataFont::GetIsItalic ( );
__declspec(implementation_key(44)) VARIANT_BOOL IADDataFont::GetIsUnderline ( );
__declspec(implementation_key(45)) VARIANT_BOOL IADDataFont::GetIsStrikeThrough ( );
__declspec(implementation_key(46)) enum ADUnits IADDesignProperties::GetModelUnits ( );
__declspec(implementation_key(47)) enum ADUnits IADDesignProperties::GetMassUnits ( );
__declspec(implementation_key(48)) double IADDesignProperties::GetDensity ( );
__declspec(implementation_key(49)) void IADDesignProperties::PutDensity ( double pRetVal );
__declspec(implementation_key(50)) _bstr_t IADDesignProperties::GetNumber ( );
__declspec(implementation_key(51)) void IADDesignProperties::PutNumber ( _bstr_t pRetVal );
__declspec(implementation_key(52)) _bstr_t IADDesignProperties::GetDescription ( );
__declspec(implementation_key(53)) void IADDesignProperties::PutDescription ( _bstr_t pRetVal );
__declspec(implementation_key(54)) enum ADUnits IADDesignProperties::GetLengthDisplayUnits ( );
__declspec(implementation_key(55)) enum ADUnits IADDesignProperties::GetAngleDisplayUnits ( );
__declspec(implementation_key(56)) _variant_t IADDesignProperties::ExtendedDesignProperty ( enum ADExtendedDesignProperty propertyID );
__declspec(implementation_key(57)) HRESULT IADDesignProperties::ExtendedDesignProperty_2 ( enum ADExtendedDesignProperty propertyID, const _variant_t & propertyValue );
__declspec(implementation_key(58)) _bstr_t IADDesignProperties::GetMaterial ( );
__declspec(implementation_key(59)) void IADDesignProperties::PutMaterial ( _bstr_t pRetVal );
__declspec(implementation_key(60)) _variant_t IADDesignProperties::CustomProperty ( _bstr_t propertyName );
__declspec(implementation_key(61)) HRESULT IADDesignProperties::CustomProperty_2 ( _bstr_t propertyName, const _variant_t & propertyValue );
__declspec(implementation_key(62)) VARIANT_BOOL IADDesignProperties::GetTreatAsPartInBOM ( );
__declspec(implementation_key(63)) void IADDesignProperties::PutTreatAsPartInBOM ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(64)) enum ADUnits IADDrawingProperties::GetLengthUnits ( );
__declspec(implementation_key(65)) enum ADUnits IADDrawingProperties::GetAngleUnits ( );
__declspec(implementation_key(66)) _bstr_t IADDrawingProperties::GetNumber ( );
__declspec(implementation_key(67)) void IADDrawingProperties::PutNumber ( _bstr_t pRetVal );
__declspec(implementation_key(68)) _bstr_t IADDrawingProperties::GetDescription ( );
__declspec(implementation_key(69)) void IADDrawingProperties::PutDescription ( _bstr_t pRetVal );
__declspec(implementation_key(70)) VARIANT_BOOL IADDrawingSelectionFilter::GetViews ( );
__declspec(implementation_key(71)) void IADDrawingSelectionFilter::PutViews ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(72)) VARIANT_BOOL IADDrawingSelectionFilter::GetParts ( );
__declspec(implementation_key(73)) void IADDrawingSelectionFilter::PutParts ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(74)) VARIANT_BOOL IADDrawingSelectionFilter::GetSegments ( );
__declspec(implementation_key(75)) void IADDrawingSelectionFilter::PutSegments ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(76)) VARIANT_BOOL IADDrawingSelectionFilter::GetSketches2D ( );
__declspec(implementation_key(77)) void IADDrawingSelectionFilter::PutSketches2D ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(78)) VARIANT_BOOL IADDrawingSelectionFilter::GetVertices ( );
__declspec(implementation_key(79)) void IADDrawingSelectionFilter::PutVertices ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(80)) VARIANT_BOOL IADDrawingSelectionFilter::GetDimensions ( );
__declspec(implementation_key(81)) void IADDrawingSelectionFilter::PutDimensions ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(82)) VARIANT_BOOL IADDrawingSelectionFilter::GetAnnotations ( );
__declspec(implementation_key(83)) void IADDrawingSelectionFilter::PutAnnotations ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(84)) VARIANT_BOOL IADDrawingSelectionFilter::GetRedlines ( );
__declspec(implementation_key(85)) void IADDrawingSelectionFilter::PutRedlines ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(86)) VARIANT_BOOL IADIGESOptions::GetIsMSBO ( );
__declspec(implementation_key(87)) void IADIGESOptions::PutIsMSBO ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(88)) VARIANT_BOOL IADIGESOptions::GetIsAutoCAD ( );
__declspec(implementation_key(89)) void IADIGESOptions::PutIsAutoCAD ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(90)) VARIANT_BOOL IADIGESOptions::GetIsJAMA ( );
__declspec(implementation_key(91)) void IADIGESOptions::PutIsJAMA ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(92)) VARIANT_BOOL IADIGESOptions::GetHasWireAsCopiousData ( );
__declspec(implementation_key(93)) void IADIGESOptions::PutHasWireAsCopiousData ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(94)) VARIANT_BOOL IADIGESOptions::GetHasTrimmedCurves ( );
__declspec(implementation_key(95)) void IADIGESOptions::PutHasTrimmedCurves ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(96)) VARIANT_BOOL IADIGESOptions::GetHasTrimSurfacesAsNURBS ( );
__declspec(implementation_key(97)) void IADIGESOptions::PutHasTrimSurfacesAsNURBS ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(98)) VARIANT_BOOL IADIGESOptions::GetHasEllipsesAsNURBS ( );
__declspec(implementation_key(99)) void IADIGESOptions::PutHasEllipsesAsNURBS ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(100)) VARIANT_BOOL IADIGESOptions::GetHasBoundedSurfaces ( );
__declspec(implementation_key(101)) void IADIGESOptions::PutHasBoundedSurfaces ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(102)) enum ADUnits IADIGESOptions::GetUnits ( );
__declspec(implementation_key(103)) void IADIGESOptions::PutUnits ( enum ADUnits pRetVal );
__declspec(implementation_key(104)) long IADIGESOptions::GetEOLLength ( );
__declspec(implementation_key(105)) void IADIGESOptions::PutEOLLength ( long pRetVal );
__declspec(implementation_key(106)) enum ADSelectionFilterOption IADDesignSelectionFilter::GetSolid ( );
__declspec(implementation_key(107)) void IADDesignSelectionFilter::PutSolid ( enum ADSelectionFilterOption pRetVal );
__declspec(implementation_key(108)) enum ADSelectionFilterOption IADDesignSelectionFilter::GetSurface ( );
__declspec(implementation_key(109)) void IADDesignSelectionFilter::PutSurface ( enum ADSelectionFilterOption pRetVal );
__declspec(implementation_key(110)) VARIANT_BOOL IADDesignSelectionFilter::GetPlanes ( );
__declspec(implementation_key(111)) void IADDesignSelectionFilter::PutPlanes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(112)) VARIANT_BOOL IADDesignSelectionFilter::GetAxes ( );
__declspec(implementation_key(113)) void IADDesignSelectionFilter::PutAxes ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(114)) VARIANT_BOOL IADDesignSelectionFilter::GetPoints ( );
__declspec(implementation_key(115)) void IADDesignSelectionFilter::PutPoints ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(116)) VARIANT_BOOL IADDesignSelectionFilter::GetSketches2D ( );
__declspec(implementation_key(117)) void IADDesignSelectionFilter::PutSketches2D ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(118)) VARIANT_BOOL IADDesignSelectionFilter::GetSketches3D ( );
__declspec(implementation_key(119)) void IADDesignSelectionFilter::PutSketches3D ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(120)) VARIANT_BOOL IADDesignSelectionFilter::GetDimensions ( );
__declspec(implementation_key(121)) void IADDesignSelectionFilter::PutDimensions ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(122)) VARIANT_BOOL IADDesignSelectionFilter::GetAnnotations ( );
__declspec(implementation_key(123)) void IADDesignSelectionFilter::PutAnnotations ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(124)) VARIANT_BOOL IADDesignSelectionFilter::GetRedlines ( );
__declspec(implementation_key(125)) void IADDesignSelectionFilter::PutRedlines ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(126)) double IADPoint::GetX ( );
__declspec(implementation_key(127)) double IADPoint::GetY ( );
__declspec(implementation_key(128)) double IADPoint::GetZ ( );
__declspec(implementation_key(129)) HRESULT IAD3DSketchBspline::GetDefinition ( long * pOrder, long * pNumCtlPoints, long * pNumKnots, VARIANT_BOOL * pIsRational, VARIANT_BOOL * pIsClosed, VARIANT_BOOL * pIsPlanar );
__declspec(implementation_key(130)) HRESULT IAD3DSketchBspline::GetData ( SAFEARRAY * * pCtlPoints, SAFEARRAY * * pKnotVector, SAFEARRAY * * pWeights );
__declspec(implementation_key(131)) IADPointPtr IAD3DSketchBspline::GetStartPoint ( );
__declspec(implementation_key(132)) IADPointPtr IAD3DSketchBspline::GetEndPoint ( );
__declspec(implementation_key(133)) long IADPhysicalProperties::GetPartsCount ( );
__declspec(implementation_key(134)) long IADPhysicalProperties::GetLumpsCount ( );
__declspec(implementation_key(135)) long IADPhysicalProperties::GetFacesCount ( );
__declspec(implementation_key(136)) long IADPhysicalProperties::GetEdgesCount ( );
__declspec(implementation_key(137)) long IADPhysicalProperties::GetVerticesCount ( );
__declspec(implementation_key(138)) long IADPhysicalProperties::GetUniquePartsCount ( );
__declspec(implementation_key(139)) HRESULT IADPhysicalProperties::GetExtents ( struct IADPoint * * ppLower, struct IADPoint * * ppUpper );
__declspec(implementation_key(140)) double IADPhysicalProperties::GetVolume ( );
__declspec(implementation_key(141)) double IADPhysicalProperties::GetMass ( );
__declspec(implementation_key(142)) HRESULT IADPhysicalProperties::GetCenterOfGravity ( double * pX, double * pY, double * pZ );
__declspec(implementation_key(143)) double IADPhysicalProperties::GetSurfaceArea ( );
__declspec(implementation_key(144)) HRESULT IADPhysicalProperties::GetMomentsOfInertia ( double * pXX, double * pYY, double * pZZ, double * pYZ, double * pZX, double * pXY );
__declspec(implementation_key(145)) HRESULT IADPhysicalProperties::GetPrincipalMomentsOfInertia ( double * pM1, double * pM2, double * pM3 );
__declspec(implementation_key(146)) HRESULT IADPhysicalProperties::GetPrincipalAxis1 ( double * pX, double * pY, double * pZ );
__declspec(implementation_key(147)) HRESULT IADPhysicalProperties::GetPrincipalAxis2 ( double * pX, double * pY, double * pZ );
__declspec(implementation_key(148)) HRESULT IADPhysicalProperties::GetPrincipalAxis3 ( double * pX, double * pY, double * pZ );
__declspec(implementation_key(149)) _bstr_t IADPhysicalProperties::GetMaterial ( );
__declspec(implementation_key(150)) long IADPrintabilityCheckResults::GetWallThicknessErrors ( );
__declspec(implementation_key(151)) long IADPrintabilityCheckResults::GetGapThicknessErrors ( );
__declspec(implementation_key(152)) long IADPrintabilityCheckResults::GetInterlockingErrors ( );
__declspec(implementation_key(153)) long IADPrintabilityCheckResults::GetVoidErrors ( );
__declspec(implementation_key(154)) long IADPrintabilityCheckResults::GetBottleneckErrors ( );
__declspec(implementation_key(155)) long IADPrintabilityCheckResults::GetOverhangErrors ( );
__declspec(implementation_key(156)) long IADPrintabilityCheckResults::GetManifoldsolidErrors ( );
__declspec(implementation_key(157)) _bstr_t IADPrintabilityCheckResults::GetPrinterName ( );
__declspec(implementation_key(158)) long IADPrintabilityCheckResults::GetModelSizeError ( );
__declspec(implementation_key(159)) HRESULT IADSketchBspline::GetDefinition ( long * pOrder, long * pNumCtlPoints, long * pNumKnots, VARIANT_BOOL * pIsRational, VARIANT_BOOL * pIsClosed, VARIANT_BOOL * pIsPeriodic );
__declspec(implementation_key(160)) HRESULT IADSketchBspline::GetBsplineData ( SAFEARRAY * * pCtlPoints, SAFEARRAY * * pKnotVector, SAFEARRAY * * pWeights );
__declspec(implementation_key(161)) IAD2DPointPtr IADSketchBspline::GetStartPoint ( );
__declspec(implementation_key(162)) IAD2DPointPtr IADSketchBspline::GetEndPoint ( );
__declspec(implementation_key(163)) double IADSketchPoint::GetX ( );
__declspec(implementation_key(164)) double IADSketchPoint::GetY ( );
__declspec(implementation_key(165)) VARIANT_BOOL IADSketchPoint::GetIsSketchNode ( );
__declspec(implementation_key(166)) IADSketchPointPtr IADSketchCircle::GetCenter ( );
__declspec(implementation_key(167)) double IADSketchCircle::GetRadius ( );
__declspec(implementation_key(168)) IADSketchPointPtr IADSketchCircularArc::GetCenter ( );
__declspec(implementation_key(169)) double IADSketchCircularArc::GetRadius ( );
__declspec(implementation_key(170)) IADSketchPointPtr IADSketchCircularArc::GetStart ( );
__declspec(implementation_key(171)) IADSketchPointPtr IADSketchCircularArc::GetEnd ( );
__declspec(implementation_key(172)) double IADSketchCircularArc::GetIncludedAngle ( );
__declspec(implementation_key(173)) VARIANT_BOOL IADSketchCircularArc::GetIsRightHandRule ( );
__declspec(implementation_key(174)) IADSketchPointPtr IADSketchEllipse::GetCenter ( );
__declspec(implementation_key(175)) double IADSketchEllipse::GetMajorAxis ( );
__declspec(implementation_key(176)) double IADSketchEllipse::GetMinorMajorRatio ( );
__declspec(implementation_key(177)) double IADSketchEllipse::GetMajorAxisAngle ( );
__declspec(implementation_key(178)) IADSketchPointPtr IADSketchEllipticArc::GetCenter ( );
__declspec(implementation_key(179)) double IADSketchEllipticArc::GetMajorAxis ( );
__declspec(implementation_key(180)) double IADSketchEllipticArc::GetMinorMajorRatio ( );
__declspec(implementation_key(181)) IADSketchPointPtr IADSketchEllipticArc::GetStart ( );
__declspec(implementation_key(182)) IADSketchPointPtr IADSketchEllipticArc::GetEnd ( );
__declspec(implementation_key(183)) double IADSketchEllipticArc::GetMajorAxisAngle ( );
__declspec(implementation_key(184)) VARIANT_BOOL IADSketchEllipticArc::GetIsRightHandRule ( );
__declspec(implementation_key(185)) IADSketchPointPtr IADSketchLine::GetStart ( );
__declspec(implementation_key(186)) IADSketchPointPtr IADSketchLine::GetEnd ( );
__declspec(implementation_key(187)) double IADSketchLine::GetLength ( );
__declspec(implementation_key(188)) _bstr_t IADSketchText::GetTextString ( );
__declspec(implementation_key(189)) void IADSketchText::PutTextString ( _bstr_t pRetVal );
__declspec(implementation_key(190)) _bstr_t IADSketchText::GetFontName ( );
__declspec(implementation_key(191)) void IADSketchText::PutFontName ( _bstr_t pRetVal );
__declspec(implementation_key(192)) VARIANT_BOOL IADSketchText::GetBold ( );
__declspec(implementation_key(193)) void IADSketchText::PutBold ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(194)) VARIANT_BOOL IADSketchText::GetItalic ( );
__declspec(implementation_key(195)) void IADSketchText::PutItalic ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(196)) IADPointPtr IADSphere::GetCenter ( );
__declspec(implementation_key(197)) double IADSphere::GetRadius ( );
__declspec(implementation_key(198)) enum ADTappedThreadType IADTappedThreadInfo::GetthreadType ( );
__declspec(implementation_key(199)) _bstr_t IADTappedThreadInfo::GetName ( );
__declspec(implementation_key(200)) _bstr_t IADTappedThreadInfo::GetthreadClass ( );
__declspec(implementation_key(201)) double IADTappedThreadInfo::GetPitch ( );
__declspec(implementation_key(202)) double IADTappedThreadInfo::GettapDrillDiameter ( );
__declspec(implementation_key(203)) double IADTappedThreadInfo::GetMajorDiameter ( );
__declspec(implementation_key(204)) double IADTappedThreadInfo::GetMinorDiameter ( );
__declspec(implementation_key(205)) double IADTappedThreadInfo::GetpitchDiameter ( );
__declspec(implementation_key(206)) double IADTappedThreadInfo::GetThreadLength ( );
__declspec(implementation_key(207)) VARIANT_BOOL IADTappedThreadInfo::GetIsValidThread ( );
__declspec(implementation_key(208)) long IADTopologySummary::GetFacesCount ( );
__declspec(implementation_key(209)) long IADTopologySummary::GetEdgesCount ( );
__declspec(implementation_key(210)) long IADTopologySummary::GetVerticesCount ( );
__declspec(implementation_key(211)) long IADTopologySummary::GetLumpsCount ( );
__declspec(implementation_key(212)) long IADTopologySummary::GetShellsCount ( );
__declspec(implementation_key(213)) long IADTopologySummary::GetCoedgesCount ( );
__declspec(implementation_key(214)) long IADTopologySummary::GetLoopsCount ( );
__declspec(implementation_key(215)) long IADTopologySummary::GetWiresCount ( );
__declspec(implementation_key(216)) double IADVector::GetX ( );
__declspec(implementation_key(217)) double IADVector::GetY ( );
__declspec(implementation_key(218)) double IADVector::GetZ ( );
__declspec(implementation_key(219)) VARIANT_BOOL IADVector::IsEqualTo ( struct IADVector * pVector );
__declspec(implementation_key(220)) IADVectorPtr IADVector::Normalize ( );
__declspec(implementation_key(221)) double IADVector::GetLength ( );
__declspec(implementation_key(222)) IAD3DSketchPointPtr IAD3DSketchCircle::GetCenter ( );
__declspec(implementation_key(223)) IADVectorPtr IAD3DSketchCircle::GetNormal ( );
__declspec(implementation_key(224)) double IAD3DSketchCircle::GetRadius ( );
__declspec(implementation_key(225)) IADPointPtr IADCircle::GetCenter ( );
__declspec(implementation_key(226)) IADVectorPtr IADCircle::GetAxis ( );
__declspec(implementation_key(227)) double IADCircle::GetRadius ( );
__declspec(implementation_key(228)) IADPointPtr IADCircularArc::GetCenter ( );
__declspec(implementation_key(229)) IADVectorPtr IADCircularArc::GetAxis ( );
__declspec(implementation_key(230)) double IADCircularArc::GetRadius ( );
__declspec(implementation_key(231)) IADPointPtr IADCircularArc::GetStart ( );
__declspec(implementation_key(232)) IADPointPtr IADCircularArc::GetEnd ( );
__declspec(implementation_key(233)) IADPointPtr IADCone::GetBasePoint ( );
__declspec(implementation_key(234)) IADVectorPtr IADCone::GetAxis ( );
__declspec(implementation_key(235)) double IADCone::GetRadius ( );
__declspec(implementation_key(236)) double IADCone::GetHalfAngle ( );
__declspec(implementation_key(237)) VARIANT_BOOL IADCone::GetIsExpanding ( );
__declspec(implementation_key(238)) enum ADObjectType IADCurve::GetType ( );
__declspec(implementation_key(239)) enum ADGeometryType IADCurve::GetCurveType ( );
__declspec(implementation_key(240)) IADPointPtr IADCurve::PointAtParam ( double pParam );
__declspec(implementation_key(241)) double IADCurve::ParamAtPoint ( struct IADPoint * pPoint );
__declspec(implementation_key(242)) HRESULT IADCurve::GetParameterExtents ( double * pParamMin, double * pParamMax );
__declspec(implementation_key(243)) IADVectorPtr IADCurve::Curvature ( double pParam );
__declspec(implementation_key(244)) IADVectorPtr IADCurve::Tangent ( double pParam );
__declspec(implementation_key(245)) VARIANT_BOOL IADCurve::GetIsClosed ( );
__declspec(implementation_key(246)) VARIANT_BOOL IADCurve::GetClosestPoint ( double pointX, double pointY, double pointZ, struct IADPoint * * ppClosestPoint, double * pDistance );
__declspec(implementation_key(247)) IADPointPtr IADCylinder::GetBasePoint ( );
__declspec(implementation_key(248)) IADVectorPtr IADCylinder::GetAxis ( );
__declspec(implementation_key(249)) double IADCylinder::GetRadius ( );
__declspec(implementation_key(250)) IADPointPtr IADEllipse::GetCenter ( );
__declspec(implementation_key(251)) IADVectorPtr IADEllipse::GetAxis ( );
__declspec(implementation_key(252)) double IADEllipse::GetMajorAxis ( );
__declspec(implementation_key(253)) double IADEllipse::GetMinorMajorRatio ( );
__declspec(implementation_key(254)) IADPointPtr IADEllipticalArc::GetCenter ( );
__declspec(implementation_key(255)) IADVectorPtr IADEllipticalArc::GetAxis ( );
__declspec(implementation_key(256)) double IADEllipticalArc::GetMajorAxis ( );
__declspec(implementation_key(257)) double IADEllipticalArc::GetMinorMajorRatio ( );
__declspec(implementation_key(258)) IADPointPtr IADEllipticalArc::GetStart ( );
__declspec(implementation_key(259)) IADPointPtr IADEllipticalArc::GetEnd ( );
__declspec(implementation_key(260)) IADPointPtr IADLine::GetStartPoint ( );
__declspec(implementation_key(261)) IADVectorPtr IADLine::GetDirectionVector ( );
__declspec(implementation_key(262)) IADPointPtr IADPlane::GetRootPoint ( );
__declspec(implementation_key(263)) IADVectorPtr IADPlane::GetNormal ( );
__declspec(implementation_key(264)) enum ADObjectType IADSurface::GetType ( );
__declspec(implementation_key(265)) enum ADGeometryType IADSurface::GetSurfaceType ( );
__declspec(implementation_key(266)) IADVectorPtr IADSurface::NormalAtParam ( double puParam, double pvParam );
__declspec(implementation_key(267)) IADVectorPtr IADSurface::NormalAtPoint ( struct IADPoint * pPoint );
__declspec(implementation_key(268)) IADPointPtr IADSurface::PointAtParam ( double pParamU, double pParamV );
__declspec(implementation_key(269)) HRESULT IADSurface::GetParamAtPoint ( struct IADPoint * pPoint, double * pParamU, double * pParamV );
__declspec(implementation_key(270)) HRESULT IADSurface::GetParameterExtents ( double * pUmin, double * pUmax, double * pVmin, double * pVmax );
__declspec(implementation_key(271)) HRESULT IADSurface::GetFirstDerivative ( double paramU, double paramV, struct IADVector * * ppVectorU, struct IADVector * * ppVectorV );
__declspec(implementation_key(272)) HRESULT IADSurface::GetSecondDerivative ( double paramU, double paramV, struct IADVector * * ppVectorUU, struct IADVector * * ppVectorUV, struct IADVector * * ppVectorVV );
__declspec(implementation_key(273)) VARIANT_BOOL IADSurface::GetClosestPoint ( double pointX, double pointY, double pointZ, struct IADPoint * * ppClosestPoint, double * pDistance );
__declspec(implementation_key(274)) VARIANT_BOOL IADSurface::GetRayIntersectionPoint ( double pointX, double pointY, double pointZ, double rayDirX, double rayDirY, double rayDirZ, VARIANT_BOOL bBidrection, struct IADPoint * * ppXPoint, double * pDistance );
__declspec(implementation_key(275)) IADPointPtr IADTorus::GetCenter ( );
__declspec(implementation_key(276)) IADVectorPtr IADTorus::GetAxis ( );
__declspec(implementation_key(277)) double IADTorus::GetMajorRadius ( );
__declspec(implementation_key(278)) double IADTorus::GetMinorRadius ( );
__declspec(implementation_key(279)) IDispatchPtr IAutomationHook::GetRoot ( );
__declspec(implementation_key(280)) HRESULT IAutomationHook::Initialize ( _bstr_t serverURL, _bstr_t loginID, _bstr_t passwd, VARIANT_BOOL disableSecureMode, long unused );
__declspec(implementation_key(281)) HRESULT IAutomationHook::InitializeDebug ( _bstr_t serverURL, _bstr_t loginID, _bstr_t passwd, VARIANT_BOOL disableSecureMode, long unused );
__declspec(implementation_key(282)) HRESULT IAutomationHook::InitializeService ( );
__declspec(implementation_key(283)) double IDecomposedTransformData::GetScaleX ( );
__declspec(implementation_key(284)) double IDecomposedTransformData::GetScaleY ( );
__declspec(implementation_key(285)) double IDecomposedTransformData::GetScaleZ ( );
__declspec(implementation_key(286)) double IDecomposedTransformData::GetShearXY ( );
__declspec(implementation_key(287)) double IDecomposedTransformData::GetShearYZ ( );
__declspec(implementation_key(288)) double IDecomposedTransformData::GetShearZX ( );
__declspec(implementation_key(289)) double IDecomposedTransformData::GetTranslateX ( );
__declspec(implementation_key(290)) double IDecomposedTransformData::GetTranslateY ( );
__declspec(implementation_key(291)) double IDecomposedTransformData::GetTranslateZ ( );
__declspec(implementation_key(292)) double IDecomposedTransformData::GetRotateX ( );
__declspec(implementation_key(293)) double IDecomposedTransformData::GetRotateY ( );
__declspec(implementation_key(294)) double IDecomposedTransformData::GetRotateZ ( );
__declspec(implementation_key(295)) IADVectorPtr IDecomposedTransformData::GetRotateVector ( );
__declspec(implementation_key(296)) double IDecomposedTransformData::GetRotateAngle ( );
__declspec(implementation_key(297)) SAFEARRAY * IADTransformation::Array ( );
__declspec(implementation_key(298)) IADTransformationPtr IADTransformation::Apply ( struct IADTransformation * pTransform );
__declspec(implementation_key(299)) IADTransformationPtr IADTransformation::Inverse ( );
__declspec(implementation_key(300)) VARIANT_BOOL IADTransformation::IsEqualTo ( struct IADTransformation * pTransform );
__declspec(implementation_key(301)) IDecomposedTransformDataPtr IADTransformation::Decompose ( );
__declspec(implementation_key(302)) _bstr_t IADTransformation::GetToString ( );
__declspec(implementation_key(303)) IADPointPtr IADGeometryFactory::CreatePoint ( double X, double Y, double Z );
__declspec(implementation_key(304)) IADVectorPtr IADGeometryFactory::CreateVector ( double I, double J, double K );
__declspec(implementation_key(305)) IADTransformationPtr IADGeometryFactory::CreateTransform ( SAFEARRAY * * pArray );
__declspec(implementation_key(306)) IADTransformationPtr IADGeometryFactory::CreateIdentityTransform ( );
__declspec(implementation_key(307)) IADTransformationPtr IADGeometryFactory::CreateRotationTransform ( struct IADVector * rotationAxisDirection, struct IADPoint * rotationAxisPosition, double rotationAngle );
__declspec(implementation_key(308)) IADTransformationPtr IADGeometryFactory::CreateTranslationTransformAlongVector ( struct IADVector * translationVector );
__declspec(implementation_key(309)) IADTransformationPtr IADGeometryFactory::CreateTranslationTransformByXYZ ( double translationX, double translationY, double translationZ );
__declspec(implementation_key(310)) IADTransformationPtr IADGeometryFactory::CreateUniformScalingTransform ( double scaleFactor );
__declspec(implementation_key(311)) IADTransformationPtr IADGeometryFactory::CreateTransformByVariantArray ( const _variant_t & pArray );
__declspec(implementation_key(312)) IAD2DPointPtr IADGeometryFactory::Create2DPoint ( double X, double Y );
__declspec(implementation_key(313)) VARIANT_BOOL INotificationSelector::GetWrite ( );
__declspec(implementation_key(314)) void INotificationSelector::PutWrite ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(315)) VARIANT_BOOL INotificationSelector::GetDelete ( );
__declspec(implementation_key(316)) void INotificationSelector::PutDelete ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(317)) VARIANT_BOOL INotificationSelector::GetCheckOut ( );
__declspec(implementation_key(318)) void INotificationSelector::PutCheckOut ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(319)) VARIANT_BOOL INotificationSelector::GetCheckIn ( );
__declspec(implementation_key(320)) void INotificationSelector::PutCheckIn ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(321)) VARIANT_BOOL INotificationSelector::GetAdministrate ( );
__declspec(implementation_key(322)) void INotificationSelector::PutAdministrate ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(323)) IEnumVARIANTPtr IObjectCollector::GetEnumerator ( );
__declspec(implementation_key(324)) IDispatchPtr IObjectCollector::GetItem ( const _variant_t & index );
__declspec(implementation_key(325)) long IObjectCollector::GetCount ( );
__declspec(implementation_key(326)) DIEnumPtr IObjectCollector::GetEnum ( );
__declspec(implementation_key(327)) enum ADObjectType IObjectCollector::GetobjectType ( );
__declspec(implementation_key(328)) HRESULT IObjectCollector::Add ( IDispatch * pObject );
__declspec(implementation_key(329)) HRESULT IObjectCollector::Remove ( const _variant_t & index );
__declspec(implementation_key(330)) HRESULT IObjectCollector::Clear ( );
__declspec(implementation_key(331)) enum ADAssemblyConstraintType IADAssemblyConstraint::GetConstraintType ( );
__declspec(implementation_key(332)) _bstr_t IADAssemblyConstraint::GetName ( );
__declspec(implementation_key(333)) IObjectCollectorPtr IADAssemblyConstraint::GetParticipants ( );
__declspec(implementation_key(334)) VARIANT_BOOL IADAssemblyConstraint::GetIsSuppressed ( );
__declspec(implementation_key(335)) void IADAssemblyConstraint::PutIsSuppressed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(336)) enum ADObjectType IADAssemblyConstraint::GetType ( );
__declspec(implementation_key(337)) VARIANT_BOOL IADAssemblyConstraint::GetHasError ( );
__declspec(implementation_key(338)) enum ADAssemblyConstraintBoundType IADAssemblyConstraint::GetBoundType ( );
__declspec(implementation_key(339)) HRESULT IADAssemblyConstraint::Delete ( );
__declspec(implementation_key(340)) VARIANT_BOOL IADLoftFeature::GetIsCutout ( );
__declspec(implementation_key(341)) IObjectCollectorPtr IADLoftFeature::GetCrossSections ( );
__declspec(implementation_key(342)) VARIANT_BOOL IADLoftFeature::GetIsUsingGuideCurves ( );
__declspec(implementation_key(343)) enum ADLoftGuideType IADLoftFeature::GetGuideCurveType ( );
__declspec(implementation_key(344)) IObjectCollectorPtr IADLoftFeature::GetGuideCurves ( );
__declspec(implementation_key(345)) VARIANT_BOOL IADLoftFeature::GetIsMinimizeTwist ( );
__declspec(implementation_key(346)) VARIANT_BOOL IADLoftFeature::GetIsMinimizeCurvature ( );
__declspec(implementation_key(347)) VARIANT_BOOL IADLoftFeature::GetIsSimplifySurface ( );
__declspec(implementation_key(348)) VARIANT_BOOL IADLoftFeature::GetIsConnectEnds ( );
__declspec(implementation_key(349)) VARIANT_BOOL IADLoftFeature::IsTangentSpecified ( const _variant_t & crossSection );
__declspec(implementation_key(350)) double IADLoftFeature::GetTangentMagnitude ( const _variant_t & crossSection );
__declspec(implementation_key(351)) double IADLoftFeature::GetTangentAngle ( const _variant_t & crossSection );
__declspec(implementation_key(352)) IObjectCollectorPtr IAnalyzedSketchData::GetDisjointEnds ( );
__declspec(implementation_key(353)) IObjectCollectorPtr IAnalyzedSketchData::GetOpenLoops ( );
__declspec(implementation_key(354)) IObjectCollectorPtr IAnalyzedSketchData::GetOverLaps ( );
__declspec(implementation_key(355)) IObjectCollectorPtr IAnalyzedSketchData::GetIntersections ( );
__declspec(implementation_key(356)) IObjectCollectorPtr IAnalyzedSketchData::GetDegenerateFigures ( );
__declspec(implementation_key(357)) VARIANT_BOOL IPermissionSelector::GetRead ( );
__declspec(implementation_key(358)) void IPermissionSelector::PutRead ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(359)) VARIANT_BOOL IPermissionSelector::GetWrite ( );
__declspec(implementation_key(360)) void IPermissionSelector::PutWrite ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(361)) VARIANT_BOOL IPermissionSelector::GetDelete ( );
__declspec(implementation_key(362)) void IPermissionSelector::PutDelete ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(363)) VARIANT_BOOL IPermissionSelector::GetViewOnly ( );
__declspec(implementation_key(364)) void IPermissionSelector::PutViewOnly ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(365)) VARIANT_BOOL IPermissionSelector::GetAdministrate ( );
__declspec(implementation_key(366)) void IPermissionSelector::PutAdministrate ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(367)) HRESULT _IADEventsCallback::OnInitialize ( );
__declspec(implementation_key(368)) HRESULT _IADEventsCallback::OnTerminate ( );
__declspec(implementation_key(369)) HRESULT _IADEventsCallback::OnSessionOpen ( struct IADSession * pSession );
__declspec(implementation_key(370)) HRESULT _IADEventsCallback::OnSessionClose ( struct IADSession * pSession );
__declspec(implementation_key(371)) HRESULT _IADEventsCallback::OnSessionChange ( struct IADSession * pSession, SAFEARRAY * * pModifiedItems, SAFEARRAY * * changeType );
__declspec(implementation_key(372)) HRESULT _IADEventsCallback::OnModelLoadComplete ( struct IADSession * pSession );
__declspec(implementation_key(373)) enum ADObjectType IAD3DSketch::GetType ( );
__declspec(implementation_key(374)) _bstr_t IAD3DSketch::GetName ( );
__declspec(implementation_key(375)) void IAD3DSketch::PutName ( _bstr_t pRetVal );
__declspec(implementation_key(376)) IADRootPtr IAD3DSketch::GetRoot ( );
__declspec(implementation_key(377)) IADDesignSessionPtr IAD3DSketch::GetSession ( );
__declspec(implementation_key(378)) VARIANT_BOOL IAD3DSketch::GetIsConsumed ( );
__declspec(implementation_key(379)) IADPartFeaturePtr IAD3DSketch::GetConsumingFeature ( );
__declspec(implementation_key(380)) HRESULT IAD3DSketch::Delete ( );
__declspec(implementation_key(381)) IAD3DSketchFiguresPtr IAD3DSketch::GetFigures ( );
__declspec(implementation_key(382)) SAFEARRAY * IAD3DSketch::GetKey ( );
__declspec(implementation_key(383)) HRESULT IAD3DSketch::BeginChange ( );
__declspec(implementation_key(384)) HRESULT IAD3DSketch::EndChange ( );
__declspec(implementation_key(385)) VARIANT_BOOL IAD3DSketch::GetIsSuppressed ( );
__declspec(implementation_key(386)) VARIANT_BOOL IAD3DSketch::GetIsActive ( );
__declspec(implementation_key(387)) IEnumVARIANTPtr IAD3DSketches::GetEnumerator ( );
__declspec(implementation_key(388)) IAD3DSketchPtr IAD3DSketches::GetItem ( const _variant_t & index );
__declspec(implementation_key(389)) long IAD3DSketches::GetCount ( );
__declspec(implementation_key(390)) DIEnumPtr IAD3DSketches::GetEnum ( );
__declspec(implementation_key(391)) IADDesignSessionPtr IAD3DSketches::GetSession ( );
__declspec(implementation_key(392)) IAD3DSketchPtr IAD3DSketches::Add3DSketch ( _bstr_t Name );
__declspec(implementation_key(393)) enum ADObjectType IAD3DSketchFigure::GetType ( );
__declspec(implementation_key(394)) enum ADGeometryType IAD3DSketchFigure::GetFigureType ( );
__declspec(implementation_key(395)) IADRootPtr IAD3DSketchFigure::GetRoot ( );
__declspec(implementation_key(396)) IAD3DSketchPtr IAD3DSketchFigure::GetSketch ( );
__declspec(implementation_key(397)) VARIANT_BOOL IAD3DSketchFigure::GetIsReference ( );
__declspec(implementation_key(398)) _bstr_t IAD3DSketchFigure::GetID ( );
__declspec(implementation_key(399)) IEnumVARIANTPtr IAD3DSketchFigures::GetEnumerator ( );
__declspec(implementation_key(400)) IAD3DSketchFigurePtr IAD3DSketchFigures::GetItem ( long index );
__declspec(implementation_key(401)) long IAD3DSketchFigures::GetCount ( );
__declspec(implementation_key(402)) DIEnumPtr IAD3DSketchFigures::GetEnum ( );
__declspec(implementation_key(403)) IAD3DSketchPtr IAD3DSketchFigures::GetSketch ( );
__declspec(implementation_key(404)) IAD3DSketchPointPtr IAD3DSketchFigures::AddPoint ( struct IADPoint * Point );
__declspec(implementation_key(405)) IAD3DSketchPointPtr IAD3DSketchFigures::AddPoint_2 ( double X, double Y, double Z );
__declspec(implementation_key(406)) IAD3DSketchLinePtr IAD3DSketchFigures::AddLine ( double x1, double y1, double z1, double x2, double y2, double z2 );
__declspec(implementation_key(407)) IAD3DSketchLinePtr IAD3DSketchFigures::AddLine_2 ( struct IADPoint * Start, struct IADPoint * End );
__declspec(implementation_key(408)) IAD3DSketchCircularArcPtr IAD3DSketchFigures::AddCircularArcByCenterStartEnd ( double XCenter, double YCenter, double ZCenter, double XStartPt, double YStartPt, double ZStartPt, double XEndPt, double YEndPt, double ZEndPt );
__declspec(implementation_key(409)) IAD3DSketchCircularArcPtr IAD3DSketchFigures::AddCircularArcByCenterStartEnd_2 ( struct IADPoint * Center, struct IADPoint * Start, struct IADPoint * End );
__declspec(implementation_key(410)) IAD3DSketchBsplinePtr IAD3DSketchFigures::AddBsplineByInterpolation ( SAFEARRAY * * pInterpolationPoints );
__declspec(implementation_key(411)) IAD3DSketchFigurePtr IAD3DSketchFigures::GetFigureByID ( _bstr_t ID );
__declspec(implementation_key(412)) IObjectCollectorPtr IAD3DSketchFigures::AddPolyline ( SAFEARRAY * * pPoints );
__declspec(implementation_key(413)) IAD3DSketchBsplinePtr IAD3DSketchFigures::AddBspline ( long order, long numCtlPoints, SAFEARRAY * * pCtlPoints, SAFEARRAY * * pKnotVector, SAFEARRAY * * pWeights );
__declspec(implementation_key(414)) HRESULT IADAddOns::ExportFile ( _bstr_t targetFileName, struct IADSession * Session );
__declspec(implementation_key(415)) HRESULT IADAddOns::ExportFile_2 ( _bstr_t targetFileName, struct IADSession * Session, _bstr_t optionFilePath );
__declspec(implementation_key(416)) IADSessionPtr IADAddOns::ImportFile ( _bstr_t filePath, struct IADSession * Session );
__declspec(implementation_key(417)) IADParameterPtr IADAlignConstraint::GetOffset ( );
__declspec(implementation_key(418)) IADParameterPtr IADAlignConstraint::GetMaximumOffset ( );
__declspec(implementation_key(419)) IADParameterPtr IADAlignConstraint::GetMinimumOffset ( );
__declspec(implementation_key(420)) IADParameterPtr IADAngleConstraint::GetAngle ( );
__declspec(implementation_key(421)) IADParameterPtr IADAngleConstraint::GetMaximumAngle ( );
__declspec(implementation_key(422)) IADParameterPtr IADAngleConstraint::GetMinimumAngle ( );
__declspec(implementation_key(423)) IEnumVARIANTPtr IADAssemblyConstraints::GetEnumerator ( );
__declspec(implementation_key(424)) long IADAssemblyConstraints::GetCount ( );
__declspec(implementation_key(425)) IADAssemblyConstraintPtr IADAssemblyConstraints::GetItem ( const _variant_t & index );
__declspec(implementation_key(426)) DIEnumPtr IADAssemblyConstraints::GetEnum ( );
__declspec(implementation_key(427)) IADAssemblyConstraintPtr IADAssemblyConstraints::AddConstraint ( struct IADTargetProxy * first, struct IADTargetProxy * second, enum ADAssemblyConstraintType Type, const _variant_t & parameterValue, VARIANT_BOOL isReversed, _bstr_t Name, _bstr_t parameterName );
__declspec(implementation_key(428)) IADAssemblyConstraintPtr IADAssemblyConstraints::AddConstraintEx ( struct IADTargetProxy * first, struct IADTargetProxy * second, enum ADAssemblyConstraintType eConstraintType, enum ADAssemblyConstraintBoundType eBoundType, const _variant_t & parameterValue, const _variant_t & parameter2Value, VARIANT_BOOL isReversed, _bstr_t Name, _bstr_t parameterName, _bstr_t parameter2Name );
__declspec(implementation_key(429)) enum ADObjectType IADAssemblyFeature::GetType ( );
__declspec(implementation_key(430)) _bstr_t IADAssemblyFeature::GetName ( );
__declspec(implementation_key(431)) IADRootPtr IADAssemblyFeature::GetRoot ( );
__declspec(implementation_key(432)) IADSessionPtr IADAssemblyFeature::GetSession ( );
__declspec(implementation_key(433)) enum ADAssemblyFeatureType IADAssemblyFeature::GetFeatureType ( );
__declspec(implementation_key(434)) IEnumVARIANTPtr IADAssemblyFeatures::GetEnumerator ( );
__declspec(implementation_key(435)) IADAssemblyFeaturePtr IADAssemblyFeatures::GetItem ( const _variant_t & index );
__declspec(implementation_key(436)) long IADAssemblyFeatures::GetCount ( );
__declspec(implementation_key(437)) DIEnumPtr IADAssemblyFeatures::GetEnum ( );
__declspec(implementation_key(438)) IADAssemblySessionPtr IADAssemblyFeatures::GetSession ( );
__declspec(implementation_key(439)) IEnumVARIANTPtr IADAssemblyPath::GetEnumerator ( );
__declspec(implementation_key(440)) IADOccurrencePtr IADAssemblyPath::GetItem ( const _variant_t & index );
__declspec(implementation_key(441)) long IADAssemblyPath::GetCount ( );
__declspec(implementation_key(442)) DIEnumPtr IADAssemblyPath::GetEnum ( );
__declspec(implementation_key(443)) IADOccurrencePtr IADAssemblyPath::getItemOfNestLevel ( long itemNestLevel );
__declspec(implementation_key(444)) IADOccurrencePtr IADAssemblyPath::getFirstOccurrence ( );
__declspec(implementation_key(445)) IADOccurrencePtr IADAssemblyPath::getLastOccurrence ( );
__declspec(implementation_key(446)) IADOccurrencePtr IADAssemblyPath::getRootOccurrence ( );
__declspec(implementation_key(447)) IADOccurrencePtr IADAssemblySession::GetRootOccurrence ( );
__declspec(implementation_key(448)) IADOccurrencePtr IADAssemblySession::GetActiveOccurrence ( );
__declspec(implementation_key(449)) void IADAssemblySession::PutRefActiveOccurrence ( struct IADOccurrence * pRetVal );
__declspec(implementation_key(450)) IADAssemblyConstraintsPtr IADAssemblySession::GetAssemblyConstraints ( );
__declspec(implementation_key(451)) IADInterferencesPtr IADAssemblySession::CheckInterference ( VARIANT * occurrencesGroup1, VARIANT * occurrencesGroup2 );
__declspec(implementation_key(452)) HRESULT IADAssemblySession::ApplyTransformations ( struct IObjectCollector * pOccurrences, struct IObjectCollector * pTransformations, VARIANT_BOOL runInOptimizedMode );
__declspec(implementation_key(453)) IADExplodedViewsPtr IADAssemblySession::GetExplodedViews ( );
__declspec(implementation_key(454)) HRESULT IADAssemblySession::SuppressConstraints ( struct IObjectCollector * pConstraints );
__declspec(implementation_key(455)) HRESULT IADAssemblySession::UnsuppressConstraints ( struct IObjectCollector * pConstraints );
__declspec(implementation_key(456)) VARIANT_BOOL IADAssemblySession::HasInterDesignRelations ( );
__declspec(implementation_key(457)) HRESULT IADAssemblySession::ApplyConstrainedTransformations ( struct IObjectCollector * Occurrences, struct IObjectCollector * transformations );
__declspec(implementation_key(458)) long IADAssemblySession::GetInclusionCount ( _bstr_t childSessionID );
__declspec(implementation_key(459)) IADAssemblyFeaturesPtr IADAssemblySession::GetFeatures ( );
__declspec(implementation_key(460)) IEnumVARIANTPtr IADBodies::GetEnumerator ( );
__declspec(implementation_key(461)) IADBodyPtr IADBodies::GetItem ( long index );
__declspec(implementation_key(462)) long IADBodies::GetCount ( );
__declspec(implementation_key(463)) DIEnumPtr IADBodies::GetEnum ( );
__declspec(implementation_key(464)) IADPartSessionPtr IADBodies::GetSession ( );
__declspec(implementation_key(465)) enum ADObjectType IADBody::GetType ( );
__declspec(implementation_key(466)) enum ADTopologyType IADBody::GetTopologyType ( );
__declspec(implementation_key(467)) IADPartSessionPtr IADBody::GetPart ( );
__declspec(implementation_key(468)) IADLumpsPtr IADBody::GetLumps ( );
__declspec(implementation_key(469)) IADShellsPtr IADBody::GetShells ( );
__declspec(implementation_key(470)) IADFacesPtr IADBody::GetFaces ( );
__declspec(implementation_key(471)) IADEdgesPtr IADBody::GetEdges ( );
__declspec(implementation_key(472)) IADVerticesPtr IADBody::GetVertices ( );
__declspec(implementation_key(473)) long IADBody::GetTimeStamp ( );
__declspec(implementation_key(474)) IADTopologySummaryPtr IADBody::GetTopologySummary ( );
__declspec(implementation_key(475)) enum ADObjectType IADBOMColumn::GetType ( );
__declspec(implementation_key(476)) _bstr_t IADBOMColumn::GetName ( );
__declspec(implementation_key(477)) enum ADBOMTextAlignment IADBOMColumn::GetDataAlignment ( );
__declspec(implementation_key(478)) enum ADBOMTextAlignment IADBOMColumn::GetHeaderAlignment ( );
__declspec(implementation_key(479)) enum ADBOMDataType IADBOMColumn::GetDataType ( );
__declspec(implementation_key(480)) double IADBOMColumn::GetWidth ( );
__declspec(implementation_key(481)) VARIANT_BOOL IADBOMColumn::GetIsVisible ( );
__declspec(implementation_key(482)) IADBOMTableSessionPtr IADBOMColumn::GetSession ( );
__declspec(implementation_key(483)) IEnumVARIANTPtr IADBOMColumns::GetEnumerator ( );
__declspec(implementation_key(484)) IADBOMColumnPtr IADBOMColumns::GetItem ( const _variant_t & index );
__declspec(implementation_key(485)) long IADBOMColumns::GetCount ( );
__declspec(implementation_key(486)) DIEnumPtr IADBOMColumns::GetEnum ( );
__declspec(implementation_key(487)) enum ADObjectType IADBOMRow::GetType ( );
__declspec(implementation_key(488)) _bstr_t IADBOMRow::GetItemNumber ( );
__declspec(implementation_key(489)) double IADBOMRow::GetHeight ( );
__declspec(implementation_key(490)) _bstr_t IADBOMRow::Value ( long pColumnIndex );
__declspec(implementation_key(491)) VARIANT_BOOL IADBOMRow::GetIsVisible ( );
__declspec(implementation_key(492)) VARIANT_BOOL IADBOMRow::GetIsCustomDefined ( );
__declspec(implementation_key(493)) IADBOMTableSessionPtr IADBOMRow::GetSession ( );
__declspec(implementation_key(494)) IEnumVARIANTPtr IADBOMRows::GetEnumerator ( );
__declspec(implementation_key(495)) IADBOMRowPtr IADBOMRows::GetItem ( const _variant_t & index );
__declspec(implementation_key(496)) long IADBOMRows::GetCount ( );
__declspec(implementation_key(497)) DIEnumPtr IADBOMRows::GetEnum ( );
__declspec(implementation_key(498)) HRESULT IADBOMTableSession::ExportSTEP ( _bstr_t fileName );
__declspec(implementation_key(499)) HRESULT IADBOMTableSession::ExportBOM ( _bstr_t fileName, VARIANT_BOOL includeHiddenRows );
__declspec(implementation_key(500)) enum ADBOMTableStyle IADBOMTableSession::GetStyle ( );
__declspec(implementation_key(501)) long IADBOMTableSession::GetColumnCount ( );
__declspec(implementation_key(502)) long IADBOMTableSession::GetRowCount ( );
__declspec(implementation_key(503)) IADBOMColumnsPtr IADBOMTableSession::Columns ( VARIANT_BOOL onlyVisibleOnes );
__declspec(implementation_key(504)) IADBOMRowsPtr IADBOMTableSession::Rows ( VARIANT_BOOL onlyVisibleOnes );
__declspec(implementation_key(505)) double IADBOMTableSession::GetHeaderRowHeight ( );
__declspec(implementation_key(506)) IADDataFontPtr IADBOMTableSession::GetHeaderFont ( );
__declspec(implementation_key(507)) long IADBOMTableSession::GetHeaderFontColor ( );
__declspec(implementation_key(508)) IADDataFontPtr IADBOMTableSession::GetDataFont ( );
__declspec(implementation_key(509)) long IADBOMTableSession::GetDataFontColor ( );
__declspec(implementation_key(510)) _bstr_t IADBOMTableSession::Value ( long pRowIndex, long pColumnIndex );
__declspec(implementation_key(511)) VARIANT_BOOL IADBOMTableSession::GetIsBottomUpDisplay ( );
__declspec(implementation_key(512)) IObjectCollectorPtr IADChamferFeature::GetEdgesAndFaces ( );
__declspec(implementation_key(513)) IADParameterPtr IADChamferFeature::GetDistance1 ( );
__declspec(implementation_key(514)) IADParameterPtr IADChamferFeature::GetDistance2 ( );
__declspec(implementation_key(515)) IADParameterPtr IADChamferFeature::GetAngle ( );
__declspec(implementation_key(516)) VARIANT_BOOL IADChamferFeature::GetTangentPropagate ( );
__declspec(implementation_key(517)) enum ADObjectType IADCoedge::GetType ( );
__declspec(implementation_key(518)) enum ADTopologyType IADCoedge::GetTopologyType ( );
__declspec(implementation_key(519)) IADPartSessionPtr IADCoedge::GetPart ( );
__declspec(implementation_key(520)) IADBodyPtr IADCoedge::GetBody ( );
__declspec(implementation_key(521)) IADLoopPtr IADCoedge::GetLoop ( );
__declspec(implementation_key(522)) IADEdgePtr IADCoedge::GetEdge ( );
__declspec(implementation_key(523)) IADCoedgePtr IADCoedge::GetPartnerCoedge ( );
__declspec(implementation_key(524)) VARIANT_BOOL IADCoedge::GetIsSenseReversed ( );
__declspec(implementation_key(525)) IEnumVARIANTPtr IADCoedges::GetEnumerator ( );
__declspec(implementation_key(526)) IADCoedgePtr IADCoedges::GetItem ( long index );
__declspec(implementation_key(527)) long IADCoedges::GetCount ( );
__declspec(implementation_key(528)) DIEnumPtr IADCoedges::GetEnum ( );
__declspec(implementation_key(529)) IADPartSessionPtr IADCoedges::GetSession ( );
__declspec(implementation_key(530)) IADCompositeFigurePtr IADComplexSketchFigure::GetCompositeFigure ( );
__declspec(implementation_key(531)) IEnumVARIANTPtr IADCompositeFigure::GetEnumerator ( );
__declspec(implementation_key(532)) IADSketchFigurePtr IADCompositeFigure::GetItem ( const _variant_t & index );
__declspec(implementation_key(533)) long IADCompositeFigure::GetCount ( );
__declspec(implementation_key(534)) DIEnumPtr IADCompositeFigure::GetEnum ( );
__declspec(implementation_key(535)) IADSketchShapePatternPtr IADCompositeFigure::GetShapePattern ( );
__declspec(implementation_key(536)) IADComplexSketchFigurePtr IADCompositeFigure::GetSketchFigure ( );
__declspec(implementation_key(537)) IADCompositeFigurePtr IADSketchShapePattern::GetCompositeFigure ( );
__declspec(implementation_key(538)) enum ADObjectType IADConfiguration::GetType ( );
__declspec(implementation_key(539)) _bstr_t IADConfiguration::GetName ( );
__declspec(implementation_key(540)) enum ADConfigurationLockType IADConfiguration::GetLocks ( );
__declspec(implementation_key(541)) void IADConfiguration::PutLocks ( enum ADConfigurationLockType pRetVal );
__declspec(implementation_key(542)) IADDesignSessionPtr IADConfiguration::GetDesignSession ( );
__declspec(implementation_key(543)) long IADConfiguration::GetID ( );
__declspec(implementation_key(544)) IEnumVARIANTPtr IADConfigurations::GetEnumerator ( );
__declspec(implementation_key(545)) IADConfigurationPtr IADConfigurations::GetItem ( const _variant_t & index );
__declspec(implementation_key(546)) long IADConfigurations::GetCount ( );
__declspec(implementation_key(547)) DIEnumPtr IADConfigurations::GetEnum ( );
__declspec(implementation_key(548)) IADConfigurationPtr IADConfigurations::AddConfiguration ( _bstr_t Name, VARIANT_BOOL lockOption );
__declspec(implementation_key(549)) IADConfigurationPtr IADGlobalParameterSession::GetActiveConfiguration ( );
__declspec(implementation_key(550)) void IADGlobalParameterSession::PutRefActiveConfiguration ( struct IADConfiguration * pRetVal );
__declspec(implementation_key(551)) IADConfigurationsPtr IADGlobalParameterSession::GetConfigurations ( );
__declspec(implementation_key(552)) IEnumVARIANTPtr IADDesignAxes::GetEnumerator ( );
__declspec(implementation_key(553)) IADDesignAxisPtr IADDesignAxes::GetItem ( const _variant_t & index );
__declspec(implementation_key(554)) long IADDesignAxes::GetCount ( );
__declspec(implementation_key(555)) DIEnumPtr IADDesignAxes::GetEnum ( );
__declspec(implementation_key(556)) IADDesignSessionPtr IADDesignAxes::GetSession ( );
__declspec(implementation_key(557)) IADDesignAxisPtr IADDesignAxes::CreateBy2Points ( struct IADOccurrence * pOccurrence1, IDispatch * pPoint1, struct IADOccurrence * pOccurrence2, IDispatch * pPoint2, _bstr_t Name );
__declspec(implementation_key(558)) IADDesignAxisPtr IADDesignAxes::CreateFromCylindricalFace ( struct IADOccurrence * pOccurrence, struct IADFace * pFace, _bstr_t Name );
__declspec(implementation_key(559)) IADDesignAxisPtr IADDesignAxes::CreateBy2Planes ( struct IADOccurrence * pOccurrence1, IDispatch * pPlane1, struct IADOccurrence * pOccurrence2, IDispatch * pPlane2, _bstr_t Name );
__declspec(implementation_key(560)) enum ADObjectType IADDesignAxis::GetType ( );
__declspec(implementation_key(561)) _bstr_t IADDesignAxis::GetName ( );
__declspec(implementation_key(562)) void IADDesignAxis::PutName ( _bstr_t pRetVal );
__declspec(implementation_key(563)) enum ADDesignGeometryType IADDesignAxis::GetAxisType ( );
__declspec(implementation_key(564)) IADRootPtr IADDesignAxis::GetRoot ( );
__declspec(implementation_key(565)) IADDesignSessionPtr IADDesignAxis::GetSession ( );
__declspec(implementation_key(566)) HRESULT IADDesignAxis::GetGeometry ( struct IADPoint * * ppPoint1, struct IADPoint * * ppVector );
__declspec(implementation_key(567)) IObjectCollectorPtr IADDesignAxis::GetParameters ( );
__declspec(implementation_key(568)) IObjectCollectorPtr IADDesignAxis::GetSourceObjects ( );
__declspec(implementation_key(569)) HRESULT IADDesignAxis::Delete ( );
__declspec(implementation_key(570)) IADVectorPtr IADDesignAxis::GetDirection ( );
__declspec(implementation_key(571)) HRESULT IADDesignAxis::Show ( );
__declspec(implementation_key(572)) HRESULT IADDesignAxis::Hide ( );
__declspec(implementation_key(573)) enum ADObjectType IADDesignMesh::GetType ( );
__declspec(implementation_key(574)) _bstr_t IADDesignMesh::GetName ( );
__declspec(implementation_key(575)) void IADDesignMesh::PutName ( _bstr_t pRetVal );
__declspec(implementation_key(576)) IADRootPtr IADDesignMesh::GetRoot ( );
__declspec(implementation_key(577)) IADDesignSessionPtr IADDesignMesh::GetSession ( );
__declspec(implementation_key(578)) VARIANT_BOOL IADDesignMesh::GetIsSurfaced ( );
__declspec(implementation_key(579)) __int64 IADDesignMesh::GetTriangleCount ( );
__declspec(implementation_key(580)) IEnumVARIANTPtr IADDesignMeshes::GetEnumerator ( );
__declspec(implementation_key(581)) IADDesignMeshPtr IADDesignMeshes::GetItem ( const _variant_t & index );
__declspec(implementation_key(582)) long IADDesignMeshes::GetCount ( );
__declspec(implementation_key(583)) DIEnumPtr IADDesignMeshes::GetEnum ( );
__declspec(implementation_key(584)) IADDesignSessionPtr IADDesignMeshes::GetSession ( );
__declspec(implementation_key(585)) IObjectCollectorPtr IADDesignMeshes::CreateFromFile ( _bstr_t fileName, _bstr_t meshName, enum ADUnits ADUnits );
__declspec(implementation_key(586)) enum ADObjectType IADDesignPlane::GetType ( );
__declspec(implementation_key(587)) _bstr_t IADDesignPlane::GetName ( );
__declspec(implementation_key(588)) void IADDesignPlane::PutName ( _bstr_t pRetVal );
__declspec(implementation_key(589)) enum ADDesignGeometryType IADDesignPlane::GetPlaneType ( );
__declspec(implementation_key(590)) IADRootPtr IADDesignPlane::GetRoot ( );
__declspec(implementation_key(591)) IADDesignSessionPtr IADDesignPlane::GetSession ( );
__declspec(implementation_key(592)) HRESULT IADDesignPlane::GetGeometry ( struct IADPoint * * ppPoint1, struct IADPoint * * ppPoint2, struct IADPoint * * ppPoint3 );
__declspec(implementation_key(593)) IADVectorPtr IADDesignPlane::GetNormal ( );
__declspec(implementation_key(594)) IObjectCollectorPtr IADDesignPlane::GetParameters ( );
__declspec(implementation_key(595)) IObjectCollectorPtr IADDesignPlane::GetSourceObjects ( );
__declspec(implementation_key(596)) HRESULT IADDesignPlane::Delete ( );
__declspec(implementation_key(597)) HRESULT IADDesignPlane::Show ( );
__declspec(implementation_key(598)) HRESULT IADDesignPlane::Hide ( );
__declspec(implementation_key(599)) IEnumVARIANTPtr IADDesignPlanes::GetEnumerator ( );
__declspec(implementation_key(600)) IADDesignPlanePtr IADDesignPlanes::GetItem ( const _variant_t & index );
__declspec(implementation_key(601)) long IADDesignPlanes::GetCount ( );
__declspec(implementation_key(602)) DIEnumPtr IADDesignPlanes::GetEnum ( );
__declspec(implementation_key(603)) IADDesignSessionPtr IADDesignPlanes::GetSession ( );
__declspec(implementation_key(604)) IADDesignPlanePtr IADDesignPlanes::CreateBy3Points ( struct IADOccurrence * pOccurrence1, IDispatch * pPnt1, struct IADOccurrence * pOccurrence2, IDispatch * pPnt2, struct IADOccurrence * pOccurrence3, IDispatch * pPnt3, _bstr_t Name );
__declspec(implementation_key(605)) IADDesignPlanePtr IADDesignPlanes::CreateAtOffsetToPlane ( struct IADOccurrence * pOcc, IDispatch * pPlaneObject, const _variant_t & Offset, _bstr_t Name );
__declspec(implementation_key(606)) IADDesignPlanePtr IADDesignPlanes::CreateAtAngleToPlane ( struct IADOccurrence * pPlaneOcc, IDispatch * pPlane, struct IADOccurrence * pAxisOcc, IDispatch * pAxis, const _variant_t & Angle, _bstr_t Name );
__declspec(implementation_key(607)) enum ADObjectType IADDesignPoint::GetType ( );
__declspec(implementation_key(608)) _bstr_t IADDesignPoint::GetName ( );
__declspec(implementation_key(609)) void IADDesignPoint::PutName ( _bstr_t pRetVal );
__declspec(implementation_key(610)) enum ADDesignGeometryType IADDesignPoint::GetPointType ( );
__declspec(implementation_key(611)) IADRootPtr IADDesignPoint::GetRoot ( );
__declspec(implementation_key(612)) IADDesignSessionPtr IADDesignPoint::GetSession ( );
__declspec(implementation_key(613)) IADPointPtr IADDesignPoint::GetGeometry ( );
__declspec(implementation_key(614)) IObjectCollectorPtr IADDesignPoint::GetParameters ( );
__declspec(implementation_key(615)) IObjectCollectorPtr IADDesignPoint::GetSourceObjects ( );
__declspec(implementation_key(616)) HRESULT IADDesignPoint::Delete ( );
__declspec(implementation_key(617)) HRESULT IADDesignPoint::Show ( );
__declspec(implementation_key(618)) HRESULT IADDesignPoint::Hide ( );
__declspec(implementation_key(619)) IEnumVARIANTPtr IADDesignPoints::GetEnumerator ( );
__declspec(implementation_key(620)) IADDesignPointPtr IADDesignPoints::GetItem ( const _variant_t & index );
__declspec(implementation_key(621)) long IADDesignPoints::GetCount ( );
__declspec(implementation_key(622)) DIEnumPtr IADDesignPoints::GetEnum ( );
__declspec(implementation_key(623)) IADDesignSessionPtr IADDesignPoints::GetSession ( );
__declspec(implementation_key(624)) IADDesignPointPtr IADDesignPoints::CreatePoint ( double XCoord, double YCoord, double ZCoord, _bstr_t Name );
__declspec(implementation_key(625)) IADDesignPointPtr IADDesignPoints::CreatePointFromCircularEdge ( struct IADOccurrence * pOccurrence, struct IADEdge * pEdge, _bstr_t Name );
__declspec(implementation_key(626)) IADDesignPointPtr IADDesignPoints::CreatePointFromToroidalFace ( struct IADOccurrence * pOccurrence, struct IADFace * pFace, _bstr_t Name );
__declspec(implementation_key(627)) IADDesignPointPtr IADDesignPoints::CreateAtOffsetToPoint ( struct IADOccurrence * pOccurrence, IDispatch * pPoint, const _variant_t & XOffset, const _variant_t & YOffset, const _variant_t & ZOffset, _bstr_t Name );
__declspec(implementation_key(628)) IADDesignPointPtr IADDesignPoints::CreateOnEdge ( struct IADOccurrence * pOccurrence, struct IADEdge * pEdge, double ratio, _bstr_t Name );
__declspec(implementation_key(629)) IADDesignPointPtr IADDesignPoints::CreateBetween2Points ( struct IADOccurrence * pOccurrence1, IDispatch * pPoint1, struct IADOccurrence * pOccurrence2, IDispatch * pPoint2, double ratio, _bstr_t Name );
__declspec(implementation_key(630)) IADDesignPointPtr IADDesignPoints::CreateByProjectingToPlane ( struct IADOccurrence * pOccurrence1, IDispatch * pPoint, struct IADOccurrence * pOccurrence2, IDispatch * pPlane, const _variant_t & XOffset, const _variant_t & YOffset, _bstr_t Name );
__declspec(implementation_key(631)) IADDesignPointPtr IADDesignPoints::CreateBy3Planes ( struct IADOccurrence * pOccurrence1, IDispatch * pPlane1, struct IADOccurrence * pOccurrence2, IDispatch * pPlane2, struct IADOccurrence * pOccurrence3, IDispatch * pPlane3, _bstr_t Name );
__declspec(implementation_key(632)) IADDesignPointPtr IADDesignPoints::CreateBy2Axes ( struct IADOccurrence * pOccurrence1, IDispatch * pAxis1, struct IADOccurrence * pOccurrence2, IDispatch * pAxis2, _bstr_t Name );
__declspec(implementation_key(633)) IADDesignPointPtr IADDesignPoints::CreateByAxisAndPlane ( struct IADOccurrence * pOccurrence1, IDispatch * pAxis, struct IADOccurrence * pOccurrence2, IDispatch * pPlane, _bstr_t Name );
__declspec(implementation_key(634)) HRESULT IADDesignSession::ExportSTEP ( _bstr_t fileName );
__declspec(implementation_key(635)) HRESULT IADDesignSession::ExportAP203 ( _bstr_t fileName );
__declspec(implementation_key(636)) HRESULT IADDesignSession::ExportAP214 ( _bstr_t fileName );
__declspec(implementation_key(637)) HRESULT IADDesignSession::ExportIGES ( _bstr_t fileName );
__declspec(implementation_key(638)) HRESULT IADDesignSession::ExportSAT ( _bstr_t fileName, long version );
__declspec(implementation_key(639)) HRESULT IADDesignSession::ExportSTL ( _bstr_t fileName, double maxCellSize, double normalDeviation, double surfaceDeviation );
__declspec(implementation_key(640)) HRESULT IADDesignSession::ExportBOM ( _bstr_t fileName );
__declspec(implementation_key(641)) HRESULT IADDesignSession::RegenerateDesign ( VARIANT_BOOL deepRegenerate );
__declspec(implementation_key(642)) IADDesignPropertiesPtr IADDesignSession::GetDesignProperties ( );
__declspec(implementation_key(643)) VARIANT_BOOL IADDesignSession::GetHasErrors ( );
__declspec(implementation_key(644)) HRESULT IADDesignSession::ExportSTL2 ( _bstr_t fileName );
__declspec(implementation_key(645)) HRESULT IADDesignSession::ExportSAT2 ( _bstr_t fileName, long version, VARIANT_BOOL saveColorAttribute );
__declspec(implementation_key(646)) IADDesignPointsPtr IADDesignSession::GetDesignPoints ( );
__declspec(implementation_key(647)) IADDesignAxesPtr IADDesignSession::GetDesignAxes ( );
__declspec(implementation_key(648)) IADDesignPlanesPtr IADDesignSession::GetDesignPlanes ( );
__declspec(implementation_key(649)) IADPhysicalPropertiesPtr IADDesignSession::PhysicalProperties ( enum ADAccuracySetting accuracy );
__declspec(implementation_key(650)) IADTransformationPtr IADDesignSession::GetViewTransform ( );
__declspec(implementation_key(651)) double IADDesignSession::GetModelTolerance ( );
__declspec(implementation_key(652)) IADConfigurationPtr IADDesignSession::GetActiveConfiguration ( );
__declspec(implementation_key(653)) void IADDesignSession::PutRefActiveConfiguration ( struct IADConfiguration * pRetVal );
__declspec(implementation_key(654)) IADConfigurationsPtr IADDesignSession::GetConfigurations ( );
__declspec(implementation_key(655)) IADSavedViewsPtr IADDesignSession::GetSavedViews ( );
__declspec(implementation_key(656)) HRESULT IADDesignSession::ViewExtents ( struct IAD2DPoint * * pUpperLeft, struct IAD2DPoint * * pBottomRight );
__declspec(implementation_key(657)) VARIANT_BOOL IADDesignSession::GetIsSectioning ( );
__declspec(implementation_key(658)) IADIGESOptionsPtr IADDesignSession::GetIGESOptions ( );
__declspec(implementation_key(659)) IADPointPtr IADDesignSession::GetCameraPosition ( );
__declspec(implementation_key(660)) long IADDesignSession::GetCircularFacets ( );
__declspec(implementation_key(661)) VARIANT_BOOL IADDesignSession::GetIsPerspective ( );
__declspec(implementation_key(662)) IADDesignSelectionFilterPtr IADDesignSession::GetSelectionFilter ( );
__declspec(implementation_key(663)) HRESULT IADDesignSession::ExportBIP ( _bstr_t fileName );
__declspec(implementation_key(664)) HRESULT IADDesignSession::ExportBIP_2 ( _bstr_t fileName, _bstr_t optionFilePath );
__declspec(implementation_key(665)) VARIANT_BOOL IADDesignSession::GetAutoRegenerate ( );
__declspec(implementation_key(666)) void IADDesignSession::PutAutoRegenerate ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(667)) HRESULT IADDesignSession::SetViewTransform ( struct IADTransformation * transform );
__declspec(implementation_key(668)) VARIANT_BOOL IADDesignSession::CheckPrintability ( VARIANT_BOOL bCheckStatus );
__declspec(implementation_key(669)) VARIANT_BOOL IADDesignSession::preparePrintabilityChecking ( );
__declspec(implementation_key(670)) IADPrintabilityCheckResultsPtr IADDesignSession::PrintabilityCheckResults ( );
__declspec(implementation_key(671)) VARIANT_BOOL IADDesignSession::postProcessPrintabilityChecking ( );
__declspec(implementation_key(672)) IADAutoBrepImportSummaryPtr IADDesignSession::GetAutoBrepImportSummary ( );
__declspec(implementation_key(673)) IADDesignMeshesPtr IADDesignSession::GetDesignMeshes ( );
__declspec(implementation_key(674)) IADSketchesPtr IADDesignSession::GetSketches ( );
__declspec(implementation_key(675)) HRESULT IADDesignSession::ExportParasolid ( _bstr_t fileName );
__declspec(implementation_key(676)) HRESULT IADDesignSession::StartChanges ( );
__declspec(implementation_key(677)) HRESULT IADDesignSession::StopChanges ( );
__declspec(implementation_key(678)) HRESULT IADDesignSession::ExportOBJ ( _bstr_t fileName );
__declspec(implementation_key(679)) HRESULT IADDesignSession::ExportAP242 ( _bstr_t fileName );
__declspec(implementation_key(680)) enum ADObjectType IADSavedView::GetType ( );
__declspec(implementation_key(681)) _bstr_t IADSavedView::GetName ( );
__declspec(implementation_key(682)) IADDesignSessionPtr IADSavedView::GetDesignSession ( );
__declspec(implementation_key(683)) IADTransformationPtr IADSavedView::GetOrientation ( );
__declspec(implementation_key(684)) HRESULT IADSavedView::GetExtents ( struct IAD2DPoint * * pUpperLeft, struct IAD2DPoint * * pBottomRight );
__declspec(implementation_key(685)) IADPointPtr IADSavedView::GetCameraPosition ( );
__declspec(implementation_key(686)) IADPointPtr IADSavedView::GetTargetPosition ( );
__declspec(implementation_key(687)) double IADSavedView::GetNearClippingDistanceFromCamera ( );
__declspec(implementation_key(688)) double IADSavedView::GetFarClippingDistanceFromCamera ( );
__declspec(implementation_key(689)) VARIANT_BOOL IADSavedView::GetIsPerspective ( );
__declspec(implementation_key(690)) double IADSavedView::GetOrthographicScaleFactor ( );
__declspec(implementation_key(691)) double IADSavedView::GetFieldOfView ( );
__declspec(implementation_key(692)) IADPointPtr IADSavedView::GetUpVector ( );
__declspec(implementation_key(693)) IEnumVARIANTPtr IADSavedViews::GetEnumerator ( );
__declspec(implementation_key(694)) IADSavedViewPtr IADSavedViews::GetItem ( const _variant_t & index );
__declspec(implementation_key(695)) long IADSavedViews::GetCount ( );
__declspec(implementation_key(696)) DIEnumPtr IADSavedViews::GetEnum ( );
__declspec(implementation_key(697)) enum ADObjectType IADDesignSurface::GetType ( );
__declspec(implementation_key(698)) _bstr_t IADDesignSurface::GetName ( );
__declspec(implementation_key(699)) void IADDesignSurface::PutName ( _bstr_t pRetVal );
__declspec(implementation_key(700)) IADRootPtr IADDesignSurface::GetRoot ( );
__declspec(implementation_key(701)) IADPartSessionPtr IADDesignSurface::GetSession ( );
__declspec(implementation_key(702)) HRESULT IADDesignSurface::Delete ( );
__declspec(implementation_key(703)) IADFacesPtr IADDesignSurface::GetFaces ( );
__declspec(implementation_key(704)) IADEdgesPtr IADDesignSurface::GetEdges ( );
__declspec(implementation_key(705)) IADVerticesPtr IADDesignSurface::GetVertices ( );
__declspec(implementation_key(706)) IADTransformationPtr IADDesignSurface::Gettransform ( );
__declspec(implementation_key(707)) void IADDesignSurface::PutReftransform ( struct IADTransformation * pRetVal );
__declspec(implementation_key(708)) IEnumVARIANTPtr IADDesignSurfaces::GetEnumerator ( );
__declspec(implementation_key(709)) IADDesignSurfacePtr IADDesignSurfaces::GetItem ( const _variant_t & index );
__declspec(implementation_key(710)) long IADDesignSurfaces::GetCount ( );
__declspec(implementation_key(711)) DIEnumPtr IADDesignSurfaces::GetEnum ( );
__declspec(implementation_key(712)) IADPartSessionPtr IADDesignSurfaces::GetSession ( );
__declspec(implementation_key(713)) IObjectCollectorPtr IADDesignSurfaces::InsertFromFile ( _bstr_t fileName, enum ADFaceProcessingType faceProcessingType, VARIANT_BOOL healOption, VARIANT_BOOL makeTolerantOption, enum ADUnits overridingUnit );
__declspec(implementation_key(714)) IADParameterPtr IADDimension::GetParameter ( );
__declspec(implementation_key(715)) enum ADObjectType IADDimension::GetType ( );
__declspec(implementation_key(716)) enum ADDimensionType IADDimension::GetDimensionType ( );
__declspec(implementation_key(717)) IADRootPtr IADDimension::GetRoot ( );
__declspec(implementation_key(718)) IADDesignSessionPtr IADDimension::GetSession ( );
__declspec(implementation_key(719)) IEnumVARIANTPtr IADDimensions::GetEnumerator ( );
__declspec(implementation_key(720)) IADDimensionPtr IADDimensions::GetItem ( long index );
__declspec(implementation_key(721)) long IADDimensions::GetCount ( );
__declspec(implementation_key(722)) DIEnumPtr IADDimensions::GetEnum ( );
__declspec(implementation_key(723)) IADSketchPtr IADDimensions::GetSketch ( );
__declspec(implementation_key(724)) IADDimensionPtr IADDimensions::PlaceLinearDimension ( struct IADSketchLine * pSketchLine, const _variant_t & dimension );
__declspec(implementation_key(725)) IADDimensionPtr IADDimensions::PlaceRadialDimension ( struct IADSketchFigure * pSketchFigure, const _variant_t & dimension );
__declspec(implementation_key(726)) IADDimensionPtr IADDimensions::PlaceDiametricDimension ( struct IADSketchCircle * pSketchCircle, const _variant_t & dimension );
__declspec(implementation_key(727)) IADDimensionPtr IADDimensions::PlaceLinearDimension_2 ( struct IADSketchPoint * pStartSketchPoint, struct IADSketchPoint * pEndSketchPoint, const _variant_t & dimension );
__declspec(implementation_key(728)) IADParameterPtr IADDraftFeature::GetDraftAngleParameter ( );
__declspec(implementation_key(729)) VARIANT_BOOL IADDraftFeature::GetIsOutwardDraft ( );
__declspec(implementation_key(730)) IADTargetProxyPtr IADDraftFeature::GetDraftNeutralPlane ( );
__declspec(implementation_key(731)) IObjectCollectorPtr IADDraftFeature::GetDraftFaces ( );
__declspec(implementation_key(732)) HRESULT IADDrawingSession::ExportSTEP ( _bstr_t fileName );
__declspec(implementation_key(733)) HRESULT IADDrawingSession::ExportDWG ( _bstr_t fileName );
__declspec(implementation_key(734)) HRESULT IADDrawingSession::ExportDXF ( _bstr_t fileName );
__declspec(implementation_key(735)) HRESULT IADDrawingSession::ExportBOM ( _bstr_t fileName );
__declspec(implementation_key(736)) IADDrawingSelectionFilterPtr IADDrawingSession::GetSelectionFilter ( );
__declspec(implementation_key(737)) IADSheetsPtr IADDrawingSession::GetSheets ( );
__declspec(implementation_key(738)) IADDrawingPropertiesPtr IADDrawingSession::GetProperties ( );
__declspec(implementation_key(739)) HRESULT IADDrawingSession::ReprojectViews ( struct IObjectCollector * Views, enum ADDrawingViewType projectViewMode, VARIANT_BOOL retainViewType );
__declspec(implementation_key(740)) HRESULT IADDrawingSession::ExportPDF ( _bstr_t filePath, VARIANT_BOOL append );
__declspec(implementation_key(741)) enum ADObjectType IADDrawingView::GetType ( );
__declspec(implementation_key(742)) _bstr_t IADDrawingView::GetName ( );
__declspec(implementation_key(743)) void IADDrawingView::PutName ( _bstr_t pRetVal );
__declspec(implementation_key(744)) IADRootPtr IADDrawingView::GetRoot ( );
__declspec(implementation_key(745)) IADSheetPtr IADDrawingView::GetSheet ( );
__declspec(implementation_key(746)) HRESULT IADDrawingView::GetExtents ( struct IAD2DPoint * * pLower, struct IAD2DPoint * * pUpper );
__declspec(implementation_key(747)) enum ADDrawingViewType IADDrawingView::GetViewType ( );
__declspec(implementation_key(748)) IEnumVARIANTPtr IADDrawingViews::GetEnumerator ( );
__declspec(implementation_key(749)) IADDrawingViewPtr IADDrawingViews::GetItem ( const _variant_t & index );
__declspec(implementation_key(750)) long IADDrawingViews::GetCount ( );
__declspec(implementation_key(751)) DIEnumPtr IADDrawingViews::GetEnum ( );
__declspec(implementation_key(752)) IADDrawingSessionPtr IADDrawingViews::GetSession ( );
__declspec(implementation_key(753)) enum ADObjectType IADEdge::GetType ( );
__declspec(implementation_key(754)) enum ADTopologyType IADEdge::GetTopologyType ( );
__declspec(implementation_key(755)) IADPartSessionPtr IADEdge::GetPart ( );
__declspec(implementation_key(756)) IADBodyPtr IADEdge::GetBody ( );
__declspec(implementation_key(757)) IADFacesPtr IADEdge::GetFaces ( );
__declspec(implementation_key(758)) IADCoedgePtr IADEdge::Coedge ( struct IADFace * face );
__declspec(implementation_key(759)) IADVertexPtr IADEdge::GetStartVertex ( );
__declspec(implementation_key(760)) IADVertexPtr IADEdge::GetEndVertex ( );
__declspec(implementation_key(761)) SAFEARRAY * IADEdge::GetKey ( );
__declspec(implementation_key(762)) IADCurvePtr IADEdge::GetGeometry ( );
__declspec(implementation_key(763)) HRESULT IADEdge::GetExtents ( struct IADPoint * * ppLower, struct IADPoint * * ppUpper );
__declspec(implementation_key(764)) VARIANT_BOOL IADEdge::GetIsSenseReversed ( );
__declspec(implementation_key(765)) long IADEdge::GetTimeStamp ( );
__declspec(implementation_key(766)) IEnumVARIANTPtr IADEdges::GetEnumerator ( );
__declspec(implementation_key(767)) IADEdgePtr IADEdges::GetItem ( long index );
__declspec(implementation_key(768)) long IADEdges::GetCount ( );
__declspec(implementation_key(769)) DIEnumPtr IADEdges::GetEnum ( );
__declspec(implementation_key(770)) IADPartSessionPtr IADEdges::GetSession ( );
__declspec(implementation_key(771)) HRESULT IADEventsCallback::OnInitialize ( );
__declspec(implementation_key(772)) HRESULT IADEventsCallback::OnTerminate ( );
__declspec(implementation_key(773)) HRESULT IADEventsCallback::OnSessionOpen ( struct IADSession * pSession );
__declspec(implementation_key(774)) HRESULT IADEventsCallback::OnSessionClose ( struct IADSession * pSession );
__declspec(implementation_key(775)) HRESULT IADEventsCallback::OnSessionChange ( struct IADSession * pSession, SAFEARRAY * * pModifiedItems, SAFEARRAY * * changeType );
__declspec(implementation_key(776)) HRESULT IADEventsCallback::OnModelLoadComplete ( struct IADSession * pSession );
__declspec(implementation_key(777)) enum ADObjectType IADExplodedView::GetType ( );
__declspec(implementation_key(778)) _bstr_t IADExplodedView::GetName ( );
__declspec(implementation_key(779)) IADAssemblySessionPtr IADExplodedView::GetSession ( );
__declspec(implementation_key(780)) IADRootPtr IADExplodedView::GetRoot ( );
__declspec(implementation_key(781)) VARIANT_BOOL IADExplodedView::GetIsCurrent ( );
__declspec(implementation_key(782)) IADExplodedViewStepsPtr IADExplodedView::GetExplodedViewSteps ( );
__declspec(implementation_key(783)) _bstr_t IADExplodedView::GetIdentifier ( );
__declspec(implementation_key(784)) IADTransformationPtr IADExplodedView::GetTransformForOccurrence ( struct IADOccurrence * pOccurrence );
__declspec(implementation_key(785)) IEnumVARIANTPtr IADExplodedViews::GetEnumerator ( );
__declspec(implementation_key(786)) IADExplodedViewPtr IADExplodedViews::GetItem ( const _variant_t & index );
__declspec(implementation_key(787)) long IADExplodedViews::GetCount ( );
__declspec(implementation_key(788)) DIEnumPtr IADExplodedViews::GetEnum ( );
__declspec(implementation_key(789)) IADExplodedViewPtr IADExplodedViews::GetCurrentExplodedView ( );
__declspec(implementation_key(790)) enum ADObjectType IADExplodedViewStep::GetType ( );
__declspec(implementation_key(791)) _bstr_t IADExplodedViewStep::GetName ( );
__declspec(implementation_key(792)) IADExplodedViewPtr IADExplodedViewStep::GetExplodedView ( );
__declspec(implementation_key(793)) long IADExplodedViewStep::GetSerialNumber ( );
__declspec(implementation_key(794)) IADOccurrencesPtr IADExplodedViewStep::GetOccurrences ( );
__declspec(implementation_key(795)) IObjectCollectorPtr IADExplodedViewStep::SegmentTransformations ( struct IADOccurrence * Occurrence );
__declspec(implementation_key(796)) long IADExplodedViewStep::SegmentCount ( struct IADOccurrence * Occurrence );
__declspec(implementation_key(797)) _bstr_t IADExplodedViewStep::GetDescription ( );
__declspec(implementation_key(798)) IADTransformationPtr IADExplodedViewStep::InitialTransform ( struct IADOccurrence * pOccurrence );
__declspec(implementation_key(799)) _bstr_t IADExplodedViewStep::SegmentMemberName ( struct IADOccurrence * Occurrence );
__declspec(implementation_key(800)) IEnumVARIANTPtr IADExplodedViewSteps::GetEnumerator ( );
__declspec(implementation_key(801)) IADExplodedViewStepPtr IADExplodedViewSteps::GetItem ( const _variant_t & index );
__declspec(implementation_key(802)) long IADExplodedViewSteps::GetCount ( );
__declspec(implementation_key(803)) DIEnumPtr IADExplodedViewSteps::GetEnum ( );
__declspec(implementation_key(804)) double IADExternalThreadFeature::GetMajorDiameter ( );
__declspec(implementation_key(805)) IADParameterPtr IADExternalThreadFeature::GetMinorDiameter ( );
__declspec(implementation_key(806)) IADParameterPtr IADExternalThreadFeature::GetThreadLength ( );
__declspec(implementation_key(807)) VARIANT_BOOL IADExternalThreadFeature::GetHasEdgeChamfer ( );
__declspec(implementation_key(808)) _bstr_t IADExternalThreadFeature::GetCallout ( );
__declspec(implementation_key(809)) _bstr_t IADExternalThreadFeature::GetCalloutRTF ( );
__declspec(implementation_key(810)) VARIANT_BOOL IADExtrusionFeature::GetIsCutout ( );
__declspec(implementation_key(811)) IADSketchPtr IADExtrusionFeature::GetSketch ( );
__declspec(implementation_key(812)) IADParameterPtr IADExtrusionFeature::GetDepthParameter ( );
__declspec(implementation_key(813)) IADParameterPtr IADExtrusionFeature::GetDraftParameter ( );
__declspec(implementation_key(814)) VARIANT_BOOL IADExtrusionFeature::GetIsOutwardDraft ( );
__declspec(implementation_key(815)) void IADExtrusionFeature::PutIsOutwardDraft ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(816)) IADTargetProxyPtr IADExtrusionFeature::GetEndCondition ( );
__declspec(implementation_key(817)) enum ADPartFeatureEndCondition IADExtrusionFeature::GetEndConditionType ( );
__declspec(implementation_key(818)) IADTargetProxyPtr IADExtrusionFeature::GetDirection ( );
__declspec(implementation_key(819)) IADVectorPtr IADExtrusionFeature::GetDirectionVector ( );
__declspec(implementation_key(820)) VARIANT_BOOL IADExtrusionFeature::GetIsDirectionReversed ( );
__declspec(implementation_key(821)) enum ADDirectionType IADExtrusionFeature::GetDirectionType ( );
__declspec(implementation_key(822)) double IADExtrusionFeature::GetToGeometryOffset ( );
__declspec(implementation_key(823)) enum ADObjectType IADFace::GetType ( );
__declspec(implementation_key(824)) enum ADTopologyType IADFace::GetTopologyType ( );
__declspec(implementation_key(825)) IADPartSessionPtr IADFace::GetPart ( );
__declspec(implementation_key(826)) IADBodyPtr IADFace::GetBody ( );
__declspec(implementation_key(827)) IADShellPtr IADFace::GetShell ( );
__declspec(implementation_key(828)) IADLoopsPtr IADFace::GetLoops ( );
__declspec(implementation_key(829)) IADEdgesPtr IADFace::GetEdges ( );
__declspec(implementation_key(830)) IADVerticesPtr IADFace::GetVertices ( );
__declspec(implementation_key(831)) SAFEARRAY * IADFace::GetKey ( );
__declspec(implementation_key(832)) IADSurfacePtr IADFace::GetGeometry ( );
__declspec(implementation_key(833)) HRESULT IADFace::GetExtents ( struct IADPoint * * ppLower, struct IADPoint * * ppUpper );
__declspec(implementation_key(834)) VARIANT_BOOL IADFace::GetIsSenseReversed ( );
__declspec(implementation_key(835)) enum ADEntityPointRelation IADFace::PointOnFace ( struct IADPoint * pPoint );
__declspec(implementation_key(836)) SAFEARRAY * IADFace::FacetData ( double surfaceTol );
__declspec(implementation_key(837)) long IADFace::GetTimeStamp ( );
__declspec(implementation_key(838)) SAFEARRAY * IADFace::FacetDataEx ( double surfaceTol, double normalTol, double maxEdgeLength );
__declspec(implementation_key(839)) HRESULT IADFace::GetBSplineCurvesData ( SAFEARRAY * * surfaceOrderUVArray, SAFEARRAY * * surfaceInfoArray, SAFEARRAY * * surfaceNumControlPointsUV, SAFEARRAY * * surfaceNoOfKnotsUV, SAFEARRAY * * surfaceControlPoints, SAFEARRAY * * surfaceWeights, SAFEARRAY * * surfaceKnotVectorU, SAFEARRAY * * surfaceKnotVectorV, SAFEARRAY * * regionInfoForLoopsArray, SAFEARRAY * * noOfTrimmedCurvesForLoopsArray, SAFEARRAY * * noOfControlPointsArray, SAFEARRAY * * noOfKnotsArray, SAFEARRAY * * surfaceIndicesArray, SAFEARRAY * * controlPointsArray, SAFEARRAY * * knotsArray, SAFEARRAY * * weightsArray );
__declspec(implementation_key(840)) HRESULT IADFace::GetMeshData ( double surfaceTol, double normalTol, double maxEdgeLength, SAFEARRAY * * faceArray, SAFEARRAY * * normalArray, SAFEARRAY * * vertexArray );
__declspec(implementation_key(841)) long IADFace::GetColor ( );
__declspec(implementation_key(842)) long IADFace::GetColorForConfiguration ( struct IADConfiguration * pConfiguration );
__declspec(implementation_key(843)) _bstr_t IADFace::GetAppearanceID ( );
__declspec(implementation_key(844)) HRESULT IADFace::GetAlibreMeshData ( SAFEARRAY * * faceArray, SAFEARRAY * * normalArray, SAFEARRAY * * vertexArray );
__declspec(implementation_key(845)) IEnumVARIANTPtr IADFaces::GetEnumerator ( );
__declspec(implementation_key(846)) IADFacePtr IADFaces::GetItem ( long index );
__declspec(implementation_key(847)) long IADFaces::GetCount ( );
__declspec(implementation_key(848)) DIEnumPtr IADFaces::GetEnum ( );
__declspec(implementation_key(849)) IADPartSessionPtr IADFaces::GetSession ( );
__declspec(implementation_key(850)) IADParameterPtr IADFastenerConstraint::GetOffset ( );
__declspec(implementation_key(851)) IADParameterPtr IADFastenerConstraint::GetMaximumOffset ( );
__declspec(implementation_key(852)) IADParameterPtr IADFastenerConstraint::GetMinimumOffset ( );
__declspec(implementation_key(853)) IObjectCollectorPtr IADFilletFeature::GetEdgesOrFaces ( );
__declspec(implementation_key(854)) VARIANT_BOOL IADFilletFeature::GetIsConstantRadius ( );
__declspec(implementation_key(855)) IADParameterPtr IADFilletFeature::GetConstantRadius ( );
__declspec(implementation_key(856)) IObjectCollectorPtr IADFilletFeature::GetStartRadiusParams ( );
__declspec(implementation_key(857)) IObjectCollectorPtr IADFilletFeature::GetEndRadiusParams ( );
__declspec(implementation_key(858)) VARIANT_BOOL IADFilletFeature::GetTangentPropagate ( );
__declspec(implementation_key(859)) enum ADObjectType IADFolder::GetType ( );
__declspec(implementation_key(860)) _bstr_t IADFolder::GetName ( );
__declspec(implementation_key(861)) _bstr_t IADFolder::GetReference ( );
__declspec(implementation_key(862)) IADFoldersPtr IADFolder::GetSubFolders ( );
__declspec(implementation_key(863)) IADFolderItemsPtr IADFolder::GetFolderItems ( );
__declspec(implementation_key(864)) IADFolderPtr IADFolder::GetParentFolder ( );
__declspec(implementation_key(865)) IADRepositoryPtr IADFolder::GetRepository ( );
__declspec(implementation_key(866)) IADRootPtr IADFolder::GetRoot ( );
__declspec(implementation_key(867)) VARIANT_BOOL IADFolder::IsRecycleBin ( );
__declspec(implementation_key(868)) HRESULT IADFolder::Deposit ( _bstr_t fileName, VARIANT_BOOL checkInFlag );
__declspec(implementation_key(869)) IADFolderPtr IADFolder::Copy ( struct IADFolder * pDestination, _bstr_t newName );
__declspec(implementation_key(870)) IADFolderPtr IADFolder::Move ( struct IADFolder * pDestination, _bstr_t newName );
__declspec(implementation_key(871)) HRESULT IADFolder::Rename ( _bstr_t folderName );
__declspec(implementation_key(872)) HRESULT IADFolder::Delete ( );
__declspec(implementation_key(873)) IADFolderPtr IADFolder::CreateSubFolder ( _bstr_t folderName );
__declspec(implementation_key(874)) HRESULT IADFolder::setPermission ( enum ADSecureObjectType secureObjectType, struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles, struct IPermissionSelector * pPermissions, VARIANT_BOOL applyToAllSubFolders, VARIANT_BOOL applyToAllItems, VARIANT_BOOL publishingRepository );
__declspec(implementation_key(875)) HRESULT IADFolder::setNotification ( enum ADSecureObjectType secureObjectType, struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles, struct INotificationSelector * pNotification, VARIANT_BOOL applyToAllSubFolders, VARIANT_BOOL applyToAllItems );
__declspec(implementation_key(876)) HRESULT IADFolder::ClearPermission ( enum ADSecureObjectType secureObjectType, struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles, VARIANT_BOOL applyToAllSubFolders, VARIANT_BOOL applyToAllItems, VARIANT_BOOL unPublishingRepository );
__declspec(implementation_key(877)) HRESULT IADFolder::ClearPermissionToAll ( enum ADSecureObjectType secureObjectType, VARIANT_BOOL applyToAllSubFolders, VARIANT_BOOL applyToAllItems, VARIANT_BOOL unPublishingRepository );
__declspec(implementation_key(878)) HRESULT IADFolder::ClearNotification ( enum ADSecureObjectType secureObjectType, struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles, VARIANT_BOOL applyToAllSubFolders, VARIANT_BOOL applyToAllItems );
__declspec(implementation_key(879)) HRESULT IADFolder::ClearNotificationToAll ( enum ADSecureObjectType secureObjectType, VARIANT_BOOL applyToAllSubFolders, VARIANT_BOOL applyToAllItems );
__declspec(implementation_key(880)) VARIANT_BOOL IADFolder::IsAccessibleToTeam ( struct IADTeam * pTeam, struct IPermissionSelector * * ppPermissions, struct INotificationSelector * * ppNotifications );
__declspec(implementation_key(881)) VARIANT_BOOL IADFolder::IsAccessibleToUser ( struct IADUser * pUser, struct IPermissionSelector * * ppPermissions, struct INotificationSelector * * ppNotifications );
__declspec(implementation_key(882)) VARIANT_BOOL IADFolder::IsAccessibleToRole ( struct IADTeamRole * pRole, struct IPermissionSelector * * ppPermissions, struct INotificationSelector * * ppNotifications );
__declspec(implementation_key(883)) IEnumVARIANTPtr IADFolders::GetEnumerator ( );
__declspec(implementation_key(884)) IADFolderPtr IADFolders::GetItem ( const _variant_t & index );
__declspec(implementation_key(885)) long IADFolders::GetCount ( );
__declspec(implementation_key(886)) DIEnumPtr IADFolders::GetEnum ( );
__declspec(implementation_key(887)) enum ADObjectType IADFolderItem::GetType ( );
__declspec(implementation_key(888)) _bstr_t IADFolderItem::GetName ( );
__declspec(implementation_key(889)) enum ADObjectSubType IADFolderItem::GetItemType ( );
__declspec(implementation_key(890)) _bstr_t IADFolderItem::GetReference ( );
__declspec(implementation_key(891)) IADFolderPtr IADFolderItem::GetParentFolder ( );
__declspec(implementation_key(892)) IADRepositoryPtr IADFolderItem::GetRepository ( );
__declspec(implementation_key(893)) IADRootPtr IADFolderItem::GetRoot ( );
__declspec(implementation_key(894)) long IADFolderItem::GetCurrentVersionID ( );
__declspec(implementation_key(895)) HRESULT IADFolderItem::Withdraw ( _bstr_t destPath, VARIANT_BOOL checkOutFlag );
__declspec(implementation_key(896)) HRESULT IADFolderItem::CheckOut ( );
__declspec(implementation_key(897)) HRESULT IADFolderItem::CheckIn ( _bstr_t comment );
__declspec(implementation_key(898)) VARIANT_BOOL IADFolderItem::IsCheckedIn ( );
__declspec(implementation_key(899)) HRESULT IADFolderItem::UndoCheckOut ( );
__declspec(implementation_key(900)) IADFolderItemPtr IADFolderItem::Copy ( struct IADFolder * pDestination, _bstr_t newName );
__declspec(implementation_key(901)) IADFolderItemPtr IADFolderItem::Move ( struct IADFolder * pDestination, _bstr_t newName );
__declspec(implementation_key(902)) HRESULT IADFolderItem::Rename ( _bstr_t newName );
__declspec(implementation_key(903)) HRESULT IADFolderItem::Delete ( );
__declspec(implementation_key(904)) IADFolderItemsPtr IADFolderItem::EnumConstituents ( );
__declspec(implementation_key(905)) HRESULT IADFolderItem::Label ( _bstr_t Label );
__declspec(implementation_key(906)) HRESULT IADFolderItem::Share ( struct IADFolder * pDestination, _bstr_t newName );
__declspec(implementation_key(907)) HRESULT IADFolderItem::AddNote ( _bstr_t subject, _bstr_t noteDescription );
__declspec(implementation_key(908)) IADSessionPtr IADFolderItem::Open ( );
__declspec(implementation_key(909)) HRESULT IADFolderItem::setPermission ( struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles, struct IPermissionSelector * pPermission, VARIANT_BOOL publishingRepository );
__declspec(implementation_key(910)) HRESULT IADFolderItem::setNotification ( struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles, struct INotificationSelector * pNotification );
__declspec(implementation_key(911)) HRESULT IADFolderItem::ClearPermission ( struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles, VARIANT_BOOL unPublishingRepository );
__declspec(implementation_key(912)) HRESULT IADFolderItem::ClearPermissionToAll ( VARIANT_BOOL unPublishingRepository );
__declspec(implementation_key(913)) HRESULT IADFolderItem::ClearNotification ( struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles );
__declspec(implementation_key(914)) HRESULT IADFolderItem::ClearNotificationToAll ( );
__declspec(implementation_key(915)) VARIANT_BOOL IADFolderItem::IsAccessibleToTeam ( struct IADTeam * pTeam, struct IPermissionSelector * * ppPermissions, struct INotificationSelector * * ppNotifications );
__declspec(implementation_key(916)) VARIANT_BOOL IADFolderItem::IsAccessibleToUser ( struct IADUser * pUser, struct IPermissionSelector * * ppPermissions, struct INotificationSelector * * ppNotifications );
__declspec(implementation_key(917)) VARIANT_BOOL IADFolderItem::IsAccessibleToRole ( struct IADTeamRole * pRole, struct IPermissionSelector * * ppPermissions, struct INotificationSelector * * ppNotifications );
__declspec(implementation_key(918)) IEnumVARIANTPtr IADFolderItems::GetEnumerator ( );
__declspec(implementation_key(919)) IADFolderItemPtr IADFolderItems::GetItem ( const _variant_t & index );
__declspec(implementation_key(920)) long IADFolderItems::GetCount ( );
__declspec(implementation_key(921)) DIEnumPtr IADFolderItems::GetEnum ( );
__declspec(implementation_key(922)) IADParameterPtr IADGearConstraint::GetRatio1 ( );
__declspec(implementation_key(923)) IADParameterPtr IADGearConstraint::GetRatio2 ( );
__declspec(implementation_key(924)) VARIANT_BOOL IADHelicalFeature::GetIsCutout ( );
__declspec(implementation_key(925)) IADSketchPtr IADHelicalFeature::GetSketch ( );
__declspec(implementation_key(926)) IADSketchLinePtr IADHelicalFeature::GetAxis ( );
__declspec(implementation_key(927)) VARIANT_BOOL IADHelicalFeature::GetIsClockwise ( );
__declspec(implementation_key(928)) VARIANT_BOOL IADHelicalFeature::GetIsReverse ( );
__declspec(implementation_key(929)) VARIANT_BOOL IADHelicalFeature::GetIsParallelOriented ( );
__declspec(implementation_key(930)) IADParameterPtr IADHelicalFeature::GetHeight ( );
__declspec(implementation_key(931)) IADParameterPtr IADHelicalFeature::GetPitch ( );
__declspec(implementation_key(932)) IADParameterPtr IADHelicalFeature::GetRevolutions ( );
__declspec(implementation_key(933)) IADParameterPtr IADHelicalFeature::GetPitchRatio ( );
__declspec(implementation_key(934)) IADParameterPtr IADHelicalFeature::GetPitchEnd ( );
__declspec(implementation_key(935)) IADParameterPtr IADHelicalFeature::GetTaper ( );
__declspec(implementation_key(936)) IADParameterPtr IADHelicalFeature::GetStartTransitionAngle ( );
__declspec(implementation_key(937)) IADParameterPtr IADHelicalFeature::GetEndTransitionAngle ( );
__declspec(implementation_key(938)) IADParameterPtr IADHelicalFeature::GetStartFlatAngle ( );
__declspec(implementation_key(939)) IADParameterPtr IADHelicalFeature::GetEndFlatAngle ( );
__declspec(implementation_key(940)) enum ADHelixType IADHelicalFeature::GetHelixType ( );
__declspec(implementation_key(941)) enum ADPitchType IADHelicalFeature::GetPitchType ( );
__declspec(implementation_key(942)) enum ADHelixConditionType IADHelicalFeature::GetStartConditionType ( );
__declspec(implementation_key(943)) enum ADHelixConditionType IADHelicalFeature::GetEndConditionType ( );
__declspec(implementation_key(944)) enum ADHoleType IADHoleFeature::GetHoleType ( );
__declspec(implementation_key(945)) enum ADHoleDepthCondition IADHoleFeature::GetDepthConditionType ( );
__declspec(implementation_key(946)) IDispatchPtr IADHoleFeature::GetStartPlane ( );
__declspec(implementation_key(947)) long IADHoleFeature::GetNumberOfHoles ( );
__declspec(implementation_key(948)) SAFEARRAY * IADHoleFeature::GetStartPoints ( );
__declspec(implementation_key(949)) double IADHoleFeature::GetDiameter ( );
__declspec(implementation_key(950)) double IADHoleFeature::GetDepth ( );
__declspec(implementation_key(951)) double IADHoleFeature::GetCounterBoreDiameter ( );
__declspec(implementation_key(952)) double IADHoleFeature::GetCounterBoreDepth ( );
__declspec(implementation_key(953)) double IADHoleFeature::GetDrillAngle ( );
__declspec(implementation_key(954)) double IADHoleFeature::GetCounterDrillDiameter ( );
__declspec(implementation_key(955)) double IADHoleFeature::GetCounterDrillDepth ( );
__declspec(implementation_key(956)) double IADHoleFeature::GetCounterDrillAngle ( );
__declspec(implementation_key(957)) double IADHoleFeature::GetCounterSinkDiameter ( );
__declspec(implementation_key(958)) double IADHoleFeature::GetCounterSinkAngle ( );
__declspec(implementation_key(959)) double IADHoleFeature::GetMajorDiameter ( );
__declspec(implementation_key(960)) double IADHoleFeature::GetMinorDiameter ( );
__declspec(implementation_key(961)) IADFacePtr IADHoleFeature::GetLimitingGeometry ( );
__declspec(implementation_key(962)) double IADHoleFeature::GetOffsetFromLimitingGeometry ( );
__declspec(implementation_key(963)) VARIANT_BOOL IADHoleFeature::GetHasThread ( );
__declspec(implementation_key(964)) IADTappedThreadInfoPtr IADHoleFeature::GetTappedThread ( );
__declspec(implementation_key(965)) IADSketchPtr IADHoleFeature::GetSketch ( );
__declspec(implementation_key(966)) IADOccurrencePtr IADInterference::GetPart1 ( );
__declspec(implementation_key(967)) IADOccurrencePtr IADInterference::GetPart2 ( );
__declspec(implementation_key(968)) double IADInterference::GetInterferenceVolume ( );
__declspec(implementation_key(969)) HRESULT IADInterference::GetExtents ( struct IADPoint * * ppLower, struct IADPoint * * ppUpper );
__declspec(implementation_key(970)) IEnumVARIANTPtr IADInterferences::GetEnumerator ( );
__declspec(implementation_key(971)) long IADInterferences::GetCount ( );
__declspec(implementation_key(972)) IADInterferencePtr IADInterferences::GetItem ( long index );
__declspec(implementation_key(973)) DIEnumPtr IADInterferences::GetEnum ( );
__declspec(implementation_key(974)) IEnumVARIANTPtr IADMaterialLibraries::GetEnumerator ( );
__declspec(implementation_key(975)) IADMaterialLibraryPtr IADMaterialLibraries::GetItem ( const _variant_t & index );
__declspec(implementation_key(976)) long IADMaterialLibraries::GetCount ( );
__declspec(implementation_key(977)) DIEnumPtr IADMaterialLibraries::GetEnum ( );
__declspec(implementation_key(978)) enum ADObjectType IADMaterialLibrary::GetType ( );
__declspec(implementation_key(979)) IADRootPtr IADMaterialLibrary::GetRoot ( );
__declspec(implementation_key(980)) _bstr_t IADMaterialLibrary::GetName ( );
__declspec(implementation_key(981)) IADMaterialLibraryFoldersPtr IADMaterialLibrary::GetFolders ( );
__declspec(implementation_key(982)) IADMaterialLibraryFolderPtr IADMaterialLibrary::createFolder ( _bstr_t folderName );
__declspec(implementation_key(983)) IADMaterialPtr IADMaterialLibrary::createMaterial ( _bstr_t materialName );
__declspec(implementation_key(984)) IADMaterialsPtr IADMaterialLibrary::GetMaterials ( );
__declspec(implementation_key(985)) enum ADObjectType IADMaterialLibraryFolder::GetType ( );
__declspec(implementation_key(986)) IADRootPtr IADMaterialLibraryFolder::GetRoot ( );
__declspec(implementation_key(987)) _bstr_t IADMaterialLibraryFolder::GetName ( );
__declspec(implementation_key(988)) IADMaterialsPtr IADMaterialLibraryFolder::GetMaterials ( );
__declspec(implementation_key(989)) IADMaterialLibraryFolderPtr IADMaterialLibraryFolder::CreateSubFolder ( _bstr_t folderName );
__declspec(implementation_key(990)) IADMaterialPtr IADMaterialLibraryFolder::createMaterial ( _bstr_t materialName );
__declspec(implementation_key(991)) IADMaterialLibraryFoldersPtr IADMaterialLibraryFolder::GetSubFolders ( );
__declspec(implementation_key(992)) IEnumVARIANTPtr IADMaterialLibraryFolders::GetEnumerator ( );
__declspec(implementation_key(993)) IADMaterialLibraryFolderPtr IADMaterialLibraryFolders::GetItem ( const _variant_t & index );
__declspec(implementation_key(994)) long IADMaterialLibraryFolders::GetCount ( );
__declspec(implementation_key(995)) DIEnumPtr IADMaterialLibraryFolders::GetEnum ( );
__declspec(implementation_key(996)) enum ADObjectType IADLoop::GetType ( );
__declspec(implementation_key(997)) enum ADTopologyType IADLoop::GetTopologyType ( );
__declspec(implementation_key(998)) IADPartSessionPtr IADLoop::GetPart ( );
__declspec(implementation_key(999)) IADBodyPtr IADLoop::GetBody ( );
__declspec(implementation_key(1000)) IADFacePtr IADLoop::Getface ( );
__declspec(implementation_key(1001)) IADEdgesPtr IADLoop::GetEdges ( );
__declspec(implementation_key(1002)) IADCoedgesPtr IADLoop::GetCoedges ( );
__declspec(implementation_key(1003)) VARIANT_BOOL IADLoop::GetIsOuter ( );
__declspec(implementation_key(1004)) IEnumVARIANTPtr IADLoops::GetEnumerator ( );
__declspec(implementation_key(1005)) IADLoopPtr IADLoops::GetItem ( long index );
__declspec(implementation_key(1006)) long IADLoops::GetCount ( );
__declspec(implementation_key(1007)) DIEnumPtr IADLoops::GetEnum ( );
__declspec(implementation_key(1008)) IADPartSessionPtr IADLoops::GetSession ( );
__declspec(implementation_key(1009)) enum ADObjectType IADLump::GetType ( );
__declspec(implementation_key(1010)) enum ADTopologyType IADLump::GetTopologyType ( );
__declspec(implementation_key(1011)) IADPartSessionPtr IADLump::GetPart ( );
__declspec(implementation_key(1012)) IADBodyPtr IADLump::GetBody ( );
__declspec(implementation_key(1013)) IADShellsPtr IADLump::GetShells ( );
__declspec(implementation_key(1014)) IADFacesPtr IADLump::GetFaces ( );
__declspec(implementation_key(1015)) IADEdgesPtr IADLump::GetEdges ( );
__declspec(implementation_key(1016)) IEnumVARIANTPtr IADLumps::GetEnumerator ( );
__declspec(implementation_key(1017)) IADLumpPtr IADLumps::GetItem ( long index );
__declspec(implementation_key(1018)) long IADLumps::GetCount ( );
__declspec(implementation_key(1019)) DIEnumPtr IADLumps::GetEnum ( );
__declspec(implementation_key(1020)) IADPartSessionPtr IADLumps::GetSession ( );
__declspec(implementation_key(1021)) IADParameterPtr IADMateConstraint::GetOffset ( );
__declspec(implementation_key(1022)) IADParameterPtr IADMateConstraint::GetMaximumOffset ( );
__declspec(implementation_key(1023)) IADParameterPtr IADMateConstraint::GetMinimumOffset ( );
__declspec(implementation_key(1024)) enum ADObjectType IADMaterial::GetType ( );
__declspec(implementation_key(1025)) IADRootPtr IADMaterial::GetRoot ( );
__declspec(implementation_key(1026)) _bstr_t IADMaterial::GetName ( );
__declspec(implementation_key(1027)) double IADMaterial::GetDensity ( );
__declspec(implementation_key(1028)) double IADMaterial::getMaterialPropertyValue ( enum ADMaterialPropertyKey materialAPIPropertyKey );
__declspec(implementation_key(1029)) IEnumVARIANTPtr IADMaterials::GetEnumerator ( );
__declspec(implementation_key(1030)) IADMaterialPtr IADMaterials::GetItem ( const _variant_t & index );
__declspec(implementation_key(1031)) long IADMaterials::GetCount ( );
__declspec(implementation_key(1032)) DIEnumPtr IADMaterials::GetEnum ( );
__declspec(implementation_key(1033)) enum ADObjectType IADOccurrence::GetType ( );
__declspec(implementation_key(1034)) _bstr_t IADOccurrence::GetName ( );
__declspec(implementation_key(1035)) long IADOccurrence::GetColor ( );
__declspec(implementation_key(1036)) void IADOccurrence::PutColor ( long pRetVal );
__declspec(implementation_key(1037)) long IADOccurrence::GetTransparency ( );
__declspec(implementation_key(1038)) void IADOccurrence::PutTransparency ( long pRetVal );
__declspec(implementation_key(1039)) long IADOccurrence::GetReflectivity ( );
__declspec(implementation_key(1040)) void IADOccurrence::PutReflectivity ( long pRetVal );
__declspec(implementation_key(1041)) IADAssemblyPathPtr IADOccurrence::GetPath ( );
__declspec(implementation_key(1042)) IADOccurrencesPtr IADOccurrence::GetOccurrences ( );
__declspec(implementation_key(1043)) IADOccurrencePtr IADOccurrence::GetParentOccurrence ( );
__declspec(implementation_key(1044)) long IADOccurrence::GetNestLevel ( );
__declspec(implementation_key(1045)) long IADOccurrence::GetTotalLeafNodes ( );
__declspec(implementation_key(1046)) IADTransformationPtr IADOccurrence::GetWorldTransform ( );
__declspec(implementation_key(1047)) IADTransformationPtr IADOccurrence::GetLocalTransform ( );
__declspec(implementation_key(1048)) HRESULT IADOccurrence::ApplyTransform ( struct IADTransformation * pTransform );
__declspec(implementation_key(1049)) IADOccurrencePtr IADOccurrence::GetRootOccurrence ( );
__declspec(implementation_key(1050)) IADDesignSessionPtr IADOccurrence::GetDesignSession ( );
__declspec(implementation_key(1051)) VARIANT_BOOL IADOccurrence::GetIsAnchored ( );
__declspec(implementation_key(1052)) void IADOccurrence::PutIsAnchored ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1053)) VARIANT_BOOL IADOccurrence::GetIsHidden ( );
__declspec(implementation_key(1054)) void IADOccurrence::PutIsHidden ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1055)) HRESULT IADOccurrence::GetExtents ( struct IADPoint * * ppLower, struct IADPoint * * ppUpper );
__declspec(implementation_key(1056)) SAFEARRAY * IADOccurrence::GetKey ( );
__declspec(implementation_key(1057)) IADAssemblySessionPtr IADOccurrence::GetParentAssemblySession ( );
__declspec(implementation_key(1058)) IADAssemblySessionPtr IADOccurrence::GetRootAssemblySession ( );
__declspec(implementation_key(1059)) VARIANT_BOOL IADOccurrence::GetIsFlexible ( );
__declspec(implementation_key(1060)) void IADOccurrence::PutIsFlexible ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1061)) VARIANT_BOOL IADOccurrence::GetIsSuppressed ( );
__declspec(implementation_key(1062)) void IADOccurrence::PutIsSuppressed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1063)) IADConfigurationPtr IADOccurrence::GetConfiguration ( );
__declspec(implementation_key(1064)) void IADOccurrence::PutRefConfiguration ( struct IADConfiguration * pRetVal );
__declspec(implementation_key(1065)) HRESULT IADOccurrence::GetMeshDefinitionForSectionView ( long * faceDataSize, long * vertexDataSize );
__declspec(implementation_key(1066)) HRESULT IADOccurrence::GetMeshDataForSectionView ( SAFEARRAY * * faceData, SAFEARRAY * * vertexData );
__declspec(implementation_key(1067)) HRESULT IADOccurrence::GetMeshDefinitionForSectionViewEx ( long minCircularFacets, long * faceDataSize, long * vertexDataSize, long * normalDataSize );
__declspec(implementation_key(1068)) HRESULT IADOccurrence::GetMeshDataForSectionViewEx ( SAFEARRAY * * faceData, SAFEARRAY * * vertexData, SAFEARRAY * * normalData );
__declspec(implementation_key(1069)) IADBodyPtr IADOccurrence::GetSectionBody ( );
__declspec(implementation_key(1070)) VARIANT_BOOL IADOccurrence::GetShowFeatureColor ( );
__declspec(implementation_key(1071)) IEnumVARIANTPtr IADOccurrences::GetEnumerator ( );
__declspec(implementation_key(1072)) IADOccurrencePtr IADOccurrences::GetItem ( const _variant_t & index );
__declspec(implementation_key(1073)) long IADOccurrences::GetCount ( );
__declspec(implementation_key(1074)) DIEnumPtr IADOccurrences::GetEnum ( );
__declspec(implementation_key(1075)) IADOccurrencePtr IADOccurrences::AddEmptyPart ( _bstr_t Name, VARIANT_BOOL isSheetMetal, struct IADTransformation * pTransform );
__declspec(implementation_key(1076)) IADOccurrencePtr IADOccurrences::AddEmptyAssembly ( _bstr_t Name, struct IADTransformation * pTransform );
__declspec(implementation_key(1077)) IADOccurrencePtr IADOccurrences::Add ( VARIANT * designObject, struct IADTransformation * pTransform );
__declspec(implementation_key(1078)) IADOccurrencePtr IADTargetProxy::GetOccurrence ( );
__declspec(implementation_key(1079)) IDispatchPtr IADTargetProxy::GetTarget ( );
__declspec(implementation_key(1080)) _bstr_t IADTargetProxy::GetDisplayName ( );
__declspec(implementation_key(1081)) IObjectCollectorPtr IADOffsetFaceFeature::GetOffsetFaces ( );
__declspec(implementation_key(1082)) IADParameterPtr IADOffsetFaceFeature::GetOffsetParameter ( );
__declspec(implementation_key(1083)) enum ADObjectType IADParameter::GetType ( );
__declspec(implementation_key(1084)) enum ADParameterType IADParameter::GetParameterType ( );
__declspec(implementation_key(1085)) IADRootPtr IADParameter::GetRoot ( );
__declspec(implementation_key(1086)) _bstr_t IADParameter::GetName ( );
__declspec(implementation_key(1087)) void IADParameter::PutName ( _bstr_t pRetVal );
__declspec(implementation_key(1088)) double IADParameter::GetValue ( );
__declspec(implementation_key(1089)) void IADParameter::PutValue ( double pRetVal );
__declspec(implementation_key(1090)) _bstr_t IADParameter::GetEquation ( );
__declspec(implementation_key(1091)) void IADParameter::PutEquation ( _bstr_t pRetVal );
__declspec(implementation_key(1092)) VARIANT_BOOL IADParameter::GetExternallyDriven ( );
__declspec(implementation_key(1093)) void IADParameter::PutExternallyDriven ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1094)) enum ADUnits IADParameter::GetUnits ( );
__declspec(implementation_key(1095)) void IADParameter::PutUnits ( enum ADUnits pRetVal );
__declspec(implementation_key(1096)) _bstr_t IADParameter::Getcomment ( );
__declspec(implementation_key(1097)) void IADParameter::Putcomment ( _bstr_t pRetVal );
__declspec(implementation_key(1098)) _bstr_t IADParameter::GetSourceDocumentID ( );
__declspec(implementation_key(1099)) void IADParameter::PutSourceDocumentID ( _bstr_t pRetVal );
__declspec(implementation_key(1100)) _bstr_t IADParameter::GetSourceItemID ( );
__declspec(implementation_key(1101)) void IADParameter::PutSourceItemID ( _bstr_t pRetVal );
__declspec(implementation_key(1102)) HRESULT IADParameter::Remove ( );
__declspec(implementation_key(1103)) VARIANT_BOOL IADParameter::GetIsMissingGlobal ( );
__declspec(implementation_key(1104)) VARIANT_BOOL IADParameter::GetIsConflictingGlobal ( );
__declspec(implementation_key(1105)) IEnumVARIANTPtr IADParameters::GetEnumerator ( );
__declspec(implementation_key(1106)) IADParameterPtr IADParameters::GetItem ( const _variant_t & index );
__declspec(implementation_key(1107)) long IADParameters::GetCount ( );
__declspec(implementation_key(1108)) DIEnumPtr IADParameters::GetEnum ( );
__declspec(implementation_key(1109)) IADParameterPtr IADParameters::NewParameter ( _bstr_t Name, enum ADParameterType Type );
__declspec(implementation_key(1110)) HRESULT IADParameters::OpenParameterTransaction ( );
__declspec(implementation_key(1111)) HRESULT IADParameters::CloseParameterTransaction ( );
__declspec(implementation_key(1112)) HRESULT IADParameters::CancelParameterTransaction ( );
__declspec(implementation_key(1113)) IADParameterPtr IADRackConstraint::GetPinionRadius ( );
__declspec(implementation_key(1114)) VARIANT_BOOL IADScaleFeature::GetscaleAboutCenteroid ( );
__declspec(implementation_key(1115)) VARIANT_BOOL IADScaleFeature::GetIsUniformScaling ( );
__declspec(implementation_key(1116)) IADParameterPtr IADScaleFeature::GetuniformScaleFactor ( );
__declspec(implementation_key(1117)) IADParameterPtr IADScaleFeature::GetUniformScaleFactorX ( );
__declspec(implementation_key(1118)) IADParameterPtr IADScaleFeature::GetUniformScaleFactorY ( );
__declspec(implementation_key(1119)) IADParameterPtr IADScaleFeature::GetUniformScaleFactorZ ( );
__declspec(implementation_key(1120)) IADParameterPtr IADScrewConstraint::GetPitch ( );
__declspec(implementation_key(1121)) IObjectCollectorPtr IADShellFeature::GetRemovedFaces ( );
__declspec(implementation_key(1122)) IObjectCollectorPtr IADShellFeature::GetMultiThicknessFaces ( );
__declspec(implementation_key(1123)) IADParameterPtr IADShellFeature::GetStandardThickness ( );
__declspec(implementation_key(1124)) SAFEARRAY * IADShellFeature::GetmultiThicknesses ( );
__declspec(implementation_key(1125)) VARIANT_BOOL IADShellFeature::GetisShellOutward ( );
__declspec(implementation_key(1126)) IADParameterPtr IADTangentInsideConstraint::GetOffset ( );
__declspec(implementation_key(1127)) IADParameterPtr IADTangentOutsideConstraint::GetOffset ( );
__declspec(implementation_key(1128)) IObjectCollectorPtr IADVertexChamferFeature::GetVertices ( );
__declspec(implementation_key(1129)) IADParameterPtr IADVertexChamferFeature::GetDistance1 ( );
__declspec(implementation_key(1130)) IADParameterPtr IADVertexChamferFeature::GetDistance2 ( );
__declspec(implementation_key(1131)) IADParameterPtr IADVertexChamferFeature::GetDistance3 ( );
__declspec(implementation_key(1132)) enum ADObjectType IADPartFeature::GetType ( );
__declspec(implementation_key(1133)) _bstr_t IADPartFeature::GetName ( );
__declspec(implementation_key(1134)) void IADPartFeature::PutName ( _bstr_t pRetVal );
__declspec(implementation_key(1135)) IADRootPtr IADPartFeature::GetRoot ( );
__declspec(implementation_key(1136)) IADSessionPtr IADPartFeature::GetSession ( );
__declspec(implementation_key(1137)) enum ADPartFeatureType IADPartFeature::GetFeatureType ( );
__declspec(implementation_key(1138)) VARIANT_BOOL IADPartFeature::GetIsSuppressed ( );
__declspec(implementation_key(1139)) void IADPartFeature::PutIsSuppressed ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1140)) HRESULT IADPartFeature::Delete ( );
__declspec(implementation_key(1141)) VARIANT_BOOL IADPartFeature::GetHasError ( );
__declspec(implementation_key(1142)) HRESULT IADPartFeature::GetExtents ( struct IADPoint * * ppLower, struct IADPoint * * ppUpper );
__declspec(implementation_key(1143)) VARIANT_BOOL IADPartFeature::GetIsSheetMetalFeature ( );
__declspec(implementation_key(1144)) IADFacesPtr IADPartFeature::GetFaces ( );
__declspec(implementation_key(1145)) VARIANT_BOOL IADPartFeature::GetIsActive ( );
__declspec(implementation_key(1146)) void IADPartFeature::PutIsActive ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1147)) long IADPartFeature::GetFaceColor ( );
__declspec(implementation_key(1148)) void IADPartFeature::PutFaceColor ( long pRetVal );
__declspec(implementation_key(1149)) long IADPartFeature::GetEdgeColor ( );
__declspec(implementation_key(1150)) void IADPartFeature::PutEdgeColor ( long pRetVal );
__declspec(implementation_key(1151)) long IADPartFeature::GetOpacity ( );
__declspec(implementation_key(1152)) void IADPartFeature::PutOpacity ( long pRetVal );
__declspec(implementation_key(1153)) long IADPartFeature::GetReflectivity ( );
__declspec(implementation_key(1154)) void IADPartFeature::PutReflectivity ( long pRetVal );
__declspec(implementation_key(1155)) VARIANT_BOOL IADPartFeature::GetUsePartColor ( );
__declspec(implementation_key(1156)) void IADPartFeature::PutUsePartColor ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1157)) IEnumVARIANTPtr IADPartFeatures::GetEnumerator ( );
__declspec(implementation_key(1158)) IADPartFeaturePtr IADPartFeatures::GetItem ( const _variant_t & index );
__declspec(implementation_key(1159)) long IADPartFeatures::GetCount ( );
__declspec(implementation_key(1160)) DIEnumPtr IADPartFeatures::GetEnum ( );
__declspec(implementation_key(1161)) IADPartSessionPtr IADPartFeatures::GetSession ( );
__declspec(implementation_key(1162)) IADPartFeaturePtr IADPartFeatures::GetCurrentFeature ( );
__declspec(implementation_key(1163)) void IADPartFeatures::PutRefCurrentFeature ( struct IADPartFeature * pRetVal );
__declspec(implementation_key(1164)) IADExtrusionFeaturePtr IADPartFeatures::AddExtrudedBoss ( struct IADSketch * pSketch, const _variant_t & Depth, enum ADPartFeatureEndCondition EndCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, enum ADDirectionType Direction, struct IADOccurrence * pDirectionOcc, IDispatch * pDirectionObject, VARIANT_BOOL IsDirectionReversed, const _variant_t & draftAngle, VARIANT_BOOL IsOutwardDraft, _bstr_t Name, _bstr_t depthParameterName, _bstr_t angleParameterName );
__declspec(implementation_key(1165)) IADExtrusionFeaturePtr IADPartFeatures::AddExtrudedCutout ( struct IADSketch * pSketch, const _variant_t & Depth, enum ADPartFeatureEndCondition EndCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, enum ADDirectionType Direction, struct IADOccurrence * pDirectionOcc, IDispatch * pDirectionObject, VARIANT_BOOL IsDirectionReversed, const _variant_t & draftAngle, VARIANT_BOOL IsOutwardDraft, _bstr_t Name, _bstr_t depthParameterName, _bstr_t angleParameterName );
__declspec(implementation_key(1166)) IADRevolutionFeaturePtr IADPartFeatures::AddRevolvedBoss ( struct IADSketch * pSketch, struct IADOccurrence * axisOcc, IDispatch * axisObject, const _variant_t & revolveAngle, _bstr_t Name );
__declspec(implementation_key(1167)) IADRevolutionFeaturePtr IADPartFeatures::AddRevolvedCutout ( struct IADSketch * pSketch, struct IADOccurrence * axisOcc, IDispatch * axisObject, const _variant_t & revolveAngle, _bstr_t Name );
__declspec(implementation_key(1168)) IADSweepFeaturePtr IADPartFeatures::AddSweptBoss ( struct IADSketch * pProfileSketch, struct IObjectCollector * pPathSketch, VARIANT_BOOL IsRigid, enum ADPartFeatureEndCondition EndCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, const _variant_t & draftAngle, VARIANT_BOOL IsOutwardDraft, _bstr_t Name );
__declspec(implementation_key(1169)) IADSweepFeaturePtr IADPartFeatures::AddSweptCutout ( struct IADSketch * pProfileSketch, struct IObjectCollector * pPathSketch, VARIANT_BOOL IsRigid, enum ADPartFeatureEndCondition EndCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, const _variant_t & draftAngle, VARIANT_BOOL IsOutwardDraft, _bstr_t Name );
__declspec(implementation_key(1170)) IADPartFeaturePtr IADPartFeatures::GetCurrentState ( );
__declspec(implementation_key(1171)) void IADPartFeatures::PutRefCurrentState ( struct IADPartFeature * pRetVal );
__declspec(implementation_key(1172)) IADChamferFeaturePtr IADPartFeatures::AddEdgeChamferFeature ( struct IObjectCollector * colEdgesAndFaces, enum ADEdgeChamferType chamferType, const _variant_t & chamferDistance1, const _variant_t & chamferDistance2, const _variant_t & chamferAngle, VARIANT_BOOL TangentPropagate, _bstr_t dist1ParameterName, _bstr_t dist2ParameterName, _bstr_t chamferAngleParameterName, _bstr_t Name );
__declspec(implementation_key(1173)) IADVertexChamferFeaturePtr IADPartFeatures::AddVertexChamferFeature ( struct IObjectCollector * colVertices, const _variant_t & Distance1, const _variant_t & Distance2, const _variant_t & Distance3, _bstr_t dist1ParameterName, _bstr_t dist2ParameterName, _bstr_t dist3ParameterName, _bstr_t Name );
__declspec(implementation_key(1174)) IADFilletFeaturePtr IADPartFeatures::AddConstantRadiusFilletFeature ( struct IObjectCollector * colEdgesAndFaces, const _variant_t & vConstantRadius, VARIANT_BOOL bTangentPropagate, _bstr_t strConstRadParameterName, _bstr_t Name );
__declspec(implementation_key(1175)) IADFilletFeaturePtr IADPartFeatures::AddVariableRadiusFilletFeature ( struct IObjectCollector * colEdgesAndFaces, SAFEARRAY * * pStartRadiui, SAFEARRAY * * pEndRadiui, VARIANT_BOOL bTangentPropagate, _bstr_t Name );
__declspec(implementation_key(1176)) IADOffsetFaceFeaturePtr IADPartFeatures::AddOffsetFaceFeature ( struct IObjectCollector * pFaces, const _variant_t & vOffset, _bstr_t Name, _bstr_t strOffsetParameterName );
__declspec(implementation_key(1177)) IADScaleFeaturePtr IADPartFeatures::AddScaleFeature ( VARIANT_BOOL scaleAboutCenteroid, VARIANT_BOOL uniformScaling, const _variant_t & uniformScaleFactor, const _variant_t & scaleFactorX, const _variant_t & scaleFactorY, const _variant_t & scaleFactorZ, _bstr_t uniformScaleParamName, _bstr_t scaleFactorXParameterName, _bstr_t scaleFactorYParameterName, _bstr_t scaleFactorZParameterName, _bstr_t Name );
__declspec(implementation_key(1178)) IADDraftFeaturePtr IADPartFeatures::AddDraftFeature ( struct IObjectCollector * DraftFaces, struct IADOccurrence * toDraftPlaneOcc, IDispatch * DraftNeutralPlane, const _variant_t & draftAngle, VARIANT_BOOL IsOutwardDraft, _bstr_t angleParameterName, _bstr_t Name );
__declspec(implementation_key(1179)) IADShellFeaturePtr IADPartFeatures::AddShellFeature ( struct IObjectCollector * colFacesToRemove, const _variant_t & vStandardThickness, VARIANT_BOOL isShellOutward, struct IObjectCollector * colMultiThickFaces, SAFEARRAY * * multiThicknesses, _bstr_t thicknessParameterName, _bstr_t Name );
__declspec(implementation_key(1180)) IADHoleFeaturePtr IADPartFeatures::AddSimpleHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName );
__declspec(implementation_key(1181)) IADHoleFeaturePtr IADPartFeatures::AddDrilledHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & DrillAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName );
__declspec(implementation_key(1182)) IADHoleFeaturePtr IADPartFeatures::AddTaperedHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & MajorDiameter, const _variant_t & MinorDiameter, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName );
__declspec(implementation_key(1183)) IADHoleFeaturePtr IADPartFeatures::AddTaperedDrilledHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & MajorDiameter, const _variant_t & MinorDiameter, const _variant_t & DrillAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName );
__declspec(implementation_key(1184)) IADHoleFeaturePtr IADPartFeatures::AddCounterSunkHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & CounterSinkDiameter, const _variant_t & CounterSinkAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName );
__declspec(implementation_key(1185)) IADHoleFeaturePtr IADPartFeatures::AddCounterSunkDrilledHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & DrillAngle, const _variant_t & CounterSinkDiameter, const _variant_t & CounterSinkAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName );
__declspec(implementation_key(1186)) IADHoleFeaturePtr IADPartFeatures::AddCounterBoredHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & CounterBoreDepth, const _variant_t & CounterBoreDiameter, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName );
__declspec(implementation_key(1187)) IADHoleFeaturePtr IADPartFeatures::AddCounterBoredDrilledHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & DrillAngle, const _variant_t & CounterBoreDepth, const _variant_t & CounterBoreDiameter, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName );
__declspec(implementation_key(1188)) IADHoleFeaturePtr IADPartFeatures::AddCounterDrilledHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & CounterDrillDepth, const _variant_t & CounterDrillDiameter, const _variant_t & CounterDrillAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName );
__declspec(implementation_key(1189)) IADHoleFeaturePtr IADPartFeatures::AddCounterDrilledDrilledHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & DrillAngle, const _variant_t & CounterDrillDepth, const _variant_t & CounterDrillDiameter, const _variant_t & CounterDrillAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName );
__declspec(implementation_key(1190)) IADTappedThreadInfoPtr IADPartFeatures::CreateTappedThreadInfo ( enum ADTappedThreadType threadType, _bstr_t Name, _bstr_t threadClass, double Pitch, double tapDrillDiameter, double MajorDiameter, double MinorDiameter, double pitchDiameter, double ThreadLength );
__declspec(implementation_key(1191)) IADMeshBooleanFeaturePtr IADPartFeatures::AddMeshBooleanFeature ( struct IADDesignMesh * designMesh, struct IADOccurrence * designMeshOcc, enum ADBooleanOperator ADBooleanOperator, _bstr_t Name );
__declspec(implementation_key(1192)) IADLoftFeaturePtr IADPartFeatures::AddLoftBoss ( struct IObjectCollector * CrossSections, struct IObjectCollector * Tangents, struct IObjectCollector * TangentMagnitudes, struct IObjectCollector * TangentAngles, struct IObjectCollector * GuideCurves, enum ADLoftGuideType GuideCurveType, VARIANT_BOOL MinimizeTwist, VARIANT_BOOL MinimizeCurvature, VARIANT_BOOL SimplifySurface, VARIANT_BOOL ConnectEnds, _bstr_t Name );
__declspec(implementation_key(1193)) IADLoftFeaturePtr IADPartFeatures::AddLoftCut ( struct IObjectCollector * CrossSections, struct IObjectCollector * Tangents, struct IObjectCollector * TangentMagnitudes, struct IObjectCollector * TangentAngles, struct IObjectCollector * GuideCurves, enum ADLoftGuideType GuideCurveType, VARIANT_BOOL MinimizeTwist, VARIANT_BOOL MinimizeCurvature, VARIANT_BOOL SimplifySurface, VARIANT_BOOL ConnectEnds, _bstr_t Name );
__declspec(implementation_key(1194)) IADHoleFeaturePtr IADPartFeatures::AddSimpleHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t diameterParameterName );
__declspec(implementation_key(1195)) IADHoleFeaturePtr IADPartFeatures::AddDrilledHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & DrillAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t diameterParameterName, _bstr_t drillAngleParameterName );
__declspec(implementation_key(1196)) IADHoleFeaturePtr IADPartFeatures::AddTaperedHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & MajorDiameter, const _variant_t & MinorDiameter, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t majorDiameterParameterName, _bstr_t minorDiameterParameterName );
__declspec(implementation_key(1197)) IADHoleFeaturePtr IADPartFeatures::AddTaperedDrilledHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & MajorDiameter, const _variant_t & MinorDiameter, const _variant_t & DrillAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t majorDiameterParameterName, _bstr_t minorDiameterParameterName, _bstr_t drillAngleParameterName );
__declspec(implementation_key(1198)) IADHoleFeaturePtr IADPartFeatures::AddCounterSunkHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & CounterSinkDiameter, const _variant_t & CounterSinkAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t diameterParameterName, _bstr_t counterSinkDiameterParameterName, _bstr_t counterSinkAngleParameterName );
__declspec(implementation_key(1199)) IADHoleFeaturePtr IADPartFeatures::AddCounterSunkDrilledHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & DrillAngle, const _variant_t & CounterSinkDiameter, const _variant_t & CounterSinkAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t diameterParameterName, _bstr_t drillAngleParameterName, _bstr_t counterSinkDiameterParameterName, _bstr_t counterSinkAngleParameterName );
__declspec(implementation_key(1200)) IADHoleFeaturePtr IADPartFeatures::AddCounterBoredHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & CounterBoreDepth, const _variant_t & CounterBoreDiameter, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t diameterParameterName, _bstr_t counterBoreDepthParameterName, _bstr_t counterBoreDiameterParameterName );
__declspec(implementation_key(1201)) IADHoleFeaturePtr IADPartFeatures::AddCounterBoredDrilledHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & DrillAngle, const _variant_t & CounterBoreDepth, const _variant_t & CounterBoreDiameter, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t diameterParameterName, _bstr_t drillAngleParameterName, _bstr_t counterBoreDepthParameterName, _bstr_t counterBoreDiameterParameterName );
__declspec(implementation_key(1202)) IADHoleFeaturePtr IADPartFeatures::AddCounterDrilledHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & CounterDrillDepth, const _variant_t & CounterDrillDiameter, const _variant_t & CounterDrillAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t diameterParameterName, _bstr_t counterDrillDepthParameterName, _bstr_t counterDrillDiameterParameterName, _bstr_t counterDrillAngleParameterName );
__declspec(implementation_key(1203)) IADHoleFeaturePtr IADPartFeatures::AddCounterDrilledDrilledHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & DrillAngle, const _variant_t & CounterDrillDepth, const _variant_t & CounterDrillDiameter, const _variant_t & CounterDrillAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t diameterParameterName, _bstr_t drillAngleParameterName, _bstr_t counterDrillDepthParameterName, _bstr_t counterDrillDiameterParameterName, _bstr_t counterDrillAngleParameterName );
__declspec(implementation_key(1204)) IADWrapFeaturePtr IADPartFeatures::AddWrap ( struct IADSketch * pSketch, IDispatch * targetFaceObject, const _variant_t & Depth, enum ADWrapFocusType FocusType, enum ADBooleanOperator BooleanOperator, _bstr_t Name );
__declspec(implementation_key(1205)) IADProjectFeaturePtr IADPartFeatures::AddProject ( struct IADSketch * pSketch, const _variant_t & Depth, enum ADBooleanOperator BooleanOperator, VARIANT_BOOL IsIntoSketchPlane, _bstr_t Name );
__declspec(implementation_key(1206)) SAFEARRAY * IADPartSession::GetFacetData ( );
__declspec(implementation_key(1207)) long IADPartSession::GetColor ( );
__declspec(implementation_key(1208)) void IADPartSession::PutColor ( long pRetVal );
__declspec(implementation_key(1209)) long IADPartSession::GetTransparency ( );
__declspec(implementation_key(1210)) void IADPartSession::PutTransparency ( long pRetVal );
__declspec(implementation_key(1211)) long IADPartSession::GetReflectivity ( );
__declspec(implementation_key(1212)) void IADPartSession::PutReflectivity ( long pRetVal );
__declspec(implementation_key(1213)) long IADPartSession::GetFeatureCount ( );
__declspec(implementation_key(1214)) IADSketchesPtr IADPartSession::GetSketches ( );
__declspec(implementation_key(1215)) IADPartFeaturesPtr IADPartSession::GetFeatures ( );
__declspec(implementation_key(1216)) HRESULT IADPartSession::RegenerateAll ( );
__declspec(implementation_key(1217)) HRESULT IADPartSession::UnSuppressAll ( );
__declspec(implementation_key(1218)) IADBodiesPtr IADPartSession::GetBodies ( );
__declspec(implementation_key(1219)) IADDesignSurfacesPtr IADPartSession::GetDesignSurfaces ( );
__declspec(implementation_key(1220)) IAD3DSketchesPtr IADPartSession::GetSketches3D ( );
__declspec(implementation_key(1221)) SAFEARRAY * IADPartSession::FacetDataForConfiguration ( struct IADConfiguration * pConfiguration );
__declspec(implementation_key(1222)) HRESULT IADPartSession::GetMeshDefinition ( struct IADConfiguration * pConfiguration, long * pFaceDataSize, long * pVertexDataSize );
__declspec(implementation_key(1223)) HRESULT IADPartSession::GetMeshData ( struct IADConfiguration * pConfiguration, SAFEARRAY * * faceData, SAFEARRAY * * vertexData );
__declspec(implementation_key(1224)) HRESULT IADPartSession::GetMeshDefinitionEx ( struct IADConfiguration * pConfiguration, long minCircularFacets, long * pFaceDataSize, long * pVertexDataSize, long * pNormalDataSize );
__declspec(implementation_key(1225)) HRESULT IADPartSession::GetMeshDataEx ( struct IADConfiguration * pConfiguration, SAFEARRAY * * faceData, SAFEARRAY * * vertexData, SAFEARRAY * * normalData );
__declspec(implementation_key(1226)) HRESULT IADPartSession::Suppress ( struct IObjectCollector * states );
__declspec(implementation_key(1227)) HRESULT IADPartSession::Unsuppress ( struct IObjectCollector * states );
__declspec(implementation_key(1228)) IADBodiesPtr IADPartSession::GetBodiesForConfiguration ( struct IADConfiguration * pConfiguration );
__declspec(implementation_key(1229)) long IADPartSession::GetEdgeColor ( );
__declspec(implementation_key(1230)) void IADPartSession::PutEdgeColor ( long pRetVal );
__declspec(implementation_key(1231)) IADBodyPtr IADPartSession::GetSectionBody ( );
__declspec(implementation_key(1232)) VARIANT_BOOL IADPartSession::GetShowFeatureColor ( );
__declspec(implementation_key(1233)) enum ADObjectType IADShell::GetType ( );
__declspec(implementation_key(1234)) enum ADTopologyType IADShell::GetTopologyType ( );
__declspec(implementation_key(1235)) IADPartSessionPtr IADShell::GetPart ( );
__declspec(implementation_key(1236)) IADBodyPtr IADShell::GetBody ( );
__declspec(implementation_key(1237)) IADFacesPtr IADShell::GetFaces ( );
__declspec(implementation_key(1238)) IADEdgesPtr IADShell::GetEdges ( );
__declspec(implementation_key(1239)) IADLumpPtr IADShell::GetLump ( );
__declspec(implementation_key(1240)) IEnumVARIANTPtr IADShells::GetEnumerator ( );
__declspec(implementation_key(1241)) IADShellPtr IADShells::GetItem ( long index );
__declspec(implementation_key(1242)) long IADShells::GetCount ( );
__declspec(implementation_key(1243)) DIEnumPtr IADShells::GetEnum ( );
__declspec(implementation_key(1244)) IADPartSessionPtr IADShells::GetSession ( );
__declspec(implementation_key(1245)) enum ADObjectType IADVertex::GetType ( );
__declspec(implementation_key(1246)) enum ADTopologyType IADVertex::GetTopologyType ( );
__declspec(implementation_key(1247)) IADPartSessionPtr IADVertex::GetPart ( );
__declspec(implementation_key(1248)) IADBodyPtr IADVertex::GetBody ( );
__declspec(implementation_key(1249)) IADEdgesPtr IADVertex::GetEdges ( );
__declspec(implementation_key(1250)) IADFacesPtr IADVertex::GetFaces ( );
__declspec(implementation_key(1251)) IADPointPtr IADVertex::GetPoint ( );
__declspec(implementation_key(1252)) SAFEARRAY * IADVertex::GetKey ( );
__declspec(implementation_key(1253)) IEnumVARIANTPtr IADVertices::GetEnumerator ( );
__declspec(implementation_key(1254)) IADVertexPtr IADVertices::GetItem ( long index );
__declspec(implementation_key(1255)) long IADVertices::GetCount ( );
__declspec(implementation_key(1256)) DIEnumPtr IADVertices::GetEnum ( );
__declspec(implementation_key(1257)) IADPartSessionPtr IADVertices::GetSession ( );
__declspec(implementation_key(1258)) VARIANT_BOOL IADProjectFeature::GetIsCutout ( );
__declspec(implementation_key(1259)) IADSketchPtr IADProjectFeature::GetSketch ( );
__declspec(implementation_key(1260)) IADParameterPtr IADProjectFeature::GetDepthParameter ( );
__declspec(implementation_key(1261)) VARIANT_BOOL IADProjectFeature::GetIsIntoSketchPlane ( );
__declspec(implementation_key(1262)) IEnumVARIANTPtr IADRepositories::GetEnumerator ( );
__declspec(implementation_key(1263)) IADRepositoryPtr IADRepositories::GetItem ( const _variant_t & index );
__declspec(implementation_key(1264)) long IADRepositories::GetCount ( );
__declspec(implementation_key(1265)) DIEnumPtr IADRepositories::GetEnum ( );
__declspec(implementation_key(1266)) enum ADObjectType IADRepository::GetType ( );
__declspec(implementation_key(1267)) _bstr_t IADRepository::GetName ( );
__declspec(implementation_key(1268)) IADFolderPtr IADRepository::GetRootFolder ( );
__declspec(implementation_key(1269)) IADRootPtr IADRepository::GetRoot ( );
__declspec(implementation_key(1270)) HRESULT IADRepository::Publish ( struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles );
__declspec(implementation_key(1271)) HRESULT IADRepository::UnPublish ( struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles );
__declspec(implementation_key(1272)) HRESULT IADRepository::UnPublishToAll ( );
__declspec(implementation_key(1273)) VARIANT_BOOL IADRepository::IsPublished ( );
__declspec(implementation_key(1274)) VARIANT_BOOL IADRepository::IsPublishedToTeam ( struct IADTeam * pTeam );
__declspec(implementation_key(1275)) VARIANT_BOOL IADRepository::IsPublishedToUser ( struct IADUser * pUser );
__declspec(implementation_key(1276)) VARIANT_BOOL IADRepository::IsPublishedToRole ( struct IADTeamRole * pRole );
__declspec(implementation_key(1277)) VARIANT_BOOL IADRevolutionFeature::GetIsCutout ( );
__declspec(implementation_key(1278)) IADSketchPtr IADRevolutionFeature::GetSketch ( );
__declspec(implementation_key(1279)) IADParameterPtr IADRevolutionFeature::GetAngleParameter ( );
__declspec(implementation_key(1280)) IADTargetProxyPtr IADRevolutionFeature::GetAxis ( );
__declspec(implementation_key(1281)) enum ADObjectType IADRoot::GetType ( );
__declspec(implementation_key(1282)) IADRepositoriesPtr IADRoot::GetRepositories ( );
__declspec(implementation_key(1283)) IADRepositoryPtr IADRoot::GetRepositoryByName ( _bstr_t Name );
__declspec(implementation_key(1284)) IDispatchPtr IADRoot::BindReferenceToObject ( _bstr_t referenceString, enum ADObjectType objectType );
__declspec(implementation_key(1285)) IADSessionPtr IADRoot::ImportSTEPFile ( _bstr_t filePath );
__declspec(implementation_key(1286)) IADSessionPtr IADRoot::ImportSATFile ( _bstr_t filePath );
__declspec(implementation_key(1287)) IADSessionPtr IADRoot::ImportIGESFile ( _bstr_t filePath );
__declspec(implementation_key(1288)) IADSessionPtr IADRoot::ImportDWGFile ( _bstr_t filePath, enum ADUnits overridingUnit, VARIANT_BOOL maintainProjection );
__declspec(implementation_key(1289)) IADSessionPtr IADRoot::ImportDXFFile ( _bstr_t filePath, enum ADUnits overridingUnit, VARIANT_BOOL maintainProjection );
__declspec(implementation_key(1290)) IADSessionsPtr IADRoot::GetSessions ( );
__declspec(implementation_key(1291)) HRESULT IADRoot::Terminate ( );
__declspec(implementation_key(1292)) IADUserPtr IADRoot::GetUser ( );
__declspec(implementation_key(1293)) IADTeamsPtr IADRoot::GetTeams ( );
__declspec(implementation_key(1294)) IADUsersPtr IADRoot::GetListedUsers ( );
__declspec(implementation_key(1295)) IADUserPtr IADRoot::CreateUser ( _bstr_t Name );
__declspec(implementation_key(1296)) IADUserPtr IADRoot::GetUserByName ( _bstr_t Name );
__declspec(implementation_key(1297)) IADTeamPtr IADRoot::CreateTeam ( _bstr_t Name );
__declspec(implementation_key(1298)) IADTeamPtr IADRoot::GetTeamByName ( _bstr_t Name );
__declspec(implementation_key(1299)) HRESULT IADRoot::SendMessage ( struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, _bstr_t message );
__declspec(implementation_key(1300)) IObjectCollectorPtr IADRoot::NewObjectCollector ( );
__declspec(implementation_key(1301)) IPermissionSelectorPtr IADRoot::NewPermissionSelector ( );
__declspec(implementation_key(1302)) INotificationSelectorPtr IADRoot::NewNotificationSelector ( );
__declspec(implementation_key(1303)) HRESULT IADRoot::SetAgentProperty ( _bstr_t Name, _bstr_t Value );
__declspec(implementation_key(1304)) _bstr_t IADRoot::GetAgentProperty ( _bstr_t Name );
__declspec(implementation_key(1305)) HRESULT IADRoot::RegisterAgent ( SAFEARRAY * * pAgentBytes );
__declspec(implementation_key(1306)) HRESULT IADRoot::RunAgent ( _bstr_t className );
__declspec(implementation_key(1307)) VARIANT_BOOL IADRoot::IsOpenedFromRepository ( _bstr_t filePathOnDisk );
__declspec(implementation_key(1308)) _bstr_t IADRoot::GetRepositoryReference ( _bstr_t filePathOnDisk );
__declspec(implementation_key(1309)) IADSessionPtr IADRoot::OpenFile ( _bstr_t filePath );
__declspec(implementation_key(1310)) _bstr_t IADRoot::Getversion ( );
__declspec(implementation_key(1311)) IADPartSessionPtr IADRoot::CreateEmptyPart ( _bstr_t Name, VARIANT_BOOL isSheetMetal );
__declspec(implementation_key(1312)) IADAssemblySessionPtr IADRoot::CreateEmptyAssembly ( _bstr_t Name );
__declspec(implementation_key(1313)) IUnknownPtr IADRoot::GetEventManager ( );
__declspec(implementation_key(1314)) _bstr_t IADRoot::EncryptPassword ( _bstr_t plainTextPassword );
__declspec(implementation_key(1315)) IADSessionPtr IADRoot::Import3DMFile ( _bstr_t filePath );
__declspec(implementation_key(1316)) IADSessionPtr IADRoot::ImportImages ( SAFEARRAY * * pFilePaths );
__declspec(implementation_key(1317)) HRESULT IADRoot::OpenFileWithUI ( _bstr_t filePath );
__declspec(implementation_key(1318)) _bstr_t IADRoot::GetLanguageForResources ( );
__declspec(implementation_key(1319)) IADSessionPtr IADRoot::GetTopmostSession ( );
__declspec(implementation_key(1320)) IADSessionPtr IADRoot::ImportSTEPFileEx ( _bstr_t filePath, VARIANT_BOOL applyImportOptions, VARIANT_BOOL openEditor );
__declspec(implementation_key(1321)) IADSessionPtr IADRoot::ImportSATFileEx ( _bstr_t filePath, VARIANT_BOOL applyImportOptions, VARIANT_BOOL openEditor );
__declspec(implementation_key(1322)) IADSessionPtr IADRoot::ImportIGESFileEx ( _bstr_t filePath, VARIANT_BOOL applyImportOptions, VARIANT_BOOL openEditor );
__declspec(implementation_key(1323)) IADVaultInfoPtr IADRoot::GetVaultInfo ( );
__declspec(implementation_key(1324)) HRESULT IADRoot::TerminateAll ( );
__declspec(implementation_key(1325)) IADAddOnsPtr IADRoot::GetAlibreAddOns ( );
__declspec(implementation_key(1326)) SAFEARRAY * IADRoot::GetInstalledDrawingTemplates ( );
__declspec(implementation_key(1327)) IADDrawingSessionPtr IADRoot::CreateEmptyDrawing ( _bstr_t Name );
__declspec(implementation_key(1328)) _bstr_t IADRoot::RestorePackage ( _bstr_t packageFilePath, _bstr_t restoreDirectoryPath, VARIANT_BOOL overwrite );
__declspec(implementation_key(1329)) IADSessionPtr IADRoot::ImportNonNative3DFile ( _bstr_t filePath, enum ADUnits unitCodeForMeshFile );
__declspec(implementation_key(1330)) VARIANT_BOOL IADRoot::IsMeshTypeFile ( _bstr_t filePath );
__declspec(implementation_key(1331)) HRESULT IADRoot::GetGuidAndConstituentInformation ( _bstr_t filePath, BSTR * guid, struct IObjectCollector * * constituentGuids, struct IObjectCollector * * constituentNames, struct IObjectCollector * * constituentRelativeFilePaths );
__declspec(implementation_key(1332)) HRESULT IADRoot::GetGuidAndTPConstituentsData ( _bstr_t filePath, BSTR * guid, struct IObjectCollector * * constituentGuids, struct IObjectCollector * * constituentNames, struct IObjectCollector * * constituentAbsoluteTPLocations, struct IObjectCollector * * constituentRelativeTPLocations );
__declspec(implementation_key(1333)) IADGlobalParameterSessionPtr IADRoot::CreateEmptyGlobalParameters ( _bstr_t Name );
__declspec(implementation_key(1334)) IADSessionPtr IADRoot::OpenFileEx ( _bstr_t filePath, VARIANT_BOOL openEditor );
__declspec(implementation_key(1335)) IADPartSessionPtr IADRoot::CreateEmptyPartEx ( _bstr_t Name, VARIANT_BOOL isSheetMetal, VARIANT_BOOL openEditor );
__declspec(implementation_key(1336)) IADAssemblySessionPtr IADRoot::CreateEmptyAssemblyEx ( _bstr_t Name, VARIANT_BOOL openEditor );
__declspec(implementation_key(1337)) IADDrawingSessionPtr IADRoot::CreateEmptyDrawingEx ( _bstr_t Name, VARIANT_BOOL openEditor );
__declspec(implementation_key(1338)) IADGlobalParameterSessionPtr IADRoot::CreateEmptyGlobalParametersEx ( _bstr_t Name, VARIANT_BOOL openEditor );
__declspec(implementation_key(1339)) IADMaterialsPtr IADRoot::GetMaterials ( );
__declspec(implementation_key(1340)) IADMaterialLibrariesPtr IADRoot::GetMaterialLibraries ( );
__declspec(implementation_key(1341)) IADMaterialLibraryPtr IADRoot::createMaterialLibrary ( _bstr_t Name );
__declspec(implementation_key(1342)) HRESULT IADRoot::removeMaterialLibrary ( _bstr_t Name );
__declspec(implementation_key(1343)) _bstr_t IADRoot::GetAppTitle ( );
__declspec(implementation_key(1344)) enum ADObjectType IADSession::GetType ( );
__declspec(implementation_key(1345)) _bstr_t IADSession::GetName ( );
__declspec(implementation_key(1346)) enum ADObjectSubType IADSession::GetSessionType ( );
__declspec(implementation_key(1347)) IADRootPtr IADSession::GetRoot ( );
__declspec(implementation_key(1348)) HRESULT IADSession::SaveAs ( VARIANT * pDestination, _bstr_t itemName );
__declspec(implementation_key(1349)) HRESULT IADSession::Save ( );
__declspec(implementation_key(1350)) HRESULT IADSession::Close ( VARIANT_BOOL saveSession );
__declspec(implementation_key(1351)) _bstr_t IADSession::GetIdentifier ( );
__declspec(implementation_key(1352)) IADParametersPtr IADSession::GetParameters ( );
__declspec(implementation_key(1353)) IADGeometryFactoryPtr IADSession::GetGeometryFactory ( );
__declspec(implementation_key(1354)) IDispatchPtr IADSession::BindKeyToItem ( SAFEARRAY * * pKey, enum ADObjectType objectType );
__declspec(implementation_key(1355)) IObjectCollectorPtr IADSession::GetSelectedObjects ( );
__declspec(implementation_key(1356)) VARIANT_BOOL IADSession::GetIsGUIVisible ( );
__declspec(implementation_key(1357)) HRESULT IADSession::SaveNew ( VARIANT * pDestination );
__declspec(implementation_key(1358)) IUnknownPtr IADSession::GetPreviewSnapshot ( );
__declspec(implementation_key(1359)) HRESULT IADSession::Select ( struct IObjectCollector * pEntities );
__declspec(implementation_key(1360)) IADTargetProxyPtr IADSession::NewTargetProxy ( struct IADOccurrence * pOccurrence, IDispatch * ptarget );
__declspec(implementation_key(1361)) HRESULT IADSession::Highlight ( IDispatch * ptarget );
__declspec(implementation_key(1362)) HRESULT IADSession::SaveCurrentViewSnapshot ( _bstr_t fullImagePath, long Width, long Height, VARIANT_BOOL bUseCanvasAspectRatio, VARIANT_BOOL bUseCanvasWidthAndHeight );
__declspec(implementation_key(1363)) IObjectCollectorPtr IADSession::SelectedObjectsEx ( struct IADPoint * * lastSelectedPoint );
__declspec(implementation_key(1364)) HRESULT IADSession::SaveAll ( _bstr_t destination );
__declspec(implementation_key(1365)) long IADSession::GetTimeStamp ( );
__declspec(implementation_key(1366)) _bstr_t IADSession::GetfilePath ( );
__declspec(implementation_key(1367)) HRESULT IADSession::CreatePackage ( _bstr_t filePath );
__declspec(implementation_key(1368)) IObjectCollectorPtr IADSession::GetConstituentFilePaths ( );
__declspec(implementation_key(1369)) HRESULT IADSession::UpdatePreviewSnaphot ( VARIANT_BOOL overwriteExistingSnapshot );
__declspec(implementation_key(1370)) IEnumVARIANTPtr IADSessions::GetEnumerator ( );
__declspec(implementation_key(1371)) IADSessionPtr IADSessions::GetItem ( const _variant_t & index );
__declspec(implementation_key(1372)) long IADSessions::GetCount ( );
__declspec(implementation_key(1373)) DIEnumPtr IADSessions::GetEnum ( );
__declspec(implementation_key(1374)) enum ADObjectType IADSheet::GetType ( );
__declspec(implementation_key(1375)) _bstr_t IADSheet::GetName ( );
__declspec(implementation_key(1376)) void IADSheet::PutName ( _bstr_t pRetVal );
__declspec(implementation_key(1377)) IADRootPtr IADSheet::GetRoot ( );
__declspec(implementation_key(1378)) IADDrawingSessionPtr IADSheet::GetSession ( );
__declspec(implementation_key(1379)) HRESULT IADSheet::GetExtents ( struct IAD2DPoint * * pLower, struct IAD2DPoint * * pUpper );
__declspec(implementation_key(1380)) HRESULT IADSheet::GetSheetSize ( double * Width, double * Height );
__declspec(implementation_key(1381)) HRESULT IADSheet::ModifySheetBlank ( _bstr_t sheetName, double Width, double Height, enum ADUnits Units, double defaultScaleNumerator, double defaultScaleDenomenator );
__declspec(implementation_key(1382)) HRESULT IADSheet::ModifySheetTemplate ( _bstr_t sheetName, _bstr_t templateName, double defaultScaleNumerator, double defaultScaleDenomenator, VARIANT_BOOL retainTemplateLayers, VARIANT_BOOL overwriteExistingDimStyles );
__declspec(implementation_key(1383)) IADDrawingViewsPtr IADSheet::GetViews ( );
__declspec(implementation_key(1384)) IObjectCollectorPtr IADSheet::CreateStandardViews ( _bstr_t designFilePath, enum ADDrawingViewType ViewType, enum ADDetailingOption detailingOptions, double scaleNumerator, double scaleDenominator, enum ADViewOrientation viewOrientations, struct IAD2DPoint * insertionPoint, struct IADTransformation * workspaceOrientation, const _variant_t & designConfiguration, const _variant_t & ExplodedView );
__declspec(implementation_key(1385)) long IADSheet::GetDissociatedDimensionCount ( );
__declspec(implementation_key(1386)) IEnumVARIANTPtr IADSheets::GetEnumerator ( );
__declspec(implementation_key(1387)) IADSheetPtr IADSheets::GetItem ( const _variant_t & index );
__declspec(implementation_key(1388)) long IADSheets::GetCount ( );
__declspec(implementation_key(1389)) DIEnumPtr IADSheets::GetEnum ( );
__declspec(implementation_key(1390)) IADDrawingSessionPtr IADSheets::GetSession ( );
__declspec(implementation_key(1391)) IADSheetPtr IADSheets::GetActiveSheet ( );
__declspec(implementation_key(1392)) void IADSheets::PutRefActiveSheet ( struct IADSheet * pRetVal );
__declspec(implementation_key(1393)) IADSheetPtr IADSheets::CreateSheetFromTemplate ( _bstr_t sheetName, _bstr_t templateName, double defaultScaleNumerator, double defaultScaleDenomenator, VARIANT_BOOL retainTemplateLayers, VARIANT_BOOL overwriteExistingLayers, VARIANT_BOOL overwriteExistingDimStyles );
__declspec(implementation_key(1394)) IADSheetPtr IADSheets::CreateBlankSheet ( _bstr_t sheetName, double Width, double Height, enum ADUnits Units, double defaultScaleNumerator, double defaultScaleDenomenator );
__declspec(implementation_key(1395)) enum ADObjectType IADSketchConstraint::GetType ( );
__declspec(implementation_key(1396)) enum ADSketchConstraintType IADSketchConstraint::GetSketchConstraintType ( );
__declspec(implementation_key(1397)) IADRootPtr IADSketchConstraint::GetRoot ( );
__declspec(implementation_key(1398)) IADDesignSessionPtr IADSketchConstraint::GetSession ( );
__declspec(implementation_key(1399)) enum ADObjectType IADTeamRole::GetType ( );
__declspec(implementation_key(1400)) _bstr_t IADTeamRole::GetRoleName ( );
__declspec(implementation_key(1401)) _bstr_t IADTeamRole::GetTeamName ( );
__declspec(implementation_key(1402)) IADRootPtr IADTeamRole::GetRoot ( );
__declspec(implementation_key(1403)) IEnumVARIANTPtr IADTeamRoles::GetEnumerator ( );
__declspec(implementation_key(1404)) IADTeamRolePtr IADTeamRoles::GetItem ( const _variant_t & index );
__declspec(implementation_key(1405)) long IADTeamRoles::GetCount ( );
__declspec(implementation_key(1406)) DIEnumPtr IADTeamRoles::GetEnum ( );
__declspec(implementation_key(1407)) enum ADObjectType IADUser::GetType ( );
__declspec(implementation_key(1408)) _bstr_t IADUser::GetName ( );
__declspec(implementation_key(1409)) IADRootPtr IADUser::GetRoot ( );
__declspec(implementation_key(1410)) IEnumVARIANTPtr IADUsers::GetEnumerator ( );
__declspec(implementation_key(1411)) IADUserPtr IADUsers::GetItem ( const _variant_t & index );
__declspec(implementation_key(1412)) long IADUsers::GetCount ( );
__declspec(implementation_key(1413)) DIEnumPtr IADUsers::GetEnum ( );
__declspec(implementation_key(1414)) enum ADObjectType IADTeam::GetType ( );
__declspec(implementation_key(1415)) _bstr_t IADTeam::GetName ( );
__declspec(implementation_key(1416)) IADUsersPtr IADTeam::GetTeamMembers ( );
__declspec(implementation_key(1417)) IADRootPtr IADTeam::GetRoot ( );
__declspec(implementation_key(1418)) HRESULT IADTeam::AddMember ( struct IADUser * pUser );
__declspec(implementation_key(1419)) VARIANT_BOOL IADTeam::IsMember ( struct IADUser * pUser );
__declspec(implementation_key(1420)) HRESULT IADTeam::Remove ( );
__declspec(implementation_key(1421)) IADTeamRolePtr IADTeam::AddRole ( _bstr_t RoleName );
__declspec(implementation_key(1422)) HRESULT IADTeam::AssigneRoleToMember ( struct IADUser * pUser, _bstr_t RoleName );
__declspec(implementation_key(1423)) IADTeamRolesPtr IADTeam::GetRoles ( );
__declspec(implementation_key(1424)) IEnumVARIANTPtr IADTeams::GetEnumerator ( );
__declspec(implementation_key(1425)) IADTeamPtr IADTeams::GetItem ( const _variant_t & index );
__declspec(implementation_key(1426)) long IADTeams::GetCount ( );
__declspec(implementation_key(1427)) DIEnumPtr IADTeams::GetEnum ( );
__declspec(implementation_key(1428)) VARIANT_BOOL IADVaultInfo::GetIsUsingVault ( );
__declspec(implementation_key(1429)) _bstr_t IADVaultInfo::GetVaultDriveLetter ( );
__declspec(implementation_key(1430)) _bstr_t IADVaultInfo::GetSelectedVaultName ( );
__declspec(implementation_key(1431)) IADRootPtr IADVaultInfo::GetRoot ( );
__declspec(implementation_key(1432)) enum ADObjectType IADSketch::GetType ( );
__declspec(implementation_key(1433)) _bstr_t IADSketch::GetName ( );
__declspec(implementation_key(1434)) void IADSketch::PutName ( _bstr_t pRetVal );
__declspec(implementation_key(1435)) IADRootPtr IADSketch::GetRoot ( );
__declspec(implementation_key(1436)) IADDesignSessionPtr IADSketch::GetSession ( );
__declspec(implementation_key(1437)) IADSketchFiguresPtr IADSketch::GetFigures ( );
__declspec(implementation_key(1438)) VARIANT_BOOL IADSketch::GetIsClosed ( );
__declspec(implementation_key(1439)) IADVectorPtr IADSketch::GetSketchPlaneNormal ( );
__declspec(implementation_key(1440)) IADTargetProxyPtr IADSketch::GetSketchPlane ( );
__declspec(implementation_key(1441)) VARIANT_BOOL IADSketch::GetIsConsumed ( );
__declspec(implementation_key(1442)) IADPartFeaturePtr IADSketch::GetConsumingFeature ( );
__declspec(implementation_key(1443)) HRESULT IADSketch::Delete ( );
__declspec(implementation_key(1444)) HRESULT IADSketch::BeginChange ( );
__declspec(implementation_key(1445)) HRESULT IADSketch::BeginChangeEx ( struct IADPoint * pOrigin, struct IADVector * pXAxis, struct IADVector * pYDirection );
__declspec(implementation_key(1446)) HRESULT IADSketch::EndChange ( );
__declspec(implementation_key(1447)) HRESULT IADSketch::MapFromWorldToSketch ( struct IADPoint * xyzPoint, double * uCoord, double * vCoord );
__declspec(implementation_key(1448)) IADDimensionsPtr IADSketch::GetDimensions ( );
__declspec(implementation_key(1449)) HRESULT IADSketch::GetExtents ( struct IAD2DPoint * * ppLower, struct IAD2DPoint * * ppUpper );
__declspec(implementation_key(1450)) IAnalyzedSketchDataPtr IADSketch::Analyze ( VARIANT_BOOL bDisjointEnds, VARIANT_BOOL bOpenLoops, VARIANT_BOOL bOverLaps, VARIANT_BOOL bSelfIntersections, VARIANT_BOOL bDegenerateFigures, VARIANT_BOOL bHealSketch, double dblHealingTolerance );
__declspec(implementation_key(1451)) HRESULT IADSketch::MapFromSketchToWorld ( double uCoord, double vCoord, struct IADPoint * * xyzPoint );
__declspec(implementation_key(1452)) SAFEARRAY * IADSketch::GetKey ( );
__declspec(implementation_key(1453)) VARIANT_BOOL IADSketch::GetIsSuppressed ( );
__declspec(implementation_key(1454)) VARIANT_BOOL IADSketch::GetIsActive ( );
__declspec(implementation_key(1455)) IADSketchConstraintsPtr IADSketch::GetSketchConstraints ( );
__declspec(implementation_key(1456)) IADSketchPointPtr IADSketch::GetOriginPoint ( );
__declspec(implementation_key(1457)) IEnumVARIANTPtr IADSketchConstraints::GetEnumerator ( );
__declspec(implementation_key(1458)) IADSketchConstraintPtr IADSketchConstraints::GetItem ( long index );
__declspec(implementation_key(1459)) long IADSketchConstraints::GetCount ( );
__declspec(implementation_key(1460)) DIEnumPtr IADSketchConstraints::GetEnum ( );
__declspec(implementation_key(1461)) IADSketchPtr IADSketchConstraints::GetSketch ( );
__declspec(implementation_key(1462)) VARIANT_BOOL IADSketchConstraints::AddConstraint ( struct IObjectCollector * targets, enum ADSketchConstraintType Type );
__declspec(implementation_key(1463)) IEnumVARIANTPtr IADSketches::GetEnumerator ( );
__declspec(implementation_key(1464)) IADSketchPtr IADSketches::GetItem ( const _variant_t & index );
__declspec(implementation_key(1465)) long IADSketches::GetCount ( );
__declspec(implementation_key(1466)) DIEnumPtr IADSketches::GetEnum ( );
__declspec(implementation_key(1467)) IADDesignSessionPtr IADSketches::GetSession ( );
__declspec(implementation_key(1468)) IADSketchPtr IADSketches::AddSketch ( struct IADOccurrence * pOccurrence, IDispatch * pSketchPlane, _bstr_t Name );
__declspec(implementation_key(1469)) enum ADObjectType IADSketchFigure::GetType ( );
__declspec(implementation_key(1470)) enum ADGeometryType IADSketchFigure::GetFigureType ( );
__declspec(implementation_key(1471)) IADRootPtr IADSketchFigure::GetRoot ( );
__declspec(implementation_key(1472)) IADSketchPtr IADSketchFigure::GetSketch ( );
__declspec(implementation_key(1473)) VARIANT_BOOL IADSketchFigure::GetIsReference ( );
__declspec(implementation_key(1474)) void IADSketchFigure::PutIsReference ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1475)) VARIANT_BOOL IADSketchFigure::GetIsAnchored ( );
__declspec(implementation_key(1476)) void IADSketchFigure::PutIsAnchored ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1477)) HRESULT IADSketchFigure::Delete ( );
__declspec(implementation_key(1478)) VARIANT_BOOL IADSketchFigure::GetIsOwned ( );
__declspec(implementation_key(1479)) _bstr_t IADSketchFigure::GetID ( );
__declspec(implementation_key(1480)) IEnumVARIANTPtr IADSketchFigures::GetEnumerator ( );
__declspec(implementation_key(1481)) IADSketchFigurePtr IADSketchFigures::GetItem ( const _variant_t & index );
__declspec(implementation_key(1482)) long IADSketchFigures::GetCount ( );
__declspec(implementation_key(1483)) DIEnumPtr IADSketchFigures::GetEnum ( );
__declspec(implementation_key(1484)) IADSketchPtr IADSketchFigures::GetSketch ( );
__declspec(implementation_key(1485)) IADSketchPointPtr IADSketchFigures::AddSketchPoint ( double XCoord, double YCoord );
__declspec(implementation_key(1486)) IADSketchLinePtr IADSketchFigures::AddLine ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(1487)) IADSketchCirclePtr IADSketchFigures::AddCircle ( double XCenter, double YCenter, const _variant_t & Radius );
__declspec(implementation_key(1488)) IADSketchCircularArcPtr IADSketchFigures::AddCircularArcByCenterStartAngle ( double XCenter, double YCenter, double XStartPt, double YStartPt, double ArcAngle );
__declspec(implementation_key(1489)) IADSketchCircularArcPtr IADSketchFigures::AddCircularArcByCenterStartEnd ( double XCenter, double YCenter, double XStartPt, double YStartPt, double XEndPt, double YEndPt );
__declspec(implementation_key(1490)) IObjectCollectorPtr IADSketchFigures::AddRectangle ( double Xlow, double Ylow, double Xhigh, double Yhigh );
__declspec(implementation_key(1491)) IADSketchBsplinePtr IADSketchFigures::AddBspline ( long order, long numCtlPoints, SAFEARRAY * * pCtlPoints, SAFEARRAY * * pKnotVector, SAFEARRAY * * pWeights );
__declspec(implementation_key(1492)) IADSketchCircularArcPtr IADSketchFigures::AddCircularArcBy3Points ( double XCenter, double YCenter, double XStartPt, double YStartPt, double XEndPt, double YEndPt );
__declspec(implementation_key(1493)) IADSketchCircularArcPtr IADSketchFigures::AddCircularArc ( double XCenter, double YCenter, double XStartPt, double YStartPt, double ArcAngle );
__declspec(implementation_key(1494)) IADSketchFigurePtr IADSketchFigures::GetFigureByID ( _bstr_t ID );
__declspec(implementation_key(1495)) IADSketchBsplinePtr IADSketchFigures::AddBsplineByInterpolation ( SAFEARRAY * * pInterpolationPoints );
__declspec(implementation_key(1496)) IADSketchEllipsePtr IADSketchFigures::AddEllipse ( double XCenter, double YCenter, double MajorAxis, double MinorMajorRatio, double MajorAxisAngle );
__declspec(implementation_key(1497)) IADSketchEllipsePtr IADSketchFigures::AddEllipseBy3Points ( double XCenter, double YCenter, double XMajor, double YMajor, double XMinor, double YMinor );
__declspec(implementation_key(1498)) IADSketchEllipticArcPtr IADSketchFigures::AddEllipticArc ( double XCenter, double YCenter, double MajorAxis, double MinorMajorRatio, double XStart, double YStart, double XEnd, double YEnd, double MajorAxisAngle );
__declspec(implementation_key(1499)) VARIANT_BOOL IADSweepFeature::GetIsCutout ( );
__declspec(implementation_key(1500)) IADSketchPtr IADSweepFeature::GetSketch ( );
__declspec(implementation_key(1501)) IObjectCollectorPtr IADSweepFeature::GetPath ( );
__declspec(implementation_key(1502)) IADParameterPtr IADSweepFeature::GetDraftParameter ( );
__declspec(implementation_key(1503)) VARIANT_BOOL IADSweepFeature::GetIsOutwardDraft ( );
__declspec(implementation_key(1504)) void IADSweepFeature::PutIsOutwardDraft ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1505)) VARIANT_BOOL IADSweepFeature::GetIsRigid ( );
__declspec(implementation_key(1506)) void IADSweepFeature::PutIsRigid ( VARIANT_BOOL pRetVal );
__declspec(implementation_key(1507)) IADTargetProxyPtr IADSweepFeature::GetEndCondition ( );
__declspec(implementation_key(1508)) enum ADPartFeatureEndCondition IADSweepFeature::GetEndConditionType ( );
__declspec(implementation_key(1509)) double IADSweepFeature::GetToGeometryOffset ( );
__declspec(implementation_key(1510)) VARIANT_BOOL IADWrapFeature::GetIsCutout ( );
__declspec(implementation_key(1511)) IADSketchPtr IADWrapFeature::GetSketch ( );
__declspec(implementation_key(1512)) IADParameterPtr IADWrapFeature::GetDepthParameter ( );
__declspec(implementation_key(1513)) IADTargetProxyPtr IADWrapFeature::GetTargetFace ( );
__declspec(implementation_key(1514)) enum ADWrapFocusType IADWrapFeature::GetFocusType ( );
#pragma stop_map_region

} // namespace AlibreX

#pragma pack(pop)
