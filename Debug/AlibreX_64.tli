// Created by Microsoft (R) C/C++ Compiler Version 14.44.35207.1 (4b2992dc).
//
// T:\3-alibredesign\SelectionAddOnSample\Debug\AlibreX_64.tli
//
// Wrapper implementations for type library C:\Program Files\Alibre Design 28.0.4.28141\Program\AlibreX_64.tlb
// compiler-generated file - DO NOT EDIT!


//
// interface DIEnum wrapper method implementations
//

#pragma implementation_key(1)
inline IDispatchPtr AlibreX::DIEnum::GetNextElement ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_NextElement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2)
inline VARIANT_BOOL AlibreX::DIEnum::HasMoreElements ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasMoreElements(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAD2DPoint wrapper method implementations
//

#pragma implementation_key(3)
inline double AlibreX::IAD2DPoint::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4)
inline double AlibreX::IAD2DPoint::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAD3DSketchPoint wrapper method implementations
//

#pragma implementation_key(5)
inline double AlibreX::IAD3DSketchPoint::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6)
inline double AlibreX::IAD3DSketchPoint::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(7)
inline double AlibreX::IAD3DSketchPoint::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(8)
inline VARIANT_BOOL AlibreX::IAD3DSketchPoint::GetIsSketchNode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSketchNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAD3DSketchCircularArc wrapper method implementations
//

#pragma implementation_key(9)
inline AlibreX::IAD3DSketchPointPtr AlibreX::IAD3DSketchCircularArc::GetCenter ( ) {
    struct IAD3DSketchPoint * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPointPtr(_result, false);
}

#pragma implementation_key(10)
inline double AlibreX::IAD3DSketchCircularArc::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(11)
inline AlibreX::IAD3DSketchPointPtr AlibreX::IAD3DSketchCircularArc::GetStart ( ) {
    struct IAD3DSketchPoint * _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPointPtr(_result, false);
}

#pragma implementation_key(12)
inline AlibreX::IAD3DSketchPointPtr AlibreX::IAD3DSketchCircularArc::GetEnd ( ) {
    struct IAD3DSketchPoint * _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPointPtr(_result, false);
}

#pragma implementation_key(13)
inline double AlibreX::IAD3DSketchCircularArc::GetIncludedAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_IncludedAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(14)
inline VARIANT_BOOL AlibreX::IAD3DSketchCircularArc::GetIsRightHandRule ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRightHandRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAD3DSketchEllipse wrapper method implementations
//

#pragma implementation_key(15)
inline AlibreX::IAD3DSketchPointPtr AlibreX::IAD3DSketchEllipse::GetCenter ( ) {
    struct IAD3DSketchPoint * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPointPtr(_result, false);
}

#pragma implementation_key(16)
inline AlibreX::IAD3DSketchPointPtr AlibreX::IAD3DSketchEllipse::GetMajorRadiusPoint ( ) {
    struct IAD3DSketchPoint * _result = 0;
    HRESULT _hr = get_MajorRadiusPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPointPtr(_result, false);
}

#pragma implementation_key(17)
inline AlibreX::IAD3DSketchPointPtr AlibreX::IAD3DSketchEllipse::GetMinorRadiusPoint ( ) {
    struct IAD3DSketchPoint * _result = 0;
    HRESULT _hr = get_MinorRadiusPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPointPtr(_result, false);
}

//
// interface IAD3DSketchEllipticArc wrapper method implementations
//

#pragma implementation_key(18)
inline AlibreX::IAD3DSketchPointPtr AlibreX::IAD3DSketchEllipticArc::GetCenter ( ) {
    struct IAD3DSketchPoint * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPointPtr(_result, false);
}

#pragma implementation_key(19)
inline AlibreX::IAD3DSketchPointPtr AlibreX::IAD3DSketchEllipticArc::GetMajorRadiusPoint ( ) {
    struct IAD3DSketchPoint * _result = 0;
    HRESULT _hr = get_MajorRadiusPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPointPtr(_result, false);
}

#pragma implementation_key(20)
inline AlibreX::IAD3DSketchPointPtr AlibreX::IAD3DSketchEllipticArc::GetMinorRadiusPoint ( ) {
    struct IAD3DSketchPoint * _result = 0;
    HRESULT _hr = get_MinorRadiusPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPointPtr(_result, false);
}

#pragma implementation_key(21)
inline AlibreX::IAD3DSketchPointPtr AlibreX::IAD3DSketchEllipticArc::GetStart ( ) {
    struct IAD3DSketchPoint * _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPointPtr(_result, false);
}

#pragma implementation_key(22)
inline AlibreX::IAD3DSketchPointPtr AlibreX::IAD3DSketchEllipticArc::GetEnd ( ) {
    struct IAD3DSketchPoint * _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPointPtr(_result, false);
}

#pragma implementation_key(23)
inline VARIANT_BOOL AlibreX::IAD3DSketchEllipticArc::GetIsRightHandRule ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRightHandRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAD3DSketchLine wrapper method implementations
//

#pragma implementation_key(24)
inline AlibreX::IAD3DSketchPointPtr AlibreX::IAD3DSketchLine::GetStart ( ) {
    struct IAD3DSketchPoint * _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPointPtr(_result, false);
}

#pragma implementation_key(25)
inline AlibreX::IAD3DSketchPointPtr AlibreX::IAD3DSketchLine::GetEnd ( ) {
    struct IAD3DSketchPoint * _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPointPtr(_result, false);
}

#pragma implementation_key(26)
inline double AlibreX::IAD3DSketchLine::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADAutoBrepImportSummary wrapper method implementations
//

#pragma implementation_key(27)
inline _bstr_t AlibreX::IADAutoBrepImportSummary::GetFailReason ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FailReason(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(28)
inline long AlibreX::IADAutoBrepImportSummary::GetNum_MeshComponent ( ) {
    long _result = 0;
    HRESULT _hr = get_Num_MeshComponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(29)
inline VARIANT_BOOL AlibreX::IADAutoBrepImportSummary::GetIsMeshHealed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsMeshHealed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(30)
inline _bstr_t AlibreX::IADAutoBrepImportSummary::GetPlannarFallbackReason ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PlannarFallbackReason(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(31)
inline _bstr_t AlibreX::IADAutoBrepImportSummary::GetIsCreatedByFallback ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IsCreatedByFallback(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(32)
inline _bstr_t AlibreX::IADAutoBrepImportSummary::GetSegmentationTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SegmentationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(33)
inline _bstr_t AlibreX::IADAutoBrepImportSummary::GetGMCADCreationTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GMCADCreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(34)
inline _bstr_t AlibreX::IADAutoBrepImportSummary::GetCADCreationFromGMCADTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CADCreationFromGMCADTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(35)
inline _bstr_t AlibreX::IADAutoBrepImportSummary::GetCADExportTime ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CADExportTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IADBsplineCurve wrapper method implementations
//

#pragma implementation_key(36)
inline HRESULT AlibreX::IADBsplineCurve::GetDefinition ( long * pOrder, long * pNumPoles, long * pNumKnots, VARIANT_BOOL * pIsRational, VARIANT_BOOL * pIsClosed, VARIANT_BOOL * pIsPlanar ) {
    HRESULT _hr = raw_GetDefinition(pOrder, pNumPoles, pNumKnots, pIsRational, pIsClosed, pIsPlanar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(37)
inline HRESULT AlibreX::IADBsplineCurve::GetData ( SAFEARRAY * * pKnots, SAFEARRAY * * pPoles, SAFEARRAY * * pWeights ) {
    HRESULT _hr = raw_GetData(pKnots, pPoles, pWeights);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IADBsplineSurface wrapper method implementations
//

#pragma implementation_key(38)
inline HRESULT AlibreX::IADBsplineSurface::GetDefinition ( long * pOrderU, long * pOrderV, long * pNumPolesU, long * pNumPolesV, long * pNumKnotsU, long * pNumKnotsV, VARIANT_BOOL * pIsRational, VARIANT_BOOL * pIsClosedU, VARIANT_BOOL * pvIsClosedV, VARIANT_BOOL * pIsPlanar ) {
    HRESULT _hr = raw_GetDefinition(pOrderU, pOrderV, pNumPolesU, pNumPolesV, pNumKnotsU, pNumKnotsV, pIsRational, pIsClosedU, pvIsClosedV, pIsPlanar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(39)
inline HRESULT AlibreX::IADBsplineSurface::GetData ( SAFEARRAY * * pKnotsU, SAFEARRAY * * pKnotsV, SAFEARRAY * * pPoles, SAFEARRAY * * pWeights ) {
    HRESULT _hr = raw_GetData(pKnotsU, pKnotsV, pPoles, pWeights);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IADDataFont wrapper method implementations
//

#pragma implementation_key(40)
inline enum AlibreX::ADObjectType AlibreX::IADDataFont::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(41)
inline _bstr_t AlibreX::IADDataFont::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(42)
inline double AlibreX::IADDataFont::GetSize ( ) {
    double _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(43)
inline VARIANT_BOOL AlibreX::IADDataFont::GetIsItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(44)
inline VARIANT_BOOL AlibreX::IADDataFont::GetIsUnderline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUnderline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(45)
inline VARIANT_BOOL AlibreX::IADDataFont::GetIsStrikeThrough ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsStrikeThrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADDesignProperties wrapper method implementations
//

#pragma implementation_key(46)
inline enum AlibreX::ADUnits AlibreX::IADDesignProperties::GetModelUnits ( ) {
    enum ADUnits _result;
    HRESULT _hr = get_ModelUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(47)
inline enum AlibreX::ADUnits AlibreX::IADDesignProperties::GetMassUnits ( ) {
    enum ADUnits _result;
    HRESULT _hr = get_MassUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(48)
inline double AlibreX::IADDesignProperties::GetDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_Density(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(49)
inline void AlibreX::IADDesignProperties::PutDensity ( double pRetVal ) {
    HRESULT _hr = put_Density(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(50)
inline _bstr_t AlibreX::IADDesignProperties::GetNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(51)
inline void AlibreX::IADDesignProperties::PutNumber ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Number(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(52)
inline _bstr_t AlibreX::IADDesignProperties::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(53)
inline void AlibreX::IADDesignProperties::PutDescription ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Description(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(54)
inline enum AlibreX::ADUnits AlibreX::IADDesignProperties::GetLengthDisplayUnits ( ) {
    enum ADUnits _result;
    HRESULT _hr = get_LengthDisplayUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(55)
inline enum AlibreX::ADUnits AlibreX::IADDesignProperties::GetAngleDisplayUnits ( ) {
    enum ADUnits _result;
    HRESULT _hr = get_AngleDisplayUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(56)
inline _variant_t AlibreX::IADDesignProperties::ExtendedDesignProperty ( enum ADExtendedDesignProperty propertyID ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ExtendedDesignProperty(propertyID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(57)
inline HRESULT AlibreX::IADDesignProperties::ExtendedDesignProperty_2 ( enum ADExtendedDesignProperty propertyID, const _variant_t & propertyValue ) {
    HRESULT _hr = raw_ExtendedDesignProperty_2(propertyID, propertyValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(58)
inline _bstr_t AlibreX::IADDesignProperties::GetMaterial ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Material(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(59)
inline void AlibreX::IADDesignProperties::PutMaterial ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Material(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(60)
inline _variant_t AlibreX::IADDesignProperties::CustomProperty ( _bstr_t propertyName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_CustomProperty(propertyName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(61)
inline HRESULT AlibreX::IADDesignProperties::CustomProperty_2 ( _bstr_t propertyName, const _variant_t & propertyValue ) {
    HRESULT _hr = raw_CustomProperty_2(propertyName, propertyValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(62)
inline VARIANT_BOOL AlibreX::IADDesignProperties::GetTreatAsPartInBOM ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TreatAsPartInBOM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(63)
inline void AlibreX::IADDesignProperties::PutTreatAsPartInBOM ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_TreatAsPartInBOM(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IADDrawingProperties wrapper method implementations
//

#pragma implementation_key(64)
inline enum AlibreX::ADUnits AlibreX::IADDrawingProperties::GetLengthUnits ( ) {
    enum ADUnits _result;
    HRESULT _hr = get_LengthUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(65)
inline enum AlibreX::ADUnits AlibreX::IADDrawingProperties::GetAngleUnits ( ) {
    enum ADUnits _result;
    HRESULT _hr = get_AngleUnits(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(66)
inline _bstr_t AlibreX::IADDrawingProperties::GetNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(67)
inline void AlibreX::IADDrawingProperties::PutNumber ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Number(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(68)
inline _bstr_t AlibreX::IADDrawingProperties::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(69)
inline void AlibreX::IADDrawingProperties::PutDescription ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Description(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IADDrawingSelectionFilter wrapper method implementations
//

#pragma implementation_key(70)
inline VARIANT_BOOL AlibreX::IADDrawingSelectionFilter::GetViews ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Views(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(71)
inline void AlibreX::IADDrawingSelectionFilter::PutViews ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Views(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(72)
inline VARIANT_BOOL AlibreX::IADDrawingSelectionFilter::GetParts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Parts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(73)
inline void AlibreX::IADDrawingSelectionFilter::PutParts ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Parts(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(74)
inline VARIANT_BOOL AlibreX::IADDrawingSelectionFilter::GetSegments ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Segments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(75)
inline void AlibreX::IADDrawingSelectionFilter::PutSegments ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Segments(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(76)
inline VARIANT_BOOL AlibreX::IADDrawingSelectionFilter::GetSketches2D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sketches2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(77)
inline void AlibreX::IADDrawingSelectionFilter::PutSketches2D ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Sketches2D(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(78)
inline VARIANT_BOOL AlibreX::IADDrawingSelectionFilter::GetVertices ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(79)
inline void AlibreX::IADDrawingSelectionFilter::PutVertices ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Vertices(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(80)
inline VARIANT_BOOL AlibreX::IADDrawingSelectionFilter::GetDimensions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dimensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(81)
inline void AlibreX::IADDrawingSelectionFilter::PutDimensions ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Dimensions(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(82)
inline VARIANT_BOOL AlibreX::IADDrawingSelectionFilter::GetAnnotations ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Annotations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(83)
inline void AlibreX::IADDrawingSelectionFilter::PutAnnotations ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Annotations(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(84)
inline VARIANT_BOOL AlibreX::IADDrawingSelectionFilter::GetRedlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Redlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(85)
inline void AlibreX::IADDrawingSelectionFilter::PutRedlines ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Redlines(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IADIGESOptions wrapper method implementations
//

#pragma implementation_key(86)
inline VARIANT_BOOL AlibreX::IADIGESOptions::GetIsMSBO ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsMSBO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(87)
inline void AlibreX::IADIGESOptions::PutIsMSBO ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_IsMSBO(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(88)
inline VARIANT_BOOL AlibreX::IADIGESOptions::GetIsAutoCAD ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsAutoCAD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(89)
inline void AlibreX::IADIGESOptions::PutIsAutoCAD ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_IsAutoCAD(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(90)
inline VARIANT_BOOL AlibreX::IADIGESOptions::GetIsJAMA ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsJAMA(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(91)
inline void AlibreX::IADIGESOptions::PutIsJAMA ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_IsJAMA(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(92)
inline VARIANT_BOOL AlibreX::IADIGESOptions::GetHasWireAsCopiousData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasWireAsCopiousData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(93)
inline void AlibreX::IADIGESOptions::PutHasWireAsCopiousData ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_HasWireAsCopiousData(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(94)
inline VARIANT_BOOL AlibreX::IADIGESOptions::GetHasTrimmedCurves ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTrimmedCurves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(95)
inline void AlibreX::IADIGESOptions::PutHasTrimmedCurves ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_HasTrimmedCurves(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(96)
inline VARIANT_BOOL AlibreX::IADIGESOptions::GetHasTrimSurfacesAsNURBS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTrimSurfacesAsNURBS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(97)
inline void AlibreX::IADIGESOptions::PutHasTrimSurfacesAsNURBS ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_HasTrimSurfacesAsNURBS(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(98)
inline VARIANT_BOOL AlibreX::IADIGESOptions::GetHasEllipsesAsNURBS ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasEllipsesAsNURBS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(99)
inline void AlibreX::IADIGESOptions::PutHasEllipsesAsNURBS ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_HasEllipsesAsNURBS(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(100)
inline VARIANT_BOOL AlibreX::IADIGESOptions::GetHasBoundedSurfaces ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBoundedSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(101)
inline void AlibreX::IADIGESOptions::PutHasBoundedSurfaces ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_HasBoundedSurfaces(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(102)
inline enum AlibreX::ADUnits AlibreX::IADIGESOptions::GetUnits ( ) {
    enum ADUnits _result;
    HRESULT _hr = get_Units(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(103)
inline void AlibreX::IADIGESOptions::PutUnits ( enum ADUnits pRetVal ) {
    HRESULT _hr = put_Units(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(104)
inline long AlibreX::IADIGESOptions::GetEOLLength ( ) {
    long _result = 0;
    HRESULT _hr = get_EOLLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(105)
inline void AlibreX::IADIGESOptions::PutEOLLength ( long pRetVal ) {
    HRESULT _hr = put_EOLLength(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IADDesignSelectionFilter wrapper method implementations
//

#pragma implementation_key(106)
inline enum AlibreX::ADSelectionFilterOption AlibreX::IADDesignSelectionFilter::GetSolid ( ) {
    enum ADSelectionFilterOption _result;
    HRESULT _hr = get_Solid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(107)
inline void AlibreX::IADDesignSelectionFilter::PutSolid ( enum ADSelectionFilterOption pRetVal ) {
    HRESULT _hr = put_Solid(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(108)
inline enum AlibreX::ADSelectionFilterOption AlibreX::IADDesignSelectionFilter::GetSurface ( ) {
    enum ADSelectionFilterOption _result;
    HRESULT _hr = get_Surface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(109)
inline void AlibreX::IADDesignSelectionFilter::PutSurface ( enum ADSelectionFilterOption pRetVal ) {
    HRESULT _hr = put_Surface(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(110)
inline VARIANT_BOOL AlibreX::IADDesignSelectionFilter::GetPlanes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Planes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(111)
inline void AlibreX::IADDesignSelectionFilter::PutPlanes ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Planes(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(112)
inline VARIANT_BOOL AlibreX::IADDesignSelectionFilter::GetAxes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Axes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(113)
inline void AlibreX::IADDesignSelectionFilter::PutAxes ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Axes(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(114)
inline VARIANT_BOOL AlibreX::IADDesignSelectionFilter::GetPoints ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(115)
inline void AlibreX::IADDesignSelectionFilter::PutPoints ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Points(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(116)
inline VARIANT_BOOL AlibreX::IADDesignSelectionFilter::GetSketches2D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sketches2D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(117)
inline void AlibreX::IADDesignSelectionFilter::PutSketches2D ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Sketches2D(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(118)
inline VARIANT_BOOL AlibreX::IADDesignSelectionFilter::GetSketches3D ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sketches3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(119)
inline void AlibreX::IADDesignSelectionFilter::PutSketches3D ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Sketches3D(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(120)
inline VARIANT_BOOL AlibreX::IADDesignSelectionFilter::GetDimensions ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dimensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(121)
inline void AlibreX::IADDesignSelectionFilter::PutDimensions ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Dimensions(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(122)
inline VARIANT_BOOL AlibreX::IADDesignSelectionFilter::GetAnnotations ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Annotations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(123)
inline void AlibreX::IADDesignSelectionFilter::PutAnnotations ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Annotations(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(124)
inline VARIANT_BOOL AlibreX::IADDesignSelectionFilter::GetRedlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Redlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(125)
inline void AlibreX::IADDesignSelectionFilter::PutRedlines ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Redlines(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IADPoint wrapper method implementations
//

#pragma implementation_key(126)
inline double AlibreX::IADPoint::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(127)
inline double AlibreX::IADPoint::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(128)
inline double AlibreX::IADPoint::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAD3DSketchBspline wrapper method implementations
//

#pragma implementation_key(129)
inline HRESULT AlibreX::IAD3DSketchBspline::GetDefinition ( long * pOrder, long * pNumCtlPoints, long * pNumKnots, VARIANT_BOOL * pIsRational, VARIANT_BOOL * pIsClosed, VARIANT_BOOL * pIsPlanar ) {
    HRESULT _hr = raw_GetDefinition(pOrder, pNumCtlPoints, pNumKnots, pIsRational, pIsClosed, pIsPlanar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(130)
inline HRESULT AlibreX::IAD3DSketchBspline::GetData ( SAFEARRAY * * pCtlPoints, SAFEARRAY * * pKnotVector, SAFEARRAY * * pWeights ) {
    HRESULT _hr = raw_GetData(pCtlPoints, pKnotVector, pWeights);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(131)
inline AlibreX::IADPointPtr AlibreX::IAD3DSketchBspline::GetStartPoint ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_StartPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(132)
inline AlibreX::IADPointPtr AlibreX::IAD3DSketchBspline::GetEndPoint ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_EndPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

//
// interface IADPhysicalProperties wrapper method implementations
//

#pragma implementation_key(133)
inline long AlibreX::IADPhysicalProperties::GetPartsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_PartsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(134)
inline long AlibreX::IADPhysicalProperties::GetLumpsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_LumpsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(135)
inline long AlibreX::IADPhysicalProperties::GetFacesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_FacesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(136)
inline long AlibreX::IADPhysicalProperties::GetEdgesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(137)
inline long AlibreX::IADPhysicalProperties::GetVerticesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_VerticesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(138)
inline long AlibreX::IADPhysicalProperties::GetUniquePartsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_UniquePartsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(139)
inline HRESULT AlibreX::IADPhysicalProperties::GetExtents ( struct IADPoint * * ppLower, struct IADPoint * * ppUpper ) {
    HRESULT _hr = raw_GetExtents(ppLower, ppUpper);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(140)
inline double AlibreX::IADPhysicalProperties::GetVolume ( ) {
    double _result = 0;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(141)
inline double AlibreX::IADPhysicalProperties::GetMass ( ) {
    double _result = 0;
    HRESULT _hr = get_Mass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(142)
inline HRESULT AlibreX::IADPhysicalProperties::GetCenterOfGravity ( double * pX, double * pY, double * pZ ) {
    HRESULT _hr = raw_GetCenterOfGravity(pX, pY, pZ);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(143)
inline double AlibreX::IADPhysicalProperties::GetSurfaceArea ( ) {
    double _result = 0;
    HRESULT _hr = get_SurfaceArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(144)
inline HRESULT AlibreX::IADPhysicalProperties::GetMomentsOfInertia ( double * pXX, double * pYY, double * pZZ, double * pYZ, double * pZX, double * pXY ) {
    HRESULT _hr = raw_GetMomentsOfInertia(pXX, pYY, pZZ, pYZ, pZX, pXY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(145)
inline HRESULT AlibreX::IADPhysicalProperties::GetPrincipalMomentsOfInertia ( double * pM1, double * pM2, double * pM3 ) {
    HRESULT _hr = raw_GetPrincipalMomentsOfInertia(pM1, pM2, pM3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(146)
inline HRESULT AlibreX::IADPhysicalProperties::GetPrincipalAxis1 ( double * pX, double * pY, double * pZ ) {
    HRESULT _hr = raw_GetPrincipalAxis1(pX, pY, pZ);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(147)
inline HRESULT AlibreX::IADPhysicalProperties::GetPrincipalAxis2 ( double * pX, double * pY, double * pZ ) {
    HRESULT _hr = raw_GetPrincipalAxis2(pX, pY, pZ);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(148)
inline HRESULT AlibreX::IADPhysicalProperties::GetPrincipalAxis3 ( double * pX, double * pY, double * pZ ) {
    HRESULT _hr = raw_GetPrincipalAxis3(pX, pY, pZ);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(149)
inline _bstr_t AlibreX::IADPhysicalProperties::GetMaterial ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Material(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IADPrintabilityCheckResults wrapper method implementations
//

#pragma implementation_key(150)
inline long AlibreX::IADPrintabilityCheckResults::GetWallThicknessErrors ( ) {
    long _result = 0;
    HRESULT _hr = get_WallThicknessErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(151)
inline long AlibreX::IADPrintabilityCheckResults::GetGapThicknessErrors ( ) {
    long _result = 0;
    HRESULT _hr = get_GapThicknessErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(152)
inline long AlibreX::IADPrintabilityCheckResults::GetInterlockingErrors ( ) {
    long _result = 0;
    HRESULT _hr = get_InterlockingErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(153)
inline long AlibreX::IADPrintabilityCheckResults::GetVoidErrors ( ) {
    long _result = 0;
    HRESULT _hr = get_VoidErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(154)
inline long AlibreX::IADPrintabilityCheckResults::GetBottleneckErrors ( ) {
    long _result = 0;
    HRESULT _hr = get_BottleneckErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(155)
inline long AlibreX::IADPrintabilityCheckResults::GetOverhangErrors ( ) {
    long _result = 0;
    HRESULT _hr = get_OverhangErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(156)
inline long AlibreX::IADPrintabilityCheckResults::GetManifoldsolidErrors ( ) {
    long _result = 0;
    HRESULT _hr = get_ManifoldsolidErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(157)
inline _bstr_t AlibreX::IADPrintabilityCheckResults::GetPrinterName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrinterName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(158)
inline long AlibreX::IADPrintabilityCheckResults::GetModelSizeError ( ) {
    long _result = 0;
    HRESULT _hr = get_ModelSizeError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADSketchBspline wrapper method implementations
//

#pragma implementation_key(159)
inline HRESULT AlibreX::IADSketchBspline::GetDefinition ( long * pOrder, long * pNumCtlPoints, long * pNumKnots, VARIANT_BOOL * pIsRational, VARIANT_BOOL * pIsClosed, VARIANT_BOOL * pIsPeriodic ) {
    HRESULT _hr = raw_GetDefinition(pOrder, pNumCtlPoints, pNumKnots, pIsRational, pIsClosed, pIsPeriodic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(160)
inline HRESULT AlibreX::IADSketchBspline::GetBsplineData ( SAFEARRAY * * pCtlPoints, SAFEARRAY * * pKnotVector, SAFEARRAY * * pWeights ) {
    HRESULT _hr = raw_GetBsplineData(pCtlPoints, pKnotVector, pWeights);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(161)
inline AlibreX::IAD2DPointPtr AlibreX::IADSketchBspline::GetStartPoint ( ) {
    struct IAD2DPoint * _result = 0;
    HRESULT _hr = get_StartPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD2DPointPtr(_result, false);
}

#pragma implementation_key(162)
inline AlibreX::IAD2DPointPtr AlibreX::IADSketchBspline::GetEndPoint ( ) {
    struct IAD2DPoint * _result = 0;
    HRESULT _hr = get_EndPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD2DPointPtr(_result, false);
}

//
// interface IADSketchPoint wrapper method implementations
//

#pragma implementation_key(163)
inline double AlibreX::IADSketchPoint::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(164)
inline double AlibreX::IADSketchPoint::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(165)
inline VARIANT_BOOL AlibreX::IADSketchPoint::GetIsSketchNode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSketchNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADSketchCircle wrapper method implementations
//

#pragma implementation_key(166)
inline AlibreX::IADSketchPointPtr AlibreX::IADSketchCircle::GetCenter ( ) {
    struct IADSketchPoint * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPointPtr(_result, false);
}

#pragma implementation_key(167)
inline double AlibreX::IADSketchCircle::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADSketchCircularArc wrapper method implementations
//

#pragma implementation_key(168)
inline AlibreX::IADSketchPointPtr AlibreX::IADSketchCircularArc::GetCenter ( ) {
    struct IADSketchPoint * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPointPtr(_result, false);
}

#pragma implementation_key(169)
inline double AlibreX::IADSketchCircularArc::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(170)
inline AlibreX::IADSketchPointPtr AlibreX::IADSketchCircularArc::GetStart ( ) {
    struct IADSketchPoint * _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPointPtr(_result, false);
}

#pragma implementation_key(171)
inline AlibreX::IADSketchPointPtr AlibreX::IADSketchCircularArc::GetEnd ( ) {
    struct IADSketchPoint * _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPointPtr(_result, false);
}

#pragma implementation_key(172)
inline double AlibreX::IADSketchCircularArc::GetIncludedAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_IncludedAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(173)
inline VARIANT_BOOL AlibreX::IADSketchCircularArc::GetIsRightHandRule ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRightHandRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADSketchEllipse wrapper method implementations
//

#pragma implementation_key(174)
inline AlibreX::IADSketchPointPtr AlibreX::IADSketchEllipse::GetCenter ( ) {
    struct IADSketchPoint * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPointPtr(_result, false);
}

#pragma implementation_key(175)
inline double AlibreX::IADSketchEllipse::GetMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(176)
inline double AlibreX::IADSketchEllipse::GetMinorMajorRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorMajorRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(177)
inline double AlibreX::IADSketchEllipse::GetMajorAxisAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorAxisAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADSketchEllipticArc wrapper method implementations
//

#pragma implementation_key(178)
inline AlibreX::IADSketchPointPtr AlibreX::IADSketchEllipticArc::GetCenter ( ) {
    struct IADSketchPoint * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPointPtr(_result, false);
}

#pragma implementation_key(179)
inline double AlibreX::IADSketchEllipticArc::GetMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(180)
inline double AlibreX::IADSketchEllipticArc::GetMinorMajorRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorMajorRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(181)
inline AlibreX::IADSketchPointPtr AlibreX::IADSketchEllipticArc::GetStart ( ) {
    struct IADSketchPoint * _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPointPtr(_result, false);
}

#pragma implementation_key(182)
inline AlibreX::IADSketchPointPtr AlibreX::IADSketchEllipticArc::GetEnd ( ) {
    struct IADSketchPoint * _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPointPtr(_result, false);
}

#pragma implementation_key(183)
inline double AlibreX::IADSketchEllipticArc::GetMajorAxisAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorAxisAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(184)
inline VARIANT_BOOL AlibreX::IADSketchEllipticArc::GetIsRightHandRule ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRightHandRule(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADSketchLine wrapper method implementations
//

#pragma implementation_key(185)
inline AlibreX::IADSketchPointPtr AlibreX::IADSketchLine::GetStart ( ) {
    struct IADSketchPoint * _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPointPtr(_result, false);
}

#pragma implementation_key(186)
inline AlibreX::IADSketchPointPtr AlibreX::IADSketchLine::GetEnd ( ) {
    struct IADSketchPoint * _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPointPtr(_result, false);
}

#pragma implementation_key(187)
inline double AlibreX::IADSketchLine::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADSketchText wrapper method implementations
//

#pragma implementation_key(188)
inline _bstr_t AlibreX::IADSketchText::GetTextString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(189)
inline void AlibreX::IADSketchText::PutTextString ( _bstr_t pRetVal ) {
    HRESULT _hr = put_TextString(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(190)
inline _bstr_t AlibreX::IADSketchText::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(191)
inline void AlibreX::IADSketchText::PutFontName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_FontName(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(192)
inline VARIANT_BOOL AlibreX::IADSketchText::GetBold ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(193)
inline void AlibreX::IADSketchText::PutBold ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Bold(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(194)
inline VARIANT_BOOL AlibreX::IADSketchText::GetItalic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(195)
inline void AlibreX::IADSketchText::PutItalic ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Italic(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IADSphere wrapper method implementations
//

#pragma implementation_key(196)
inline AlibreX::IADPointPtr AlibreX::IADSphere::GetCenter ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(197)
inline double AlibreX::IADSphere::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADTappedThreadInfo wrapper method implementations
//

#pragma implementation_key(198)
inline enum AlibreX::ADTappedThreadType AlibreX::IADTappedThreadInfo::GetthreadType ( ) {
    enum ADTappedThreadType _result;
    HRESULT _hr = get_threadType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(199)
inline _bstr_t AlibreX::IADTappedThreadInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(200)
inline _bstr_t AlibreX::IADTappedThreadInfo::GetthreadClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_threadClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(201)
inline double AlibreX::IADTappedThreadInfo::GetPitch ( ) {
    double _result = 0;
    HRESULT _hr = get_Pitch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(202)
inline double AlibreX::IADTappedThreadInfo::GettapDrillDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_tapDrillDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(203)
inline double AlibreX::IADTappedThreadInfo::GetMajorDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(204)
inline double AlibreX::IADTappedThreadInfo::GetMinorDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(205)
inline double AlibreX::IADTappedThreadInfo::GetpitchDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_pitchDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(206)
inline double AlibreX::IADTappedThreadInfo::GetThreadLength ( ) {
    double _result = 0;
    HRESULT _hr = get_ThreadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(207)
inline VARIANT_BOOL AlibreX::IADTappedThreadInfo::GetIsValidThread ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValidThread(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADTopologySummary wrapper method implementations
//

#pragma implementation_key(208)
inline long AlibreX::IADTopologySummary::GetFacesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_FacesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(209)
inline long AlibreX::IADTopologySummary::GetEdgesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(210)
inline long AlibreX::IADTopologySummary::GetVerticesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_VerticesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(211)
inline long AlibreX::IADTopologySummary::GetLumpsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_LumpsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(212)
inline long AlibreX::IADTopologySummary::GetShellsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ShellsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(213)
inline long AlibreX::IADTopologySummary::GetCoedgesCount ( ) {
    long _result = 0;
    HRESULT _hr = get_CoedgesCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(214)
inline long AlibreX::IADTopologySummary::GetLoopsCount ( ) {
    long _result = 0;
    HRESULT _hr = get_LoopsCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(215)
inline long AlibreX::IADTopologySummary::GetWiresCount ( ) {
    long _result = 0;
    HRESULT _hr = get_WiresCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADVector wrapper method implementations
//

#pragma implementation_key(216)
inline double AlibreX::IADVector::GetX ( ) {
    double _result = 0;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(217)
inline double AlibreX::IADVector::GetY ( ) {
    double _result = 0;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(218)
inline double AlibreX::IADVector::GetZ ( ) {
    double _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(219)
inline VARIANT_BOOL AlibreX::IADVector::IsEqualTo ( struct IADVector * pVector ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsEqualTo(pVector, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(220)
inline AlibreX::IADVectorPtr AlibreX::IADVector::Normalize ( ) {
    struct IADVector * _result = 0;
    HRESULT _hr = raw_Normalize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(221)
inline double AlibreX::IADVector::GetLength ( ) {
    double _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAD3DSketchCircle wrapper method implementations
//

#pragma implementation_key(222)
inline AlibreX::IAD3DSketchPointPtr AlibreX::IAD3DSketchCircle::GetCenter ( ) {
    struct IAD3DSketchPoint * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPointPtr(_result, false);
}

#pragma implementation_key(223)
inline AlibreX::IADVectorPtr AlibreX::IAD3DSketchCircle::GetNormal ( ) {
    struct IADVector * _result = 0;
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(224)
inline double AlibreX::IAD3DSketchCircle::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADCircle wrapper method implementations
//

#pragma implementation_key(225)
inline AlibreX::IADPointPtr AlibreX::IADCircle::GetCenter ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(226)
inline AlibreX::IADVectorPtr AlibreX::IADCircle::GetAxis ( ) {
    struct IADVector * _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(227)
inline double AlibreX::IADCircle::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADCircularArc wrapper method implementations
//

#pragma implementation_key(228)
inline AlibreX::IADPointPtr AlibreX::IADCircularArc::GetCenter ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(229)
inline AlibreX::IADVectorPtr AlibreX::IADCircularArc::GetAxis ( ) {
    struct IADVector * _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(230)
inline double AlibreX::IADCircularArc::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(231)
inline AlibreX::IADPointPtr AlibreX::IADCircularArc::GetStart ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(232)
inline AlibreX::IADPointPtr AlibreX::IADCircularArc::GetEnd ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

//
// interface IADCone wrapper method implementations
//

#pragma implementation_key(233)
inline AlibreX::IADPointPtr AlibreX::IADCone::GetBasePoint ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_BasePoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(234)
inline AlibreX::IADVectorPtr AlibreX::IADCone::GetAxis ( ) {
    struct IADVector * _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(235)
inline double AlibreX::IADCone::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(236)
inline double AlibreX::IADCone::GetHalfAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_HalfAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(237)
inline VARIANT_BOOL AlibreX::IADCone::GetIsExpanding ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsExpanding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADCurve wrapper method implementations
//

#pragma implementation_key(238)
inline enum AlibreX::ADObjectType AlibreX::IADCurve::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(239)
inline enum AlibreX::ADGeometryType AlibreX::IADCurve::GetCurveType ( ) {
    enum ADGeometryType _result;
    HRESULT _hr = get_CurveType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(240)
inline AlibreX::IADPointPtr AlibreX::IADCurve::PointAtParam ( double pParam ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = raw_PointAtParam(pParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(241)
inline double AlibreX::IADCurve::ParamAtPoint ( struct IADPoint * pPoint ) {
    double _result = 0;
    HRESULT _hr = raw_ParamAtPoint(pPoint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(242)
inline HRESULT AlibreX::IADCurve::GetParameterExtents ( double * pParamMin, double * pParamMax ) {
    HRESULT _hr = raw_GetParameterExtents(pParamMin, pParamMax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(243)
inline AlibreX::IADVectorPtr AlibreX::IADCurve::Curvature ( double pParam ) {
    struct IADVector * _result = 0;
    HRESULT _hr = raw_Curvature(pParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(244)
inline AlibreX::IADVectorPtr AlibreX::IADCurve::Tangent ( double pParam ) {
    struct IADVector * _result = 0;
    HRESULT _hr = raw_Tangent(pParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(245)
inline VARIANT_BOOL AlibreX::IADCurve::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsClosed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(246)
inline VARIANT_BOOL AlibreX::IADCurve::GetClosestPoint ( double pointX, double pointY, double pointZ, struct IADPoint * * ppClosestPoint, double * pDistance ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetClosestPoint(pointX, pointY, pointZ, ppClosestPoint, pDistance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADCylinder wrapper method implementations
//

#pragma implementation_key(247)
inline AlibreX::IADPointPtr AlibreX::IADCylinder::GetBasePoint ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_BasePoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(248)
inline AlibreX::IADVectorPtr AlibreX::IADCylinder::GetAxis ( ) {
    struct IADVector * _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(249)
inline double AlibreX::IADCylinder::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADEllipse wrapper method implementations
//

#pragma implementation_key(250)
inline AlibreX::IADPointPtr AlibreX::IADEllipse::GetCenter ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(251)
inline AlibreX::IADVectorPtr AlibreX::IADEllipse::GetAxis ( ) {
    struct IADVector * _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(252)
inline double AlibreX::IADEllipse::GetMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(253)
inline double AlibreX::IADEllipse::GetMinorMajorRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorMajorRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADEllipticalArc wrapper method implementations
//

#pragma implementation_key(254)
inline AlibreX::IADPointPtr AlibreX::IADEllipticalArc::GetCenter ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(255)
inline AlibreX::IADVectorPtr AlibreX::IADEllipticalArc::GetAxis ( ) {
    struct IADVector * _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(256)
inline double AlibreX::IADEllipticalArc::GetMajorAxis ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(257)
inline double AlibreX::IADEllipticalArc::GetMinorMajorRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorMajorRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(258)
inline AlibreX::IADPointPtr AlibreX::IADEllipticalArc::GetStart ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(259)
inline AlibreX::IADPointPtr AlibreX::IADEllipticalArc::GetEnd ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

//
// interface IADLine wrapper method implementations
//

#pragma implementation_key(260)
inline AlibreX::IADPointPtr AlibreX::IADLine::GetStartPoint ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_StartPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(261)
inline AlibreX::IADVectorPtr AlibreX::IADLine::GetDirectionVector ( ) {
    struct IADVector * _result = 0;
    HRESULT _hr = get_DirectionVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

//
// interface IADPlane wrapper method implementations
//

#pragma implementation_key(262)
inline AlibreX::IADPointPtr AlibreX::IADPlane::GetRootPoint ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_RootPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(263)
inline AlibreX::IADVectorPtr AlibreX::IADPlane::GetNormal ( ) {
    struct IADVector * _result = 0;
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

//
// interface IADSurface wrapper method implementations
//

#pragma implementation_key(264)
inline enum AlibreX::ADObjectType AlibreX::IADSurface::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(265)
inline enum AlibreX::ADGeometryType AlibreX::IADSurface::GetSurfaceType ( ) {
    enum ADGeometryType _result;
    HRESULT _hr = get_SurfaceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(266)
inline AlibreX::IADVectorPtr AlibreX::IADSurface::NormalAtParam ( double puParam, double pvParam ) {
    struct IADVector * _result = 0;
    HRESULT _hr = raw_NormalAtParam(puParam, pvParam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(267)
inline AlibreX::IADVectorPtr AlibreX::IADSurface::NormalAtPoint ( struct IADPoint * pPoint ) {
    struct IADVector * _result = 0;
    HRESULT _hr = raw_NormalAtPoint(pPoint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(268)
inline AlibreX::IADPointPtr AlibreX::IADSurface::PointAtParam ( double pParamU, double pParamV ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = raw_PointAtParam(pParamU, pParamV, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(269)
inline HRESULT AlibreX::IADSurface::GetParamAtPoint ( struct IADPoint * pPoint, double * pParamU, double * pParamV ) {
    HRESULT _hr = raw_GetParamAtPoint(pPoint, pParamU, pParamV);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(270)
inline HRESULT AlibreX::IADSurface::GetParameterExtents ( double * pUmin, double * pUmax, double * pVmin, double * pVmax ) {
    HRESULT _hr = raw_GetParameterExtents(pUmin, pUmax, pVmin, pVmax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(271)
inline HRESULT AlibreX::IADSurface::GetFirstDerivative ( double paramU, double paramV, struct IADVector * * ppVectorU, struct IADVector * * ppVectorV ) {
    HRESULT _hr = raw_GetFirstDerivative(paramU, paramV, ppVectorU, ppVectorV);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(272)
inline HRESULT AlibreX::IADSurface::GetSecondDerivative ( double paramU, double paramV, struct IADVector * * ppVectorUU, struct IADVector * * ppVectorUV, struct IADVector * * ppVectorVV ) {
    HRESULT _hr = raw_GetSecondDerivative(paramU, paramV, ppVectorUU, ppVectorUV, ppVectorVV);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(273)
inline VARIANT_BOOL AlibreX::IADSurface::GetClosestPoint ( double pointX, double pointY, double pointZ, struct IADPoint * * ppClosestPoint, double * pDistance ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetClosestPoint(pointX, pointY, pointZ, ppClosestPoint, pDistance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(274)
inline VARIANT_BOOL AlibreX::IADSurface::GetRayIntersectionPoint ( double pointX, double pointY, double pointZ, double rayDirX, double rayDirY, double rayDirZ, VARIANT_BOOL bBidrection, struct IADPoint * * ppXPoint, double * pDistance ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetRayIntersectionPoint(pointX, pointY, pointZ, rayDirX, rayDirY, rayDirZ, bBidrection, ppXPoint, pDistance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADTorus wrapper method implementations
//

#pragma implementation_key(275)
inline AlibreX::IADPointPtr AlibreX::IADTorus::GetCenter ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_Center(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(276)
inline AlibreX::IADVectorPtr AlibreX::IADTorus::GetAxis ( ) {
    struct IADVector * _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(277)
inline double AlibreX::IADTorus::GetMajorRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(278)
inline double AlibreX::IADTorus::GetMinorRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAutomationHook wrapper method implementations
//

#pragma implementation_key(279)
inline IDispatchPtr AlibreX::IAutomationHook::GetRoot ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(280)
inline HRESULT AlibreX::IAutomationHook::Initialize ( _bstr_t serverURL, _bstr_t loginID, _bstr_t passwd, VARIANT_BOOL disableSecureMode, long unused ) {
    HRESULT _hr = raw_Initialize(serverURL, loginID, passwd, disableSecureMode, unused);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(281)
inline HRESULT AlibreX::IAutomationHook::InitializeDebug ( _bstr_t serverURL, _bstr_t loginID, _bstr_t passwd, VARIANT_BOOL disableSecureMode, long unused ) {
    HRESULT _hr = raw_InitializeDebug(serverURL, loginID, passwd, disableSecureMode, unused);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(282)
inline HRESULT AlibreX::IAutomationHook::InitializeService ( ) {
    HRESULT _hr = raw_InitializeService();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDecomposedTransformData wrapper method implementations
//

#pragma implementation_key(283)
inline double AlibreX::IDecomposedTransformData::GetScaleX ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(284)
inline double AlibreX::IDecomposedTransformData::GetScaleY ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(285)
inline double AlibreX::IDecomposedTransformData::GetScaleZ ( ) {
    double _result = 0;
    HRESULT _hr = get_ScaleZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(286)
inline double AlibreX::IDecomposedTransformData::GetShearXY ( ) {
    double _result = 0;
    HRESULT _hr = get_ShearXY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(287)
inline double AlibreX::IDecomposedTransformData::GetShearYZ ( ) {
    double _result = 0;
    HRESULT _hr = get_ShearYZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(288)
inline double AlibreX::IDecomposedTransformData::GetShearZX ( ) {
    double _result = 0;
    HRESULT _hr = get_ShearZX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(289)
inline double AlibreX::IDecomposedTransformData::GetTranslateX ( ) {
    double _result = 0;
    HRESULT _hr = get_TranslateX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(290)
inline double AlibreX::IDecomposedTransformData::GetTranslateY ( ) {
    double _result = 0;
    HRESULT _hr = get_TranslateY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(291)
inline double AlibreX::IDecomposedTransformData::GetTranslateZ ( ) {
    double _result = 0;
    HRESULT _hr = get_TranslateZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(292)
inline double AlibreX::IDecomposedTransformData::GetRotateX ( ) {
    double _result = 0;
    HRESULT _hr = get_RotateX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(293)
inline double AlibreX::IDecomposedTransformData::GetRotateY ( ) {
    double _result = 0;
    HRESULT _hr = get_RotateY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(294)
inline double AlibreX::IDecomposedTransformData::GetRotateZ ( ) {
    double _result = 0;
    HRESULT _hr = get_RotateZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(295)
inline AlibreX::IADVectorPtr AlibreX::IDecomposedTransformData::GetRotateVector ( ) {
    struct IADVector * _result = 0;
    HRESULT _hr = get_RotateVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(296)
inline double AlibreX::IDecomposedTransformData::GetRotateAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_RotateAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADTransformation wrapper method implementations
//

#pragma implementation_key(297)
inline SAFEARRAY * AlibreX::IADTransformation::Array ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_Array(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(298)
inline AlibreX::IADTransformationPtr AlibreX::IADTransformation::Apply ( struct IADTransformation * pTransform ) {
    struct IADTransformation * _result = 0;
    HRESULT _hr = raw_Apply(pTransform, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTransformationPtr(_result, false);
}

#pragma implementation_key(299)
inline AlibreX::IADTransformationPtr AlibreX::IADTransformation::Inverse ( ) {
    struct IADTransformation * _result = 0;
    HRESULT _hr = raw_Inverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTransformationPtr(_result, false);
}

#pragma implementation_key(300)
inline VARIANT_BOOL AlibreX::IADTransformation::IsEqualTo ( struct IADTransformation * pTransform ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsEqualTo(pTransform, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(301)
inline AlibreX::IDecomposedTransformDataPtr AlibreX::IADTransformation::Decompose ( ) {
    struct IDecomposedTransformData * _result = 0;
    HRESULT _hr = raw_Decompose(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDecomposedTransformDataPtr(_result, false);
}

#pragma implementation_key(302)
inline _bstr_t AlibreX::IADTransformation::GetToString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IADGeometryFactory wrapper method implementations
//

#pragma implementation_key(303)
inline AlibreX::IADPointPtr AlibreX::IADGeometryFactory::CreatePoint ( double X, double Y, double Z ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = raw_CreatePoint(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(304)
inline AlibreX::IADVectorPtr AlibreX::IADGeometryFactory::CreateVector ( double I, double J, double K ) {
    struct IADVector * _result = 0;
    HRESULT _hr = raw_CreateVector(I, J, K, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(305)
inline AlibreX::IADTransformationPtr AlibreX::IADGeometryFactory::CreateTransform ( SAFEARRAY * * pArray ) {
    struct IADTransformation * _result = 0;
    HRESULT _hr = raw_CreateTransform(pArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTransformationPtr(_result, false);
}

#pragma implementation_key(306)
inline AlibreX::IADTransformationPtr AlibreX::IADGeometryFactory::CreateIdentityTransform ( ) {
    struct IADTransformation * _result = 0;
    HRESULT _hr = raw_CreateIdentityTransform(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTransformationPtr(_result, false);
}

#pragma implementation_key(307)
inline AlibreX::IADTransformationPtr AlibreX::IADGeometryFactory::CreateRotationTransform ( struct IADVector * rotationAxisDirection, struct IADPoint * rotationAxisPosition, double rotationAngle ) {
    struct IADTransformation * _result = 0;
    HRESULT _hr = raw_CreateRotationTransform(rotationAxisDirection, rotationAxisPosition, rotationAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTransformationPtr(_result, false);
}

#pragma implementation_key(308)
inline AlibreX::IADTransformationPtr AlibreX::IADGeometryFactory::CreateTranslationTransformAlongVector ( struct IADVector * translationVector ) {
    struct IADTransformation * _result = 0;
    HRESULT _hr = raw_CreateTranslationTransformAlongVector(translationVector, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTransformationPtr(_result, false);
}

#pragma implementation_key(309)
inline AlibreX::IADTransformationPtr AlibreX::IADGeometryFactory::CreateTranslationTransformByXYZ ( double translationX, double translationY, double translationZ ) {
    struct IADTransformation * _result = 0;
    HRESULT _hr = raw_CreateTranslationTransformByXYZ(translationX, translationY, translationZ, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTransformationPtr(_result, false);
}

#pragma implementation_key(310)
inline AlibreX::IADTransformationPtr AlibreX::IADGeometryFactory::CreateUniformScalingTransform ( double scaleFactor ) {
    struct IADTransformation * _result = 0;
    HRESULT _hr = raw_CreateUniformScalingTransform(scaleFactor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTransformationPtr(_result, false);
}

#pragma implementation_key(311)
inline AlibreX::IADTransformationPtr AlibreX::IADGeometryFactory::CreateTransformByVariantArray ( const _variant_t & pArray ) {
    struct IADTransformation * _result = 0;
    HRESULT _hr = raw_CreateTransformByVariantArray(pArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTransformationPtr(_result, false);
}

#pragma implementation_key(312)
inline AlibreX::IAD2DPointPtr AlibreX::IADGeometryFactory::Create2DPoint ( double X, double Y ) {
    struct IAD2DPoint * _result = 0;
    HRESULT _hr = raw_Create2DPoint(X, Y, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD2DPointPtr(_result, false);
}

//
// interface INotificationSelector wrapper method implementations
//

#pragma implementation_key(313)
inline VARIANT_BOOL AlibreX::INotificationSelector::GetWrite ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Write(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(314)
inline void AlibreX::INotificationSelector::PutWrite ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Write(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(315)
inline VARIANT_BOOL AlibreX::INotificationSelector::GetDelete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(316)
inline void AlibreX::INotificationSelector::PutDelete ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Delete(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(317)
inline VARIANT_BOOL AlibreX::INotificationSelector::GetCheckOut ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckOut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(318)
inline void AlibreX::INotificationSelector::PutCheckOut ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_CheckOut(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(319)
inline VARIANT_BOOL AlibreX::INotificationSelector::GetCheckIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CheckIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(320)
inline void AlibreX::INotificationSelector::PutCheckIn ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_CheckIn(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(321)
inline VARIANT_BOOL AlibreX::INotificationSelector::GetAdministrate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Administrate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(322)
inline void AlibreX::INotificationSelector::PutAdministrate ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Administrate(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IObjectCollector wrapper method implementations
//

#pragma implementation_key(323)
inline IEnumVARIANTPtr AlibreX::IObjectCollector::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(324)
inline IDispatchPtr AlibreX::IObjectCollector::GetItem ( const _variant_t & index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(325)
inline long AlibreX::IObjectCollector::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(326)
inline AlibreX::DIEnumPtr AlibreX::IObjectCollector::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(327)
inline enum AlibreX::ADObjectType AlibreX::IObjectCollector::GetobjectType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_objectType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(328)
inline HRESULT AlibreX::IObjectCollector::Add ( IDispatch * pObject ) {
    HRESULT _hr = raw_Add(pObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(329)
inline HRESULT AlibreX::IObjectCollector::Remove ( const _variant_t & index ) {
    HRESULT _hr = raw_Remove(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(330)
inline HRESULT AlibreX::IObjectCollector::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IADAssemblyConstraint wrapper method implementations
//

#pragma implementation_key(331)
inline enum AlibreX::ADAssemblyConstraintType AlibreX::IADAssemblyConstraint::GetConstraintType ( ) {
    enum ADAssemblyConstraintType _result;
    HRESULT _hr = get_ConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(332)
inline _bstr_t AlibreX::IADAssemblyConstraint::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(333)
inline AlibreX::IObjectCollectorPtr AlibreX::IADAssemblyConstraint::GetParticipants ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_Participants(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(334)
inline VARIANT_BOOL AlibreX::IADAssemblyConstraint::GetIsSuppressed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSuppressed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(335)
inline void AlibreX::IADAssemblyConstraint::PutIsSuppressed ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_IsSuppressed(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(336)
inline enum AlibreX::ADObjectType AlibreX::IADAssemblyConstraint::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(337)
inline VARIANT_BOOL AlibreX::IADAssemblyConstraint::GetHasError ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(338)
inline enum AlibreX::ADAssemblyConstraintBoundType AlibreX::IADAssemblyConstraint::GetBoundType ( ) {
    enum ADAssemblyConstraintBoundType _result;
    HRESULT _hr = get_BoundType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(339)
inline HRESULT AlibreX::IADAssemblyConstraint::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IADLoftFeature wrapper method implementations
//

#pragma implementation_key(340)
inline VARIANT_BOOL AlibreX::IADLoftFeature::GetIsCutout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCutout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(341)
inline AlibreX::IObjectCollectorPtr AlibreX::IADLoftFeature::GetCrossSections ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_CrossSections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(342)
inline VARIANT_BOOL AlibreX::IADLoftFeature::GetIsUsingGuideCurves ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUsingGuideCurves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(343)
inline enum AlibreX::ADLoftGuideType AlibreX::IADLoftFeature::GetGuideCurveType ( ) {
    enum ADLoftGuideType _result;
    HRESULT _hr = get_GuideCurveType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(344)
inline AlibreX::IObjectCollectorPtr AlibreX::IADLoftFeature::GetGuideCurves ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_GuideCurves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(345)
inline VARIANT_BOOL AlibreX::IADLoftFeature::GetIsMinimizeTwist ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsMinimizeTwist(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(346)
inline VARIANT_BOOL AlibreX::IADLoftFeature::GetIsMinimizeCurvature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsMinimizeCurvature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(347)
inline VARIANT_BOOL AlibreX::IADLoftFeature::GetIsSimplifySurface ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSimplifySurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(348)
inline VARIANT_BOOL AlibreX::IADLoftFeature::GetIsConnectEnds ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConnectEnds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(349)
inline VARIANT_BOOL AlibreX::IADLoftFeature::IsTangentSpecified ( const _variant_t & crossSection ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsTangentSpecified(crossSection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(350)
inline double AlibreX::IADLoftFeature::GetTangentMagnitude ( const _variant_t & crossSection ) {
    double _result = 0;
    HRESULT _hr = raw_GetTangentMagnitude(crossSection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(351)
inline double AlibreX::IADLoftFeature::GetTangentAngle ( const _variant_t & crossSection ) {
    double _result = 0;
    HRESULT _hr = raw_GetTangentAngle(crossSection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAnalyzedSketchData wrapper method implementations
//

#pragma implementation_key(352)
inline AlibreX::IObjectCollectorPtr AlibreX::IAnalyzedSketchData::GetDisjointEnds ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_DisjointEnds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(353)
inline AlibreX::IObjectCollectorPtr AlibreX::IAnalyzedSketchData::GetOpenLoops ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_OpenLoops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(354)
inline AlibreX::IObjectCollectorPtr AlibreX::IAnalyzedSketchData::GetOverLaps ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_OverLaps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(355)
inline AlibreX::IObjectCollectorPtr AlibreX::IAnalyzedSketchData::GetIntersections ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_Intersections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(356)
inline AlibreX::IObjectCollectorPtr AlibreX::IAnalyzedSketchData::GetDegenerateFigures ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_DegenerateFigures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

//
// interface IPermissionSelector wrapper method implementations
//

#pragma implementation_key(357)
inline VARIANT_BOOL AlibreX::IPermissionSelector::GetRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Read(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(358)
inline void AlibreX::IPermissionSelector::PutRead ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Read(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(359)
inline VARIANT_BOOL AlibreX::IPermissionSelector::GetWrite ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Write(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(360)
inline void AlibreX::IPermissionSelector::PutWrite ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Write(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(361)
inline VARIANT_BOOL AlibreX::IPermissionSelector::GetDelete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(362)
inline void AlibreX::IPermissionSelector::PutDelete ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Delete(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(363)
inline VARIANT_BOOL AlibreX::IPermissionSelector::GetViewOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ViewOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(364)
inline void AlibreX::IPermissionSelector::PutViewOnly ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ViewOnly(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(365)
inline VARIANT_BOOL AlibreX::IPermissionSelector::GetAdministrate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Administrate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(366)
inline void AlibreX::IPermissionSelector::PutAdministrate ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_Administrate(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface _IADEventsCallback wrapper method implementations
//

#pragma implementation_key(367)
inline HRESULT AlibreX::_IADEventsCallback::OnInitialize ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(368)
inline HRESULT AlibreX::_IADEventsCallback::OnTerminate ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(369)
inline HRESULT AlibreX::_IADEventsCallback::OnSessionOpen ( struct IADSession * pSession ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSession);
}

#pragma implementation_key(370)
inline HRESULT AlibreX::_IADEventsCallback::OnSessionClose ( struct IADSession * pSession ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSession);
}

#pragma implementation_key(371)
inline HRESULT AlibreX::_IADEventsCallback::OnSessionChange ( struct IADSession * pSession, SAFEARRAY * * pModifiedItems, SAFEARRAY * * changeType ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x6009\x6003", pSession, pModifiedItems, changeType);
}

#pragma implementation_key(372)
inline HRESULT AlibreX::_IADEventsCallback::OnModelLoadComplete ( struct IADSession * pSession ) {
    return _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pSession);
}

//
// interface IAD3DSketch wrapper method implementations
//

#pragma implementation_key(373)
inline enum AlibreX::ADObjectType AlibreX::IAD3DSketch::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(374)
inline _bstr_t AlibreX::IAD3DSketch::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(375)
inline void AlibreX::IAD3DSketch::PutName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Name(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(376)
inline AlibreX::IADRootPtr AlibreX::IAD3DSketch::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(377)
inline AlibreX::IADDesignSessionPtr AlibreX::IAD3DSketch::GetSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

#pragma implementation_key(378)
inline VARIANT_BOOL AlibreX::IAD3DSketch::GetIsConsumed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConsumed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(379)
inline AlibreX::IADPartFeaturePtr AlibreX::IAD3DSketch::GetConsumingFeature ( ) {
    struct IADPartFeature * _result = 0;
    HRESULT _hr = get_ConsumingFeature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartFeaturePtr(_result, false);
}

#pragma implementation_key(380)
inline HRESULT AlibreX::IAD3DSketch::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(381)
inline AlibreX::IAD3DSketchFiguresPtr AlibreX::IAD3DSketch::GetFigures ( ) {
    struct IAD3DSketchFigures * _result = 0;
    HRESULT _hr = get_Figures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchFiguresPtr(_result, false);
}

#pragma implementation_key(382)
inline SAFEARRAY * AlibreX::IAD3DSketch::GetKey ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(383)
inline HRESULT AlibreX::IAD3DSketch::BeginChange ( ) {
    HRESULT _hr = raw_BeginChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(384)
inline HRESULT AlibreX::IAD3DSketch::EndChange ( ) {
    HRESULT _hr = raw_EndChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(385)
inline VARIANT_BOOL AlibreX::IAD3DSketch::GetIsSuppressed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSuppressed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(386)
inline VARIANT_BOOL AlibreX::IAD3DSketch::GetIsActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAD3DSketches wrapper method implementations
//

#pragma implementation_key(387)
inline IEnumVARIANTPtr AlibreX::IAD3DSketches::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(388)
inline AlibreX::IAD3DSketchPtr AlibreX::IAD3DSketches::GetItem ( const _variant_t & index ) {
    struct IAD3DSketch * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPtr(_result, false);
}

#pragma implementation_key(389)
inline long AlibreX::IAD3DSketches::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(390)
inline AlibreX::DIEnumPtr AlibreX::IAD3DSketches::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(391)
inline AlibreX::IADDesignSessionPtr AlibreX::IAD3DSketches::GetSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

#pragma implementation_key(392)
inline AlibreX::IAD3DSketchPtr AlibreX::IAD3DSketches::Add3DSketch ( _bstr_t Name ) {
    struct IAD3DSketch * _result = 0;
    HRESULT _hr = raw_Add3DSketch(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPtr(_result, false);
}

//
// interface IAD3DSketchFigure wrapper method implementations
//

#pragma implementation_key(393)
inline enum AlibreX::ADObjectType AlibreX::IAD3DSketchFigure::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(394)
inline enum AlibreX::ADGeometryType AlibreX::IAD3DSketchFigure::GetFigureType ( ) {
    enum ADGeometryType _result;
    HRESULT _hr = get_FigureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(395)
inline AlibreX::IADRootPtr AlibreX::IAD3DSketchFigure::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(396)
inline AlibreX::IAD3DSketchPtr AlibreX::IAD3DSketchFigure::GetSketch ( ) {
    struct IAD3DSketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPtr(_result, false);
}

#pragma implementation_key(397)
inline VARIANT_BOOL AlibreX::IAD3DSketchFigure::GetIsReference ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(398)
inline _bstr_t AlibreX::IAD3DSketchFigure::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IAD3DSketchFigures wrapper method implementations
//

#pragma implementation_key(399)
inline IEnumVARIANTPtr AlibreX::IAD3DSketchFigures::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(400)
inline AlibreX::IAD3DSketchFigurePtr AlibreX::IAD3DSketchFigures::GetItem ( long index ) {
    struct IAD3DSketchFigure * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchFigurePtr(_result, false);
}

#pragma implementation_key(401)
inline long AlibreX::IAD3DSketchFigures::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(402)
inline AlibreX::DIEnumPtr AlibreX::IAD3DSketchFigures::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(403)
inline AlibreX::IAD3DSketchPtr AlibreX::IAD3DSketchFigures::GetSketch ( ) {
    struct IAD3DSketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPtr(_result, false);
}

#pragma implementation_key(404)
inline AlibreX::IAD3DSketchPointPtr AlibreX::IAD3DSketchFigures::AddPoint ( struct IADPoint * Point ) {
    struct IAD3DSketchPoint * _result = 0;
    HRESULT _hr = raw_AddPoint(Point, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPointPtr(_result, false);
}

#pragma implementation_key(405)
inline AlibreX::IAD3DSketchPointPtr AlibreX::IAD3DSketchFigures::AddPoint_2 ( double X, double Y, double Z ) {
    struct IAD3DSketchPoint * _result = 0;
    HRESULT _hr = raw_AddPoint_2(X, Y, Z, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchPointPtr(_result, false);
}

#pragma implementation_key(406)
inline AlibreX::IAD3DSketchLinePtr AlibreX::IAD3DSketchFigures::AddLine ( double x1, double y1, double z1, double x2, double y2, double z2 ) {
    struct IAD3DSketchLine * _result = 0;
    HRESULT _hr = raw_AddLine(x1, y1, z1, x2, y2, z2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchLinePtr(_result, false);
}

#pragma implementation_key(407)
inline AlibreX::IAD3DSketchLinePtr AlibreX::IAD3DSketchFigures::AddLine_2 ( struct IADPoint * Start, struct IADPoint * End ) {
    struct IAD3DSketchLine * _result = 0;
    HRESULT _hr = raw_AddLine_2(Start, End, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchLinePtr(_result, false);
}

#pragma implementation_key(408)
inline AlibreX::IAD3DSketchCircularArcPtr AlibreX::IAD3DSketchFigures::AddCircularArcByCenterStartEnd ( double XCenter, double YCenter, double ZCenter, double XStartPt, double YStartPt, double ZStartPt, double XEndPt, double YEndPt, double ZEndPt ) {
    struct IAD3DSketchCircularArc * _result = 0;
    HRESULT _hr = raw_AddCircularArcByCenterStartEnd(XCenter, YCenter, ZCenter, XStartPt, YStartPt, ZStartPt, XEndPt, YEndPt, ZEndPt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchCircularArcPtr(_result, false);
}

#pragma implementation_key(409)
inline AlibreX::IAD3DSketchCircularArcPtr AlibreX::IAD3DSketchFigures::AddCircularArcByCenterStartEnd_2 ( struct IADPoint * Center, struct IADPoint * Start, struct IADPoint * End ) {
    struct IAD3DSketchCircularArc * _result = 0;
    HRESULT _hr = raw_AddCircularArcByCenterStartEnd_2(Center, Start, End, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchCircularArcPtr(_result, false);
}

#pragma implementation_key(410)
inline AlibreX::IAD3DSketchBsplinePtr AlibreX::IAD3DSketchFigures::AddBsplineByInterpolation ( SAFEARRAY * * pInterpolationPoints ) {
    struct IAD3DSketchBspline * _result = 0;
    HRESULT _hr = raw_AddBsplineByInterpolation(pInterpolationPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchBsplinePtr(_result, false);
}

#pragma implementation_key(411)
inline AlibreX::IAD3DSketchFigurePtr AlibreX::IAD3DSketchFigures::GetFigureByID ( _bstr_t ID ) {
    struct IAD3DSketchFigure * _result = 0;
    HRESULT _hr = raw_GetFigureByID(ID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchFigurePtr(_result, false);
}

#pragma implementation_key(412)
inline AlibreX::IObjectCollectorPtr AlibreX::IAD3DSketchFigures::AddPolyline ( SAFEARRAY * * pPoints ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = raw_AddPolyline(pPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(413)
inline AlibreX::IAD3DSketchBsplinePtr AlibreX::IAD3DSketchFigures::AddBspline ( long order, long numCtlPoints, SAFEARRAY * * pCtlPoints, SAFEARRAY * * pKnotVector, SAFEARRAY * * pWeights ) {
    struct IAD3DSketchBspline * _result = 0;
    HRESULT _hr = raw_AddBspline(order, numCtlPoints, pCtlPoints, pKnotVector, pWeights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchBsplinePtr(_result, false);
}

//
// interface IADAddOns wrapper method implementations
//

#pragma implementation_key(414)
inline HRESULT AlibreX::IADAddOns::ExportFile ( _bstr_t targetFileName, struct IADSession * Session ) {
    HRESULT _hr = raw_ExportFile(targetFileName, Session);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(415)
inline HRESULT AlibreX::IADAddOns::ExportFile_2 ( _bstr_t targetFileName, struct IADSession * Session, _bstr_t optionFilePath ) {
    HRESULT _hr = raw_ExportFile_2(targetFileName, Session, optionFilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(416)
inline AlibreX::IADSessionPtr AlibreX::IADAddOns::ImportFile ( _bstr_t filePath, struct IADSession * Session ) {
    struct IADSession * _result = 0;
    HRESULT _hr = raw_ImportFile(filePath, Session, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

//
// interface IADAlignConstraint wrapper method implementations
//

#pragma implementation_key(417)
inline AlibreX::IADParameterPtr AlibreX::IADAlignConstraint::GetOffset ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(418)
inline AlibreX::IADParameterPtr AlibreX::IADAlignConstraint::GetMaximumOffset ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_MaximumOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(419)
inline AlibreX::IADParameterPtr AlibreX::IADAlignConstraint::GetMinimumOffset ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_MinimumOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

//
// interface IADAngleConstraint wrapper method implementations
//

#pragma implementation_key(420)
inline AlibreX::IADParameterPtr AlibreX::IADAngleConstraint::GetAngle ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(421)
inline AlibreX::IADParameterPtr AlibreX::IADAngleConstraint::GetMaximumAngle ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_MaximumAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(422)
inline AlibreX::IADParameterPtr AlibreX::IADAngleConstraint::GetMinimumAngle ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_MinimumAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

//
// interface IADAssemblyConstraints wrapper method implementations
//

#pragma implementation_key(423)
inline IEnumVARIANTPtr AlibreX::IADAssemblyConstraints::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(424)
inline long AlibreX::IADAssemblyConstraints::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(425)
inline AlibreX::IADAssemblyConstraintPtr AlibreX::IADAssemblyConstraints::GetItem ( const _variant_t & index ) {
    struct IADAssemblyConstraint * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADAssemblyConstraintPtr(_result, false);
}

#pragma implementation_key(426)
inline AlibreX::DIEnumPtr AlibreX::IADAssemblyConstraints::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(427)
inline AlibreX::IADAssemblyConstraintPtr AlibreX::IADAssemblyConstraints::AddConstraint ( struct IADTargetProxy * first, struct IADTargetProxy * second, enum ADAssemblyConstraintType Type, const _variant_t & parameterValue, VARIANT_BOOL isReversed, _bstr_t Name, _bstr_t parameterName ) {
    struct IADAssemblyConstraint * _result = 0;
    HRESULT _hr = raw_AddConstraint(first, second, Type, parameterValue, isReversed, Name, parameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADAssemblyConstraintPtr(_result, false);
}

#pragma implementation_key(428)
inline AlibreX::IADAssemblyConstraintPtr AlibreX::IADAssemblyConstraints::AddConstraintEx ( struct IADTargetProxy * first, struct IADTargetProxy * second, enum ADAssemblyConstraintType eConstraintType, enum ADAssemblyConstraintBoundType eBoundType, const _variant_t & parameterValue, const _variant_t & parameter2Value, VARIANT_BOOL isReversed, _bstr_t Name, _bstr_t parameterName, _bstr_t parameter2Name ) {
    struct IADAssemblyConstraint * _result = 0;
    HRESULT _hr = raw_AddConstraintEx(first, second, eConstraintType, eBoundType, parameterValue, parameter2Value, isReversed, Name, parameterName, parameter2Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADAssemblyConstraintPtr(_result, false);
}

//
// interface IADAssemblyFeature wrapper method implementations
//

#pragma implementation_key(429)
inline enum AlibreX::ADObjectType AlibreX::IADAssemblyFeature::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(430)
inline _bstr_t AlibreX::IADAssemblyFeature::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(431)
inline AlibreX::IADRootPtr AlibreX::IADAssemblyFeature::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(432)
inline AlibreX::IADSessionPtr AlibreX::IADAssemblyFeature::GetSession ( ) {
    struct IADSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(433)
inline enum AlibreX::ADAssemblyFeatureType AlibreX::IADAssemblyFeature::GetFeatureType ( ) {
    enum ADAssemblyFeatureType _result;
    HRESULT _hr = get_FeatureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADAssemblyFeatures wrapper method implementations
//

#pragma implementation_key(434)
inline IEnumVARIANTPtr AlibreX::IADAssemblyFeatures::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(435)
inline AlibreX::IADAssemblyFeaturePtr AlibreX::IADAssemblyFeatures::GetItem ( const _variant_t & index ) {
    struct IADAssemblyFeature * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADAssemblyFeaturePtr(_result, false);
}

#pragma implementation_key(436)
inline long AlibreX::IADAssemblyFeatures::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(437)
inline AlibreX::DIEnumPtr AlibreX::IADAssemblyFeatures::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(438)
inline AlibreX::IADAssemblySessionPtr AlibreX::IADAssemblyFeatures::GetSession ( ) {
    struct IADAssemblySession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADAssemblySessionPtr(_result, false);
}

//
// interface IADAssemblyPath wrapper method implementations
//

#pragma implementation_key(439)
inline IEnumVARIANTPtr AlibreX::IADAssemblyPath::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(440)
inline AlibreX::IADOccurrencePtr AlibreX::IADAssemblyPath::GetItem ( const _variant_t & index ) {
    struct IADOccurrence * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencePtr(_result, false);
}

#pragma implementation_key(441)
inline long AlibreX::IADAssemblyPath::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(442)
inline AlibreX::DIEnumPtr AlibreX::IADAssemblyPath::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(443)
inline AlibreX::IADOccurrencePtr AlibreX::IADAssemblyPath::getItemOfNestLevel ( long itemNestLevel ) {
    struct IADOccurrence * _result = 0;
    HRESULT _hr = raw_getItemOfNestLevel(itemNestLevel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencePtr(_result, false);
}

#pragma implementation_key(444)
inline AlibreX::IADOccurrencePtr AlibreX::IADAssemblyPath::getFirstOccurrence ( ) {
    struct IADOccurrence * _result = 0;
    HRESULT _hr = raw_getFirstOccurrence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencePtr(_result, false);
}

#pragma implementation_key(445)
inline AlibreX::IADOccurrencePtr AlibreX::IADAssemblyPath::getLastOccurrence ( ) {
    struct IADOccurrence * _result = 0;
    HRESULT _hr = raw_getLastOccurrence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencePtr(_result, false);
}

#pragma implementation_key(446)
inline AlibreX::IADOccurrencePtr AlibreX::IADAssemblyPath::getRootOccurrence ( ) {
    struct IADOccurrence * _result = 0;
    HRESULT _hr = raw_getRootOccurrence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencePtr(_result, false);
}

//
// interface IADAssemblySession wrapper method implementations
//

#pragma implementation_key(447)
inline AlibreX::IADOccurrencePtr AlibreX::IADAssemblySession::GetRootOccurrence ( ) {
    struct IADOccurrence * _result = 0;
    HRESULT _hr = get_RootOccurrence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencePtr(_result, false);
}

#pragma implementation_key(448)
inline AlibreX::IADOccurrencePtr AlibreX::IADAssemblySession::GetActiveOccurrence ( ) {
    struct IADOccurrence * _result = 0;
    HRESULT _hr = get_ActiveOccurrence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencePtr(_result, false);
}

#pragma implementation_key(449)
inline void AlibreX::IADAssemblySession::PutRefActiveOccurrence ( struct IADOccurrence * pRetVal ) {
    HRESULT _hr = putref_ActiveOccurrence(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(450)
inline AlibreX::IADAssemblyConstraintsPtr AlibreX::IADAssemblySession::GetAssemblyConstraints ( ) {
    struct IADAssemblyConstraints * _result = 0;
    HRESULT _hr = get_AssemblyConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADAssemblyConstraintsPtr(_result, false);
}

#pragma implementation_key(451)
inline AlibreX::IADInterferencesPtr AlibreX::IADAssemblySession::CheckInterference ( VARIANT * occurrencesGroup1, VARIANT * occurrencesGroup2 ) {
    struct IADInterferences * _result = 0;
    HRESULT _hr = raw_CheckInterference(occurrencesGroup1, occurrencesGroup2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADInterferencesPtr(_result, false);
}

#pragma implementation_key(452)
inline HRESULT AlibreX::IADAssemblySession::ApplyTransformations ( struct IObjectCollector * pOccurrences, struct IObjectCollector * pTransformations, VARIANT_BOOL runInOptimizedMode ) {
    HRESULT _hr = raw_ApplyTransformations(pOccurrences, pTransformations, runInOptimizedMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(453)
inline AlibreX::IADExplodedViewsPtr AlibreX::IADAssemblySession::GetExplodedViews ( ) {
    struct IADExplodedViews * _result = 0;
    HRESULT _hr = get_ExplodedViews(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADExplodedViewsPtr(_result, false);
}

#pragma implementation_key(454)
inline HRESULT AlibreX::IADAssemblySession::SuppressConstraints ( struct IObjectCollector * pConstraints ) {
    HRESULT _hr = raw_SuppressConstraints(pConstraints);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(455)
inline HRESULT AlibreX::IADAssemblySession::UnsuppressConstraints ( struct IObjectCollector * pConstraints ) {
    HRESULT _hr = raw_UnsuppressConstraints(pConstraints);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(456)
inline VARIANT_BOOL AlibreX::IADAssemblySession::HasInterDesignRelations ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasInterDesignRelations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(457)
inline HRESULT AlibreX::IADAssemblySession::ApplyConstrainedTransformations ( struct IObjectCollector * Occurrences, struct IObjectCollector * transformations ) {
    HRESULT _hr = raw_ApplyConstrainedTransformations(Occurrences, transformations);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(458)
inline long AlibreX::IADAssemblySession::GetInclusionCount ( _bstr_t childSessionID ) {
    long _result = 0;
    HRESULT _hr = raw_GetInclusionCount(childSessionID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(459)
inline AlibreX::IADAssemblyFeaturesPtr AlibreX::IADAssemblySession::GetFeatures ( ) {
    struct IADAssemblyFeatures * _result = 0;
    HRESULT _hr = get_Features(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADAssemblyFeaturesPtr(_result, false);
}

//
// interface IADBodies wrapper method implementations
//

#pragma implementation_key(460)
inline IEnumVARIANTPtr AlibreX::IADBodies::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(461)
inline AlibreX::IADBodyPtr AlibreX::IADBodies::GetItem ( long index ) {
    struct IADBody * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBodyPtr(_result, false);
}

#pragma implementation_key(462)
inline long AlibreX::IADBodies::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(463)
inline AlibreX::DIEnumPtr AlibreX::IADBodies::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(464)
inline AlibreX::IADPartSessionPtr AlibreX::IADBodies::GetSession ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

//
// interface IADBody wrapper method implementations
//

#pragma implementation_key(465)
inline enum AlibreX::ADObjectType AlibreX::IADBody::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(466)
inline enum AlibreX::ADTopologyType AlibreX::IADBody::GetTopologyType ( ) {
    enum ADTopologyType _result;
    HRESULT _hr = get_TopologyType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(467)
inline AlibreX::IADPartSessionPtr AlibreX::IADBody::GetPart ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Part(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

#pragma implementation_key(468)
inline AlibreX::IADLumpsPtr AlibreX::IADBody::GetLumps ( ) {
    struct IADLumps * _result = 0;
    HRESULT _hr = get_Lumps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADLumpsPtr(_result, false);
}

#pragma implementation_key(469)
inline AlibreX::IADShellsPtr AlibreX::IADBody::GetShells ( ) {
    struct IADShells * _result = 0;
    HRESULT _hr = get_Shells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADShellsPtr(_result, false);
}

#pragma implementation_key(470)
inline AlibreX::IADFacesPtr AlibreX::IADBody::GetFaces ( ) {
    struct IADFaces * _result = 0;
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFacesPtr(_result, false);
}

#pragma implementation_key(471)
inline AlibreX::IADEdgesPtr AlibreX::IADBody::GetEdges ( ) {
    struct IADEdges * _result = 0;
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADEdgesPtr(_result, false);
}

#pragma implementation_key(472)
inline AlibreX::IADVerticesPtr AlibreX::IADBody::GetVertices ( ) {
    struct IADVertices * _result = 0;
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVerticesPtr(_result, false);
}

#pragma implementation_key(473)
inline long AlibreX::IADBody::GetTimeStamp ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeStamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(474)
inline AlibreX::IADTopologySummaryPtr AlibreX::IADBody::GetTopologySummary ( ) {
    struct IADTopologySummary * _result = 0;
    HRESULT _hr = get_TopologySummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTopologySummaryPtr(_result, false);
}

//
// interface IADBOMColumn wrapper method implementations
//

#pragma implementation_key(475)
inline enum AlibreX::ADObjectType AlibreX::IADBOMColumn::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(476)
inline _bstr_t AlibreX::IADBOMColumn::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(477)
inline enum AlibreX::ADBOMTextAlignment AlibreX::IADBOMColumn::GetDataAlignment ( ) {
    enum ADBOMTextAlignment _result;
    HRESULT _hr = get_DataAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(478)
inline enum AlibreX::ADBOMTextAlignment AlibreX::IADBOMColumn::GetHeaderAlignment ( ) {
    enum ADBOMTextAlignment _result;
    HRESULT _hr = get_HeaderAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(479)
inline enum AlibreX::ADBOMDataType AlibreX::IADBOMColumn::GetDataType ( ) {
    enum ADBOMDataType _result;
    HRESULT _hr = get_DataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(480)
inline double AlibreX::IADBOMColumn::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(481)
inline VARIANT_BOOL AlibreX::IADBOMColumn::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(482)
inline AlibreX::IADBOMTableSessionPtr AlibreX::IADBOMColumn::GetSession ( ) {
    struct IADBOMTableSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBOMTableSessionPtr(_result, false);
}

//
// interface IADBOMColumns wrapper method implementations
//

#pragma implementation_key(483)
inline IEnumVARIANTPtr AlibreX::IADBOMColumns::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(484)
inline AlibreX::IADBOMColumnPtr AlibreX::IADBOMColumns::GetItem ( const _variant_t & index ) {
    struct IADBOMColumn * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBOMColumnPtr(_result, false);
}

#pragma implementation_key(485)
inline long AlibreX::IADBOMColumns::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(486)
inline AlibreX::DIEnumPtr AlibreX::IADBOMColumns::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

//
// interface IADBOMRow wrapper method implementations
//

#pragma implementation_key(487)
inline enum AlibreX::ADObjectType AlibreX::IADBOMRow::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(488)
inline _bstr_t AlibreX::IADBOMRow::GetItemNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ItemNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(489)
inline double AlibreX::IADBOMRow::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(490)
inline _bstr_t AlibreX::IADBOMRow::Value ( long pColumnIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Value(pColumnIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(491)
inline VARIANT_BOOL AlibreX::IADBOMRow::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(492)
inline VARIANT_BOOL AlibreX::IADBOMRow::GetIsCustomDefined ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCustomDefined(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(493)
inline AlibreX::IADBOMTableSessionPtr AlibreX::IADBOMRow::GetSession ( ) {
    struct IADBOMTableSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBOMTableSessionPtr(_result, false);
}

//
// interface IADBOMRows wrapper method implementations
//

#pragma implementation_key(494)
inline IEnumVARIANTPtr AlibreX::IADBOMRows::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(495)
inline AlibreX::IADBOMRowPtr AlibreX::IADBOMRows::GetItem ( const _variant_t & index ) {
    struct IADBOMRow * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBOMRowPtr(_result, false);
}

#pragma implementation_key(496)
inline long AlibreX::IADBOMRows::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(497)
inline AlibreX::DIEnumPtr AlibreX::IADBOMRows::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

//
// interface IADBOMTableSession wrapper method implementations
//

#pragma implementation_key(498)
inline HRESULT AlibreX::IADBOMTableSession::ExportSTEP ( _bstr_t fileName ) {
    HRESULT _hr = raw_ExportSTEP(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(499)
inline HRESULT AlibreX::IADBOMTableSession::ExportBOM ( _bstr_t fileName, VARIANT_BOOL includeHiddenRows ) {
    HRESULT _hr = raw_ExportBOM(fileName, includeHiddenRows);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(500)
inline enum AlibreX::ADBOMTableStyle AlibreX::IADBOMTableSession::GetStyle ( ) {
    enum ADBOMTableStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(501)
inline long AlibreX::IADBOMTableSession::GetColumnCount ( ) {
    long _result = 0;
    HRESULT _hr = get_ColumnCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(502)
inline long AlibreX::IADBOMTableSession::GetRowCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RowCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(503)
inline AlibreX::IADBOMColumnsPtr AlibreX::IADBOMTableSession::Columns ( VARIANT_BOOL onlyVisibleOnes ) {
    struct IADBOMColumns * _result = 0;
    HRESULT _hr = raw_Columns(onlyVisibleOnes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBOMColumnsPtr(_result, false);
}

#pragma implementation_key(504)
inline AlibreX::IADBOMRowsPtr AlibreX::IADBOMTableSession::Rows ( VARIANT_BOOL onlyVisibleOnes ) {
    struct IADBOMRows * _result = 0;
    HRESULT _hr = raw_Rows(onlyVisibleOnes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBOMRowsPtr(_result, false);
}

#pragma implementation_key(505)
inline double AlibreX::IADBOMTableSession::GetHeaderRowHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_HeaderRowHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(506)
inline AlibreX::IADDataFontPtr AlibreX::IADBOMTableSession::GetHeaderFont ( ) {
    struct IADDataFont * _result = 0;
    HRESULT _hr = get_HeaderFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDataFontPtr(_result, false);
}

#pragma implementation_key(507)
inline long AlibreX::IADBOMTableSession::GetHeaderFontColor ( ) {
    long _result = 0;
    HRESULT _hr = get_HeaderFontColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(508)
inline AlibreX::IADDataFontPtr AlibreX::IADBOMTableSession::GetDataFont ( ) {
    struct IADDataFont * _result = 0;
    HRESULT _hr = get_DataFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDataFontPtr(_result, false);
}

#pragma implementation_key(509)
inline long AlibreX::IADBOMTableSession::GetDataFontColor ( ) {
    long _result = 0;
    HRESULT _hr = get_DataFontColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(510)
inline _bstr_t AlibreX::IADBOMTableSession::Value ( long pRowIndex, long pColumnIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Value(pRowIndex, pColumnIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(511)
inline VARIANT_BOOL AlibreX::IADBOMTableSession::GetIsBottomUpDisplay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsBottomUpDisplay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADChamferFeature wrapper method implementations
//

#pragma implementation_key(512)
inline AlibreX::IObjectCollectorPtr AlibreX::IADChamferFeature::GetEdgesAndFaces ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_EdgesAndFaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(513)
inline AlibreX::IADParameterPtr AlibreX::IADChamferFeature::GetDistance1 ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Distance1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(514)
inline AlibreX::IADParameterPtr AlibreX::IADChamferFeature::GetDistance2 ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Distance2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(515)
inline AlibreX::IADParameterPtr AlibreX::IADChamferFeature::GetAngle ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(516)
inline VARIANT_BOOL AlibreX::IADChamferFeature::GetTangentPropagate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TangentPropagate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADCoedge wrapper method implementations
//

#pragma implementation_key(517)
inline enum AlibreX::ADObjectType AlibreX::IADCoedge::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(518)
inline enum AlibreX::ADTopologyType AlibreX::IADCoedge::GetTopologyType ( ) {
    enum ADTopologyType _result;
    HRESULT _hr = get_TopologyType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(519)
inline AlibreX::IADPartSessionPtr AlibreX::IADCoedge::GetPart ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Part(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

#pragma implementation_key(520)
inline AlibreX::IADBodyPtr AlibreX::IADCoedge::GetBody ( ) {
    struct IADBody * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBodyPtr(_result, false);
}

#pragma implementation_key(521)
inline AlibreX::IADLoopPtr AlibreX::IADCoedge::GetLoop ( ) {
    struct IADLoop * _result = 0;
    HRESULT _hr = get_Loop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADLoopPtr(_result, false);
}

#pragma implementation_key(522)
inline AlibreX::IADEdgePtr AlibreX::IADCoedge::GetEdge ( ) {
    struct IADEdge * _result = 0;
    HRESULT _hr = get_Edge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADEdgePtr(_result, false);
}

#pragma implementation_key(523)
inline AlibreX::IADCoedgePtr AlibreX::IADCoedge::GetPartnerCoedge ( ) {
    struct IADCoedge * _result = 0;
    HRESULT _hr = get_PartnerCoedge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADCoedgePtr(_result, false);
}

#pragma implementation_key(524)
inline VARIANT_BOOL AlibreX::IADCoedge::GetIsSenseReversed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSenseReversed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADCoedges wrapper method implementations
//

#pragma implementation_key(525)
inline IEnumVARIANTPtr AlibreX::IADCoedges::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(526)
inline AlibreX::IADCoedgePtr AlibreX::IADCoedges::GetItem ( long index ) {
    struct IADCoedge * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADCoedgePtr(_result, false);
}

#pragma implementation_key(527)
inline long AlibreX::IADCoedges::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(528)
inline AlibreX::DIEnumPtr AlibreX::IADCoedges::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(529)
inline AlibreX::IADPartSessionPtr AlibreX::IADCoedges::GetSession ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

//
// interface IADComplexSketchFigure wrapper method implementations
//

#pragma implementation_key(530)
inline AlibreX::IADCompositeFigurePtr AlibreX::IADComplexSketchFigure::GetCompositeFigure ( ) {
    struct IADCompositeFigure * _result = 0;
    HRESULT _hr = get_CompositeFigure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADCompositeFigurePtr(_result, false);
}

//
// interface IADCompositeFigure wrapper method implementations
//

#pragma implementation_key(531)
inline IEnumVARIANTPtr AlibreX::IADCompositeFigure::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(532)
inline AlibreX::IADSketchFigurePtr AlibreX::IADCompositeFigure::GetItem ( const _variant_t & index ) {
    struct IADSketchFigure * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchFigurePtr(_result, false);
}

#pragma implementation_key(533)
inline long AlibreX::IADCompositeFigure::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(534)
inline AlibreX::DIEnumPtr AlibreX::IADCompositeFigure::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(535)
inline AlibreX::IADSketchShapePatternPtr AlibreX::IADCompositeFigure::GetShapePattern ( ) {
    struct IADSketchShapePattern * _result = 0;
    HRESULT _hr = get_ShapePattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchShapePatternPtr(_result, false);
}

#pragma implementation_key(536)
inline AlibreX::IADComplexSketchFigurePtr AlibreX::IADCompositeFigure::GetSketchFigure ( ) {
    struct IADComplexSketchFigure * _result = 0;
    HRESULT _hr = get_SketchFigure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADComplexSketchFigurePtr(_result, false);
}

//
// interface IADSketchShapePattern wrapper method implementations
//

#pragma implementation_key(537)
inline AlibreX::IADCompositeFigurePtr AlibreX::IADSketchShapePattern::GetCompositeFigure ( ) {
    struct IADCompositeFigure * _result = 0;
    HRESULT _hr = get_CompositeFigure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADCompositeFigurePtr(_result, false);
}

//
// interface IADConfiguration wrapper method implementations
//

#pragma implementation_key(538)
inline enum AlibreX::ADObjectType AlibreX::IADConfiguration::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(539)
inline _bstr_t AlibreX::IADConfiguration::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(540)
inline enum AlibreX::ADConfigurationLockType AlibreX::IADConfiguration::GetLocks ( ) {
    enum ADConfigurationLockType _result;
    HRESULT _hr = get_Locks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(541)
inline void AlibreX::IADConfiguration::PutLocks ( enum ADConfigurationLockType pRetVal ) {
    HRESULT _hr = put_Locks(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(542)
inline AlibreX::IADDesignSessionPtr AlibreX::IADConfiguration::GetDesignSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_DesignSession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

#pragma implementation_key(543)
inline long AlibreX::IADConfiguration::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADConfigurations wrapper method implementations
//

#pragma implementation_key(544)
inline IEnumVARIANTPtr AlibreX::IADConfigurations::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(545)
inline AlibreX::IADConfigurationPtr AlibreX::IADConfigurations::GetItem ( const _variant_t & index ) {
    struct IADConfiguration * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADConfigurationPtr(_result, false);
}

#pragma implementation_key(546)
inline long AlibreX::IADConfigurations::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(547)
inline AlibreX::DIEnumPtr AlibreX::IADConfigurations::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(548)
inline AlibreX::IADConfigurationPtr AlibreX::IADConfigurations::AddConfiguration ( _bstr_t Name, VARIANT_BOOL lockOption ) {
    struct IADConfiguration * _result = 0;
    HRESULT _hr = raw_AddConfiguration(Name, lockOption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADConfigurationPtr(_result, false);
}

//
// interface IADGlobalParameterSession wrapper method implementations
//

#pragma implementation_key(549)
inline AlibreX::IADConfigurationPtr AlibreX::IADGlobalParameterSession::GetActiveConfiguration ( ) {
    struct IADConfiguration * _result = 0;
    HRESULT _hr = get_ActiveConfiguration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADConfigurationPtr(_result, false);
}

#pragma implementation_key(550)
inline void AlibreX::IADGlobalParameterSession::PutRefActiveConfiguration ( struct IADConfiguration * pRetVal ) {
    HRESULT _hr = putref_ActiveConfiguration(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(551)
inline AlibreX::IADConfigurationsPtr AlibreX::IADGlobalParameterSession::GetConfigurations ( ) {
    struct IADConfigurations * _result = 0;
    HRESULT _hr = get_Configurations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADConfigurationsPtr(_result, false);
}

//
// interface IADDesignAxes wrapper method implementations
//

#pragma implementation_key(552)
inline IEnumVARIANTPtr AlibreX::IADDesignAxes::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(553)
inline AlibreX::IADDesignAxisPtr AlibreX::IADDesignAxes::GetItem ( const _variant_t & index ) {
    struct IADDesignAxis * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignAxisPtr(_result, false);
}

#pragma implementation_key(554)
inline long AlibreX::IADDesignAxes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(555)
inline AlibreX::DIEnumPtr AlibreX::IADDesignAxes::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(556)
inline AlibreX::IADDesignSessionPtr AlibreX::IADDesignAxes::GetSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

#pragma implementation_key(557)
inline AlibreX::IADDesignAxisPtr AlibreX::IADDesignAxes::CreateBy2Points ( struct IADOccurrence * pOccurrence1, IDispatch * pPoint1, struct IADOccurrence * pOccurrence2, IDispatch * pPoint2, _bstr_t Name ) {
    struct IADDesignAxis * _result = 0;
    HRESULT _hr = raw_CreateBy2Points(pOccurrence1, pPoint1, pOccurrence2, pPoint2, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignAxisPtr(_result, false);
}

#pragma implementation_key(558)
inline AlibreX::IADDesignAxisPtr AlibreX::IADDesignAxes::CreateFromCylindricalFace ( struct IADOccurrence * pOccurrence, struct IADFace * pFace, _bstr_t Name ) {
    struct IADDesignAxis * _result = 0;
    HRESULT _hr = raw_CreateFromCylindricalFace(pOccurrence, pFace, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignAxisPtr(_result, false);
}

#pragma implementation_key(559)
inline AlibreX::IADDesignAxisPtr AlibreX::IADDesignAxes::CreateBy2Planes ( struct IADOccurrence * pOccurrence1, IDispatch * pPlane1, struct IADOccurrence * pOccurrence2, IDispatch * pPlane2, _bstr_t Name ) {
    struct IADDesignAxis * _result = 0;
    HRESULT _hr = raw_CreateBy2Planes(pOccurrence1, pPlane1, pOccurrence2, pPlane2, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignAxisPtr(_result, false);
}

//
// interface IADDesignAxis wrapper method implementations
//

#pragma implementation_key(560)
inline enum AlibreX::ADObjectType AlibreX::IADDesignAxis::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(561)
inline _bstr_t AlibreX::IADDesignAxis::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(562)
inline void AlibreX::IADDesignAxis::PutName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Name(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(563)
inline enum AlibreX::ADDesignGeometryType AlibreX::IADDesignAxis::GetAxisType ( ) {
    enum ADDesignGeometryType _result;
    HRESULT _hr = get_AxisType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(564)
inline AlibreX::IADRootPtr AlibreX::IADDesignAxis::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(565)
inline AlibreX::IADDesignSessionPtr AlibreX::IADDesignAxis::GetSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

#pragma implementation_key(566)
inline HRESULT AlibreX::IADDesignAxis::GetGeometry ( struct IADPoint * * ppPoint1, struct IADPoint * * ppVector ) {
    HRESULT _hr = raw_GetGeometry(ppPoint1, ppVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(567)
inline AlibreX::IObjectCollectorPtr AlibreX::IADDesignAxis::GetParameters ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(568)
inline AlibreX::IObjectCollectorPtr AlibreX::IADDesignAxis::GetSourceObjects ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_SourceObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(569)
inline HRESULT AlibreX::IADDesignAxis::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(570)
inline AlibreX::IADVectorPtr AlibreX::IADDesignAxis::GetDirection ( ) {
    struct IADVector * _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(571)
inline HRESULT AlibreX::IADDesignAxis::Show ( ) {
    HRESULT _hr = raw_Show();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(572)
inline HRESULT AlibreX::IADDesignAxis::Hide ( ) {
    HRESULT _hr = raw_Hide();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IADDesignMesh wrapper method implementations
//

#pragma implementation_key(573)
inline enum AlibreX::ADObjectType AlibreX::IADDesignMesh::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(574)
inline _bstr_t AlibreX::IADDesignMesh::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(575)
inline void AlibreX::IADDesignMesh::PutName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Name(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(576)
inline AlibreX::IADRootPtr AlibreX::IADDesignMesh::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(577)
inline AlibreX::IADDesignSessionPtr AlibreX::IADDesignMesh::GetSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

#pragma implementation_key(578)
inline VARIANT_BOOL AlibreX::IADDesignMesh::GetIsSurfaced ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSurfaced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(579)
inline __int64 AlibreX::IADDesignMesh::GetTriangleCount ( ) {
    __int64 _result = 0;
    HRESULT _hr = get_TriangleCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADDesignMeshes wrapper method implementations
//

#pragma implementation_key(580)
inline IEnumVARIANTPtr AlibreX::IADDesignMeshes::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(581)
inline AlibreX::IADDesignMeshPtr AlibreX::IADDesignMeshes::GetItem ( const _variant_t & index ) {
    struct IADDesignMesh * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignMeshPtr(_result, false);
}

#pragma implementation_key(582)
inline long AlibreX::IADDesignMeshes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(583)
inline AlibreX::DIEnumPtr AlibreX::IADDesignMeshes::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(584)
inline AlibreX::IADDesignSessionPtr AlibreX::IADDesignMeshes::GetSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

#pragma implementation_key(585)
inline AlibreX::IObjectCollectorPtr AlibreX::IADDesignMeshes::CreateFromFile ( _bstr_t fileName, _bstr_t meshName, enum ADUnits ADUnits ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = raw_CreateFromFile(fileName, meshName, ADUnits, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

//
// interface IADDesignPlane wrapper method implementations
//

#pragma implementation_key(586)
inline enum AlibreX::ADObjectType AlibreX::IADDesignPlane::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(587)
inline _bstr_t AlibreX::IADDesignPlane::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(588)
inline void AlibreX::IADDesignPlane::PutName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Name(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(589)
inline enum AlibreX::ADDesignGeometryType AlibreX::IADDesignPlane::GetPlaneType ( ) {
    enum ADDesignGeometryType _result;
    HRESULT _hr = get_PlaneType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(590)
inline AlibreX::IADRootPtr AlibreX::IADDesignPlane::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(591)
inline AlibreX::IADDesignSessionPtr AlibreX::IADDesignPlane::GetSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

#pragma implementation_key(592)
inline HRESULT AlibreX::IADDesignPlane::GetGeometry ( struct IADPoint * * ppPoint1, struct IADPoint * * ppPoint2, struct IADPoint * * ppPoint3 ) {
    HRESULT _hr = raw_GetGeometry(ppPoint1, ppPoint2, ppPoint3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(593)
inline AlibreX::IADVectorPtr AlibreX::IADDesignPlane::GetNormal ( ) {
    struct IADVector * _result = 0;
    HRESULT _hr = get_Normal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(594)
inline AlibreX::IObjectCollectorPtr AlibreX::IADDesignPlane::GetParameters ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(595)
inline AlibreX::IObjectCollectorPtr AlibreX::IADDesignPlane::GetSourceObjects ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_SourceObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(596)
inline HRESULT AlibreX::IADDesignPlane::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(597)
inline HRESULT AlibreX::IADDesignPlane::Show ( ) {
    HRESULT _hr = raw_Show();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(598)
inline HRESULT AlibreX::IADDesignPlane::Hide ( ) {
    HRESULT _hr = raw_Hide();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IADDesignPlanes wrapper method implementations
//

#pragma implementation_key(599)
inline IEnumVARIANTPtr AlibreX::IADDesignPlanes::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(600)
inline AlibreX::IADDesignPlanePtr AlibreX::IADDesignPlanes::GetItem ( const _variant_t & index ) {
    struct IADDesignPlane * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPlanePtr(_result, false);
}

#pragma implementation_key(601)
inline long AlibreX::IADDesignPlanes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(602)
inline AlibreX::DIEnumPtr AlibreX::IADDesignPlanes::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(603)
inline AlibreX::IADDesignSessionPtr AlibreX::IADDesignPlanes::GetSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

#pragma implementation_key(604)
inline AlibreX::IADDesignPlanePtr AlibreX::IADDesignPlanes::CreateBy3Points ( struct IADOccurrence * pOccurrence1, IDispatch * pPnt1, struct IADOccurrence * pOccurrence2, IDispatch * pPnt2, struct IADOccurrence * pOccurrence3, IDispatch * pPnt3, _bstr_t Name ) {
    struct IADDesignPlane * _result = 0;
    HRESULT _hr = raw_CreateBy3Points(pOccurrence1, pPnt1, pOccurrence2, pPnt2, pOccurrence3, pPnt3, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPlanePtr(_result, false);
}

#pragma implementation_key(605)
inline AlibreX::IADDesignPlanePtr AlibreX::IADDesignPlanes::CreateAtOffsetToPlane ( struct IADOccurrence * pOcc, IDispatch * pPlaneObject, const _variant_t & Offset, _bstr_t Name ) {
    struct IADDesignPlane * _result = 0;
    HRESULT _hr = raw_CreateAtOffsetToPlane(pOcc, pPlaneObject, Offset, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPlanePtr(_result, false);
}

#pragma implementation_key(606)
inline AlibreX::IADDesignPlanePtr AlibreX::IADDesignPlanes::CreateAtAngleToPlane ( struct IADOccurrence * pPlaneOcc, IDispatch * pPlane, struct IADOccurrence * pAxisOcc, IDispatch * pAxis, const _variant_t & Angle, _bstr_t Name ) {
    struct IADDesignPlane * _result = 0;
    HRESULT _hr = raw_CreateAtAngleToPlane(pPlaneOcc, pPlane, pAxisOcc, pAxis, Angle, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPlanePtr(_result, false);
}

//
// interface IADDesignPoint wrapper method implementations
//

#pragma implementation_key(607)
inline enum AlibreX::ADObjectType AlibreX::IADDesignPoint::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(608)
inline _bstr_t AlibreX::IADDesignPoint::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(609)
inline void AlibreX::IADDesignPoint::PutName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Name(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(610)
inline enum AlibreX::ADDesignGeometryType AlibreX::IADDesignPoint::GetPointType ( ) {
    enum ADDesignGeometryType _result;
    HRESULT _hr = get_PointType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(611)
inline AlibreX::IADRootPtr AlibreX::IADDesignPoint::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(612)
inline AlibreX::IADDesignSessionPtr AlibreX::IADDesignPoint::GetSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

#pragma implementation_key(613)
inline AlibreX::IADPointPtr AlibreX::IADDesignPoint::GetGeometry ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_Geometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(614)
inline AlibreX::IObjectCollectorPtr AlibreX::IADDesignPoint::GetParameters ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(615)
inline AlibreX::IObjectCollectorPtr AlibreX::IADDesignPoint::GetSourceObjects ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_SourceObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(616)
inline HRESULT AlibreX::IADDesignPoint::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(617)
inline HRESULT AlibreX::IADDesignPoint::Show ( ) {
    HRESULT _hr = raw_Show();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(618)
inline HRESULT AlibreX::IADDesignPoint::Hide ( ) {
    HRESULT _hr = raw_Hide();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IADDesignPoints wrapper method implementations
//

#pragma implementation_key(619)
inline IEnumVARIANTPtr AlibreX::IADDesignPoints::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(620)
inline AlibreX::IADDesignPointPtr AlibreX::IADDesignPoints::GetItem ( const _variant_t & index ) {
    struct IADDesignPoint * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPointPtr(_result, false);
}

#pragma implementation_key(621)
inline long AlibreX::IADDesignPoints::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(622)
inline AlibreX::DIEnumPtr AlibreX::IADDesignPoints::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(623)
inline AlibreX::IADDesignSessionPtr AlibreX::IADDesignPoints::GetSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

#pragma implementation_key(624)
inline AlibreX::IADDesignPointPtr AlibreX::IADDesignPoints::CreatePoint ( double XCoord, double YCoord, double ZCoord, _bstr_t Name ) {
    struct IADDesignPoint * _result = 0;
    HRESULT _hr = raw_CreatePoint(XCoord, YCoord, ZCoord, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPointPtr(_result, false);
}

#pragma implementation_key(625)
inline AlibreX::IADDesignPointPtr AlibreX::IADDesignPoints::CreatePointFromCircularEdge ( struct IADOccurrence * pOccurrence, struct IADEdge * pEdge, _bstr_t Name ) {
    struct IADDesignPoint * _result = 0;
    HRESULT _hr = raw_CreatePointFromCircularEdge(pOccurrence, pEdge, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPointPtr(_result, false);
}

#pragma implementation_key(626)
inline AlibreX::IADDesignPointPtr AlibreX::IADDesignPoints::CreatePointFromToroidalFace ( struct IADOccurrence * pOccurrence, struct IADFace * pFace, _bstr_t Name ) {
    struct IADDesignPoint * _result = 0;
    HRESULT _hr = raw_CreatePointFromToroidalFace(pOccurrence, pFace, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPointPtr(_result, false);
}

#pragma implementation_key(627)
inline AlibreX::IADDesignPointPtr AlibreX::IADDesignPoints::CreateAtOffsetToPoint ( struct IADOccurrence * pOccurrence, IDispatch * pPoint, const _variant_t & XOffset, const _variant_t & YOffset, const _variant_t & ZOffset, _bstr_t Name ) {
    struct IADDesignPoint * _result = 0;
    HRESULT _hr = raw_CreateAtOffsetToPoint(pOccurrence, pPoint, XOffset, YOffset, ZOffset, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPointPtr(_result, false);
}

#pragma implementation_key(628)
inline AlibreX::IADDesignPointPtr AlibreX::IADDesignPoints::CreateOnEdge ( struct IADOccurrence * pOccurrence, struct IADEdge * pEdge, double ratio, _bstr_t Name ) {
    struct IADDesignPoint * _result = 0;
    HRESULT _hr = raw_CreateOnEdge(pOccurrence, pEdge, ratio, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPointPtr(_result, false);
}

#pragma implementation_key(629)
inline AlibreX::IADDesignPointPtr AlibreX::IADDesignPoints::CreateBetween2Points ( struct IADOccurrence * pOccurrence1, IDispatch * pPoint1, struct IADOccurrence * pOccurrence2, IDispatch * pPoint2, double ratio, _bstr_t Name ) {
    struct IADDesignPoint * _result = 0;
    HRESULT _hr = raw_CreateBetween2Points(pOccurrence1, pPoint1, pOccurrence2, pPoint2, ratio, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPointPtr(_result, false);
}

#pragma implementation_key(630)
inline AlibreX::IADDesignPointPtr AlibreX::IADDesignPoints::CreateByProjectingToPlane ( struct IADOccurrence * pOccurrence1, IDispatch * pPoint, struct IADOccurrence * pOccurrence2, IDispatch * pPlane, const _variant_t & XOffset, const _variant_t & YOffset, _bstr_t Name ) {
    struct IADDesignPoint * _result = 0;
    HRESULT _hr = raw_CreateByProjectingToPlane(pOccurrence1, pPoint, pOccurrence2, pPlane, XOffset, YOffset, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPointPtr(_result, false);
}

#pragma implementation_key(631)
inline AlibreX::IADDesignPointPtr AlibreX::IADDesignPoints::CreateBy3Planes ( struct IADOccurrence * pOccurrence1, IDispatch * pPlane1, struct IADOccurrence * pOccurrence2, IDispatch * pPlane2, struct IADOccurrence * pOccurrence3, IDispatch * pPlane3, _bstr_t Name ) {
    struct IADDesignPoint * _result = 0;
    HRESULT _hr = raw_CreateBy3Planes(pOccurrence1, pPlane1, pOccurrence2, pPlane2, pOccurrence3, pPlane3, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPointPtr(_result, false);
}

#pragma implementation_key(632)
inline AlibreX::IADDesignPointPtr AlibreX::IADDesignPoints::CreateBy2Axes ( struct IADOccurrence * pOccurrence1, IDispatch * pAxis1, struct IADOccurrence * pOccurrence2, IDispatch * pAxis2, _bstr_t Name ) {
    struct IADDesignPoint * _result = 0;
    HRESULT _hr = raw_CreateBy2Axes(pOccurrence1, pAxis1, pOccurrence2, pAxis2, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPointPtr(_result, false);
}

#pragma implementation_key(633)
inline AlibreX::IADDesignPointPtr AlibreX::IADDesignPoints::CreateByAxisAndPlane ( struct IADOccurrence * pOccurrence1, IDispatch * pAxis, struct IADOccurrence * pOccurrence2, IDispatch * pPlane, _bstr_t Name ) {
    struct IADDesignPoint * _result = 0;
    HRESULT _hr = raw_CreateByAxisAndPlane(pOccurrence1, pAxis, pOccurrence2, pPlane, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPointPtr(_result, false);
}

//
// interface IADDesignSession wrapper method implementations
//

#pragma implementation_key(634)
inline HRESULT AlibreX::IADDesignSession::ExportSTEP ( _bstr_t fileName ) {
    HRESULT _hr = raw_ExportSTEP(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(635)
inline HRESULT AlibreX::IADDesignSession::ExportAP203 ( _bstr_t fileName ) {
    HRESULT _hr = raw_ExportAP203(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(636)
inline HRESULT AlibreX::IADDesignSession::ExportAP214 ( _bstr_t fileName ) {
    HRESULT _hr = raw_ExportAP214(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(637)
inline HRESULT AlibreX::IADDesignSession::ExportIGES ( _bstr_t fileName ) {
    HRESULT _hr = raw_ExportIGES(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(638)
inline HRESULT AlibreX::IADDesignSession::ExportSAT ( _bstr_t fileName, long version ) {
    HRESULT _hr = raw_ExportSAT(fileName, version);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(639)
inline HRESULT AlibreX::IADDesignSession::ExportSTL ( _bstr_t fileName, double maxCellSize, double normalDeviation, double surfaceDeviation ) {
    HRESULT _hr = raw_ExportSTL(fileName, maxCellSize, normalDeviation, surfaceDeviation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(640)
inline HRESULT AlibreX::IADDesignSession::ExportBOM ( _bstr_t fileName ) {
    HRESULT _hr = raw_ExportBOM(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(641)
inline HRESULT AlibreX::IADDesignSession::RegenerateDesign ( VARIANT_BOOL deepRegenerate ) {
    HRESULT _hr = raw_RegenerateDesign(deepRegenerate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(642)
inline AlibreX::IADDesignPropertiesPtr AlibreX::IADDesignSession::GetDesignProperties ( ) {
    struct IADDesignProperties * _result = 0;
    HRESULT _hr = get_DesignProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPropertiesPtr(_result, false);
}

#pragma implementation_key(643)
inline VARIANT_BOOL AlibreX::IADDesignSession::GetHasErrors ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(644)
inline HRESULT AlibreX::IADDesignSession::ExportSTL2 ( _bstr_t fileName ) {
    HRESULT _hr = raw_ExportSTL2(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(645)
inline HRESULT AlibreX::IADDesignSession::ExportSAT2 ( _bstr_t fileName, long version, VARIANT_BOOL saveColorAttribute ) {
    HRESULT _hr = raw_ExportSAT2(fileName, version, saveColorAttribute);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(646)
inline AlibreX::IADDesignPointsPtr AlibreX::IADDesignSession::GetDesignPoints ( ) {
    struct IADDesignPoints * _result = 0;
    HRESULT _hr = get_DesignPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPointsPtr(_result, false);
}

#pragma implementation_key(647)
inline AlibreX::IADDesignAxesPtr AlibreX::IADDesignSession::GetDesignAxes ( ) {
    struct IADDesignAxes * _result = 0;
    HRESULT _hr = get_DesignAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignAxesPtr(_result, false);
}

#pragma implementation_key(648)
inline AlibreX::IADDesignPlanesPtr AlibreX::IADDesignSession::GetDesignPlanes ( ) {
    struct IADDesignPlanes * _result = 0;
    HRESULT _hr = get_DesignPlanes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignPlanesPtr(_result, false);
}

#pragma implementation_key(649)
inline AlibreX::IADPhysicalPropertiesPtr AlibreX::IADDesignSession::PhysicalProperties ( enum ADAccuracySetting accuracy ) {
    struct IADPhysicalProperties * _result = 0;
    HRESULT _hr = raw_PhysicalProperties(accuracy, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPhysicalPropertiesPtr(_result, false);
}

#pragma implementation_key(650)
inline AlibreX::IADTransformationPtr AlibreX::IADDesignSession::GetViewTransform ( ) {
    struct IADTransformation * _result = 0;
    HRESULT _hr = get_ViewTransform(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTransformationPtr(_result, false);
}

#pragma implementation_key(651)
inline double AlibreX::IADDesignSession::GetModelTolerance ( ) {
    double _result = 0;
    HRESULT _hr = get_ModelTolerance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(652)
inline AlibreX::IADConfigurationPtr AlibreX::IADDesignSession::GetActiveConfiguration ( ) {
    struct IADConfiguration * _result = 0;
    HRESULT _hr = get_ActiveConfiguration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADConfigurationPtr(_result, false);
}

#pragma implementation_key(653)
inline void AlibreX::IADDesignSession::PutRefActiveConfiguration ( struct IADConfiguration * pRetVal ) {
    HRESULT _hr = putref_ActiveConfiguration(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(654)
inline AlibreX::IADConfigurationsPtr AlibreX::IADDesignSession::GetConfigurations ( ) {
    struct IADConfigurations * _result = 0;
    HRESULT _hr = get_Configurations(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADConfigurationsPtr(_result, false);
}

#pragma implementation_key(655)
inline AlibreX::IADSavedViewsPtr AlibreX::IADDesignSession::GetSavedViews ( ) {
    struct IADSavedViews * _result = 0;
    HRESULT _hr = get_SavedViews(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSavedViewsPtr(_result, false);
}

#pragma implementation_key(656)
inline HRESULT AlibreX::IADDesignSession::ViewExtents ( struct IAD2DPoint * * pUpperLeft, struct IAD2DPoint * * pBottomRight ) {
    HRESULT _hr = raw_ViewExtents(pUpperLeft, pBottomRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(657)
inline VARIANT_BOOL AlibreX::IADDesignSession::GetIsSectioning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSectioning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(658)
inline AlibreX::IADIGESOptionsPtr AlibreX::IADDesignSession::GetIGESOptions ( ) {
    struct IADIGESOptions * _result = 0;
    HRESULT _hr = get_IGESOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADIGESOptionsPtr(_result, false);
}

#pragma implementation_key(659)
inline AlibreX::IADPointPtr AlibreX::IADDesignSession::GetCameraPosition ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_CameraPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(660)
inline long AlibreX::IADDesignSession::GetCircularFacets ( ) {
    long _result = 0;
    HRESULT _hr = get_CircularFacets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(661)
inline VARIANT_BOOL AlibreX::IADDesignSession::GetIsPerspective ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPerspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(662)
inline AlibreX::IADDesignSelectionFilterPtr AlibreX::IADDesignSession::GetSelectionFilter ( ) {
    struct IADDesignSelectionFilter * _result = 0;
    HRESULT _hr = get_SelectionFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSelectionFilterPtr(_result, false);
}

#pragma implementation_key(663)
inline HRESULT AlibreX::IADDesignSession::ExportBIP ( _bstr_t fileName ) {
    HRESULT _hr = raw_ExportBIP(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(664)
inline HRESULT AlibreX::IADDesignSession::ExportBIP_2 ( _bstr_t fileName, _bstr_t optionFilePath ) {
    HRESULT _hr = raw_ExportBIP_2(fileName, optionFilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(665)
inline VARIANT_BOOL AlibreX::IADDesignSession::GetAutoRegenerate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoRegenerate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(666)
inline void AlibreX::IADDesignSession::PutAutoRegenerate ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_AutoRegenerate(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(667)
inline HRESULT AlibreX::IADDesignSession::SetViewTransform ( struct IADTransformation * transform ) {
    HRESULT _hr = raw_SetViewTransform(transform);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(668)
inline VARIANT_BOOL AlibreX::IADDesignSession::CheckPrintability ( VARIANT_BOOL bCheckStatus ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_CheckPrintability(bCheckStatus, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(669)
inline VARIANT_BOOL AlibreX::IADDesignSession::preparePrintabilityChecking ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_preparePrintabilityChecking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(670)
inline AlibreX::IADPrintabilityCheckResultsPtr AlibreX::IADDesignSession::PrintabilityCheckResults ( ) {
    struct IADPrintabilityCheckResults * _result = 0;
    HRESULT _hr = raw_PrintabilityCheckResults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPrintabilityCheckResultsPtr(_result, false);
}

#pragma implementation_key(671)
inline VARIANT_BOOL AlibreX::IADDesignSession::postProcessPrintabilityChecking ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_postProcessPrintabilityChecking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(672)
inline AlibreX::IADAutoBrepImportSummaryPtr AlibreX::IADDesignSession::GetAutoBrepImportSummary ( ) {
    struct IADAutoBrepImportSummary * _result = 0;
    HRESULT _hr = get_AutoBrepImportSummary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADAutoBrepImportSummaryPtr(_result, false);
}

#pragma implementation_key(673)
inline AlibreX::IADDesignMeshesPtr AlibreX::IADDesignSession::GetDesignMeshes ( ) {
    struct IADDesignMeshes * _result = 0;
    HRESULT _hr = get_DesignMeshes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignMeshesPtr(_result, false);
}

#pragma implementation_key(674)
inline AlibreX::IADSketchesPtr AlibreX::IADDesignSession::GetSketches ( ) {
    struct IADSketches * _result = 0;
    HRESULT _hr = get_Sketches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchesPtr(_result, false);
}

#pragma implementation_key(675)
inline HRESULT AlibreX::IADDesignSession::ExportParasolid ( _bstr_t fileName ) {
    HRESULT _hr = raw_ExportParasolid(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(676)
inline HRESULT AlibreX::IADDesignSession::StartChanges ( ) {
    HRESULT _hr = raw_StartChanges();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(677)
inline HRESULT AlibreX::IADDesignSession::StopChanges ( ) {
    HRESULT _hr = raw_StopChanges();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(678)
inline HRESULT AlibreX::IADDesignSession::ExportOBJ ( _bstr_t fileName ) {
    HRESULT _hr = raw_ExportOBJ(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(679)
inline HRESULT AlibreX::IADDesignSession::ExportAP242 ( _bstr_t fileName ) {
    HRESULT _hr = raw_ExportAP242(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IADSavedView wrapper method implementations
//

#pragma implementation_key(680)
inline enum AlibreX::ADObjectType AlibreX::IADSavedView::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(681)
inline _bstr_t AlibreX::IADSavedView::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(682)
inline AlibreX::IADDesignSessionPtr AlibreX::IADSavedView::GetDesignSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_DesignSession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

#pragma implementation_key(683)
inline AlibreX::IADTransformationPtr AlibreX::IADSavedView::GetOrientation ( ) {
    struct IADTransformation * _result = 0;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTransformationPtr(_result, false);
}

#pragma implementation_key(684)
inline HRESULT AlibreX::IADSavedView::GetExtents ( struct IAD2DPoint * * pUpperLeft, struct IAD2DPoint * * pBottomRight ) {
    HRESULT _hr = raw_GetExtents(pUpperLeft, pBottomRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(685)
inline AlibreX::IADPointPtr AlibreX::IADSavedView::GetCameraPosition ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_CameraPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(686)
inline AlibreX::IADPointPtr AlibreX::IADSavedView::GetTargetPosition ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_TargetPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(687)
inline double AlibreX::IADSavedView::GetNearClippingDistanceFromCamera ( ) {
    double _result = 0;
    HRESULT _hr = get_NearClippingDistanceFromCamera(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(688)
inline double AlibreX::IADSavedView::GetFarClippingDistanceFromCamera ( ) {
    double _result = 0;
    HRESULT _hr = get_FarClippingDistanceFromCamera(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(689)
inline VARIANT_BOOL AlibreX::IADSavedView::GetIsPerspective ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPerspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(690)
inline double AlibreX::IADSavedView::GetOrthographicScaleFactor ( ) {
    double _result = 0;
    HRESULT _hr = get_OrthographicScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(691)
inline double AlibreX::IADSavedView::GetFieldOfView ( ) {
    double _result = 0;
    HRESULT _hr = get_FieldOfView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(692)
inline AlibreX::IADPointPtr AlibreX::IADSavedView::GetUpVector ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_UpVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

//
// interface IADSavedViews wrapper method implementations
//

#pragma implementation_key(693)
inline IEnumVARIANTPtr AlibreX::IADSavedViews::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(694)
inline AlibreX::IADSavedViewPtr AlibreX::IADSavedViews::GetItem ( const _variant_t & index ) {
    struct IADSavedView * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSavedViewPtr(_result, false);
}

#pragma implementation_key(695)
inline long AlibreX::IADSavedViews::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(696)
inline AlibreX::DIEnumPtr AlibreX::IADSavedViews::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

//
// interface IADDesignSurface wrapper method implementations
//

#pragma implementation_key(697)
inline enum AlibreX::ADObjectType AlibreX::IADDesignSurface::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(698)
inline _bstr_t AlibreX::IADDesignSurface::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(699)
inline void AlibreX::IADDesignSurface::PutName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Name(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(700)
inline AlibreX::IADRootPtr AlibreX::IADDesignSurface::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(701)
inline AlibreX::IADPartSessionPtr AlibreX::IADDesignSurface::GetSession ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

#pragma implementation_key(702)
inline HRESULT AlibreX::IADDesignSurface::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(703)
inline AlibreX::IADFacesPtr AlibreX::IADDesignSurface::GetFaces ( ) {
    struct IADFaces * _result = 0;
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFacesPtr(_result, false);
}

#pragma implementation_key(704)
inline AlibreX::IADEdgesPtr AlibreX::IADDesignSurface::GetEdges ( ) {
    struct IADEdges * _result = 0;
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADEdgesPtr(_result, false);
}

#pragma implementation_key(705)
inline AlibreX::IADVerticesPtr AlibreX::IADDesignSurface::GetVertices ( ) {
    struct IADVertices * _result = 0;
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVerticesPtr(_result, false);
}

#pragma implementation_key(706)
inline AlibreX::IADTransformationPtr AlibreX::IADDesignSurface::Gettransform ( ) {
    struct IADTransformation * _result = 0;
    HRESULT _hr = get_transform(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTransformationPtr(_result, false);
}

#pragma implementation_key(707)
inline void AlibreX::IADDesignSurface::PutReftransform ( struct IADTransformation * pRetVal ) {
    HRESULT _hr = putref_transform(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IADDesignSurfaces wrapper method implementations
//

#pragma implementation_key(708)
inline IEnumVARIANTPtr AlibreX::IADDesignSurfaces::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(709)
inline AlibreX::IADDesignSurfacePtr AlibreX::IADDesignSurfaces::GetItem ( const _variant_t & index ) {
    struct IADDesignSurface * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSurfacePtr(_result, false);
}

#pragma implementation_key(710)
inline long AlibreX::IADDesignSurfaces::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(711)
inline AlibreX::DIEnumPtr AlibreX::IADDesignSurfaces::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(712)
inline AlibreX::IADPartSessionPtr AlibreX::IADDesignSurfaces::GetSession ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

#pragma implementation_key(713)
inline AlibreX::IObjectCollectorPtr AlibreX::IADDesignSurfaces::InsertFromFile ( _bstr_t fileName, enum ADFaceProcessingType faceProcessingType, VARIANT_BOOL healOption, VARIANT_BOOL makeTolerantOption, enum ADUnits overridingUnit ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = raw_InsertFromFile(fileName, faceProcessingType, healOption, makeTolerantOption, overridingUnit, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

//
// interface IADDimension wrapper method implementations
//

#pragma implementation_key(714)
inline AlibreX::IADParameterPtr AlibreX::IADDimension::GetParameter ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Parameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(715)
inline enum AlibreX::ADObjectType AlibreX::IADDimension::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(716)
inline enum AlibreX::ADDimensionType AlibreX::IADDimension::GetDimensionType ( ) {
    enum ADDimensionType _result;
    HRESULT _hr = get_DimensionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(717)
inline AlibreX::IADRootPtr AlibreX::IADDimension::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(718)
inline AlibreX::IADDesignSessionPtr AlibreX::IADDimension::GetSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

//
// interface IADDimensions wrapper method implementations
//

#pragma implementation_key(719)
inline IEnumVARIANTPtr AlibreX::IADDimensions::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(720)
inline AlibreX::IADDimensionPtr AlibreX::IADDimensions::GetItem ( long index ) {
    struct IADDimension * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDimensionPtr(_result, false);
}

#pragma implementation_key(721)
inline long AlibreX::IADDimensions::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(722)
inline AlibreX::DIEnumPtr AlibreX::IADDimensions::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(723)
inline AlibreX::IADSketchPtr AlibreX::IADDimensions::GetSketch ( ) {
    struct IADSketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPtr(_result, false);
}

#pragma implementation_key(724)
inline AlibreX::IADDimensionPtr AlibreX::IADDimensions::PlaceLinearDimension ( struct IADSketchLine * pSketchLine, const _variant_t & dimension ) {
    struct IADDimension * _result = 0;
    HRESULT _hr = raw_PlaceLinearDimension(pSketchLine, dimension, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDimensionPtr(_result, false);
}

#pragma implementation_key(725)
inline AlibreX::IADDimensionPtr AlibreX::IADDimensions::PlaceRadialDimension ( struct IADSketchFigure * pSketchFigure, const _variant_t & dimension ) {
    struct IADDimension * _result = 0;
    HRESULT _hr = raw_PlaceRadialDimension(pSketchFigure, dimension, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDimensionPtr(_result, false);
}

#pragma implementation_key(726)
inline AlibreX::IADDimensionPtr AlibreX::IADDimensions::PlaceDiametricDimension ( struct IADSketchCircle * pSketchCircle, const _variant_t & dimension ) {
    struct IADDimension * _result = 0;
    HRESULT _hr = raw_PlaceDiametricDimension(pSketchCircle, dimension, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDimensionPtr(_result, false);
}

#pragma implementation_key(727)
inline AlibreX::IADDimensionPtr AlibreX::IADDimensions::PlaceLinearDimension_2 ( struct IADSketchPoint * pStartSketchPoint, struct IADSketchPoint * pEndSketchPoint, const _variant_t & dimension ) {
    struct IADDimension * _result = 0;
    HRESULT _hr = raw_PlaceLinearDimension_2(pStartSketchPoint, pEndSketchPoint, dimension, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDimensionPtr(_result, false);
}

//
// interface IADDraftFeature wrapper method implementations
//

#pragma implementation_key(728)
inline AlibreX::IADParameterPtr AlibreX::IADDraftFeature::GetDraftAngleParameter ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_DraftAngleParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(729)
inline VARIANT_BOOL AlibreX::IADDraftFeature::GetIsOutwardDraft ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOutwardDraft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(730)
inline AlibreX::IADTargetProxyPtr AlibreX::IADDraftFeature::GetDraftNeutralPlane ( ) {
    struct IADTargetProxy * _result = 0;
    HRESULT _hr = get_DraftNeutralPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTargetProxyPtr(_result, false);
}

#pragma implementation_key(731)
inline AlibreX::IObjectCollectorPtr AlibreX::IADDraftFeature::GetDraftFaces ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_DraftFaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

//
// interface IADDrawingSession wrapper method implementations
//

#pragma implementation_key(732)
inline HRESULT AlibreX::IADDrawingSession::ExportSTEP ( _bstr_t fileName ) {
    HRESULT _hr = raw_ExportSTEP(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(733)
inline HRESULT AlibreX::IADDrawingSession::ExportDWG ( _bstr_t fileName ) {
    HRESULT _hr = raw_ExportDWG(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(734)
inline HRESULT AlibreX::IADDrawingSession::ExportDXF ( _bstr_t fileName ) {
    HRESULT _hr = raw_ExportDXF(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(735)
inline HRESULT AlibreX::IADDrawingSession::ExportBOM ( _bstr_t fileName ) {
    HRESULT _hr = raw_ExportBOM(fileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(736)
inline AlibreX::IADDrawingSelectionFilterPtr AlibreX::IADDrawingSession::GetSelectionFilter ( ) {
    struct IADDrawingSelectionFilter * _result = 0;
    HRESULT _hr = get_SelectionFilter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDrawingSelectionFilterPtr(_result, false);
}

#pragma implementation_key(737)
inline AlibreX::IADSheetsPtr AlibreX::IADDrawingSession::GetSheets ( ) {
    struct IADSheets * _result = 0;
    HRESULT _hr = get_Sheets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSheetsPtr(_result, false);
}

#pragma implementation_key(738)
inline AlibreX::IADDrawingPropertiesPtr AlibreX::IADDrawingSession::GetProperties ( ) {
    struct IADDrawingProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDrawingPropertiesPtr(_result, false);
}

#pragma implementation_key(739)
inline HRESULT AlibreX::IADDrawingSession::ReprojectViews ( struct IObjectCollector * Views, enum ADDrawingViewType projectViewMode, VARIANT_BOOL retainViewType ) {
    HRESULT _hr = raw_ReprojectViews(Views, projectViewMode, retainViewType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(740)
inline HRESULT AlibreX::IADDrawingSession::ExportPDF ( _bstr_t filePath, VARIANT_BOOL append ) {
    HRESULT _hr = raw_ExportPDF(filePath, append);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IADDrawingView wrapper method implementations
//

#pragma implementation_key(741)
inline enum AlibreX::ADObjectType AlibreX::IADDrawingView::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(742)
inline _bstr_t AlibreX::IADDrawingView::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(743)
inline void AlibreX::IADDrawingView::PutName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Name(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(744)
inline AlibreX::IADRootPtr AlibreX::IADDrawingView::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(745)
inline AlibreX::IADSheetPtr AlibreX::IADDrawingView::GetSheet ( ) {
    struct IADSheet * _result = 0;
    HRESULT _hr = get_Sheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSheetPtr(_result, false);
}

#pragma implementation_key(746)
inline HRESULT AlibreX::IADDrawingView::GetExtents ( struct IAD2DPoint * * pLower, struct IAD2DPoint * * pUpper ) {
    HRESULT _hr = raw_GetExtents(pLower, pUpper);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(747)
inline enum AlibreX::ADDrawingViewType AlibreX::IADDrawingView::GetViewType ( ) {
    enum ADDrawingViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADDrawingViews wrapper method implementations
//

#pragma implementation_key(748)
inline IEnumVARIANTPtr AlibreX::IADDrawingViews::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(749)
inline AlibreX::IADDrawingViewPtr AlibreX::IADDrawingViews::GetItem ( const _variant_t & index ) {
    struct IADDrawingView * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDrawingViewPtr(_result, false);
}

#pragma implementation_key(750)
inline long AlibreX::IADDrawingViews::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(751)
inline AlibreX::DIEnumPtr AlibreX::IADDrawingViews::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(752)
inline AlibreX::IADDrawingSessionPtr AlibreX::IADDrawingViews::GetSession ( ) {
    struct IADDrawingSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDrawingSessionPtr(_result, false);
}

//
// interface IADEdge wrapper method implementations
//

#pragma implementation_key(753)
inline enum AlibreX::ADObjectType AlibreX::IADEdge::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(754)
inline enum AlibreX::ADTopologyType AlibreX::IADEdge::GetTopologyType ( ) {
    enum ADTopologyType _result;
    HRESULT _hr = get_TopologyType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(755)
inline AlibreX::IADPartSessionPtr AlibreX::IADEdge::GetPart ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Part(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

#pragma implementation_key(756)
inline AlibreX::IADBodyPtr AlibreX::IADEdge::GetBody ( ) {
    struct IADBody * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBodyPtr(_result, false);
}

#pragma implementation_key(757)
inline AlibreX::IADFacesPtr AlibreX::IADEdge::GetFaces ( ) {
    struct IADFaces * _result = 0;
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFacesPtr(_result, false);
}

#pragma implementation_key(758)
inline AlibreX::IADCoedgePtr AlibreX::IADEdge::Coedge ( struct IADFace * face ) {
    struct IADCoedge * _result = 0;
    HRESULT _hr = raw_Coedge(face, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADCoedgePtr(_result, false);
}

#pragma implementation_key(759)
inline AlibreX::IADVertexPtr AlibreX::IADEdge::GetStartVertex ( ) {
    struct IADVertex * _result = 0;
    HRESULT _hr = get_StartVertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVertexPtr(_result, false);
}

#pragma implementation_key(760)
inline AlibreX::IADVertexPtr AlibreX::IADEdge::GetEndVertex ( ) {
    struct IADVertex * _result = 0;
    HRESULT _hr = get_EndVertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVertexPtr(_result, false);
}

#pragma implementation_key(761)
inline SAFEARRAY * AlibreX::IADEdge::GetKey ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(762)
inline AlibreX::IADCurvePtr AlibreX::IADEdge::GetGeometry ( ) {
    struct IADCurve * _result = 0;
    HRESULT _hr = get_Geometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADCurvePtr(_result, false);
}

#pragma implementation_key(763)
inline HRESULT AlibreX::IADEdge::GetExtents ( struct IADPoint * * ppLower, struct IADPoint * * ppUpper ) {
    HRESULT _hr = raw_GetExtents(ppLower, ppUpper);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(764)
inline VARIANT_BOOL AlibreX::IADEdge::GetIsSenseReversed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSenseReversed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(765)
inline long AlibreX::IADEdge::GetTimeStamp ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeStamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADEdges wrapper method implementations
//

#pragma implementation_key(766)
inline IEnumVARIANTPtr AlibreX::IADEdges::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(767)
inline AlibreX::IADEdgePtr AlibreX::IADEdges::GetItem ( long index ) {
    struct IADEdge * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADEdgePtr(_result, false);
}

#pragma implementation_key(768)
inline long AlibreX::IADEdges::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(769)
inline AlibreX::DIEnumPtr AlibreX::IADEdges::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(770)
inline AlibreX::IADPartSessionPtr AlibreX::IADEdges::GetSession ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

//
// interface IADEventsCallback wrapper method implementations
//

#pragma implementation_key(771)
inline HRESULT AlibreX::IADEventsCallback::OnInitialize ( ) {
    HRESULT _hr = raw_OnInitialize();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(772)
inline HRESULT AlibreX::IADEventsCallback::OnTerminate ( ) {
    HRESULT _hr = raw_OnTerminate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(773)
inline HRESULT AlibreX::IADEventsCallback::OnSessionOpen ( struct IADSession * pSession ) {
    HRESULT _hr = raw_OnSessionOpen(pSession);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(774)
inline HRESULT AlibreX::IADEventsCallback::OnSessionClose ( struct IADSession * pSession ) {
    HRESULT _hr = raw_OnSessionClose(pSession);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(775)
inline HRESULT AlibreX::IADEventsCallback::OnSessionChange ( struct IADSession * pSession, SAFEARRAY * * pModifiedItems, SAFEARRAY * * changeType ) {
    HRESULT _hr = raw_OnSessionChange(pSession, pModifiedItems, changeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(776)
inline HRESULT AlibreX::IADEventsCallback::OnModelLoadComplete ( struct IADSession * pSession ) {
    HRESULT _hr = raw_OnModelLoadComplete(pSession);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IADExplodedView wrapper method implementations
//

#pragma implementation_key(777)
inline enum AlibreX::ADObjectType AlibreX::IADExplodedView::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(778)
inline _bstr_t AlibreX::IADExplodedView::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(779)
inline AlibreX::IADAssemblySessionPtr AlibreX::IADExplodedView::GetSession ( ) {
    struct IADAssemblySession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADAssemblySessionPtr(_result, false);
}

#pragma implementation_key(780)
inline AlibreX::IADRootPtr AlibreX::IADExplodedView::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(781)
inline VARIANT_BOOL AlibreX::IADExplodedView::GetIsCurrent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCurrent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(782)
inline AlibreX::IADExplodedViewStepsPtr AlibreX::IADExplodedView::GetExplodedViewSteps ( ) {
    struct IADExplodedViewSteps * _result = 0;
    HRESULT _hr = get_ExplodedViewSteps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADExplodedViewStepsPtr(_result, false);
}

#pragma implementation_key(783)
inline _bstr_t AlibreX::IADExplodedView::GetIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Identifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(784)
inline AlibreX::IADTransformationPtr AlibreX::IADExplodedView::GetTransformForOccurrence ( struct IADOccurrence * pOccurrence ) {
    struct IADTransformation * _result = 0;
    HRESULT _hr = raw_GetTransformForOccurrence(pOccurrence, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTransformationPtr(_result, false);
}

//
// interface IADExplodedViews wrapper method implementations
//

#pragma implementation_key(785)
inline IEnumVARIANTPtr AlibreX::IADExplodedViews::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(786)
inline AlibreX::IADExplodedViewPtr AlibreX::IADExplodedViews::GetItem ( const _variant_t & index ) {
    struct IADExplodedView * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADExplodedViewPtr(_result, false);
}

#pragma implementation_key(787)
inline long AlibreX::IADExplodedViews::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(788)
inline AlibreX::DIEnumPtr AlibreX::IADExplodedViews::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(789)
inline AlibreX::IADExplodedViewPtr AlibreX::IADExplodedViews::GetCurrentExplodedView ( ) {
    struct IADExplodedView * _result = 0;
    HRESULT _hr = get_CurrentExplodedView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADExplodedViewPtr(_result, false);
}

//
// interface IADExplodedViewStep wrapper method implementations
//

#pragma implementation_key(790)
inline enum AlibreX::ADObjectType AlibreX::IADExplodedViewStep::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(791)
inline _bstr_t AlibreX::IADExplodedViewStep::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(792)
inline AlibreX::IADExplodedViewPtr AlibreX::IADExplodedViewStep::GetExplodedView ( ) {
    struct IADExplodedView * _result = 0;
    HRESULT _hr = get_ExplodedView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADExplodedViewPtr(_result, false);
}

#pragma implementation_key(793)
inline long AlibreX::IADExplodedViewStep::GetSerialNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_SerialNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(794)
inline AlibreX::IADOccurrencesPtr AlibreX::IADExplodedViewStep::GetOccurrences ( ) {
    struct IADOccurrences * _result = 0;
    HRESULT _hr = get_Occurrences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencesPtr(_result, false);
}

#pragma implementation_key(795)
inline AlibreX::IObjectCollectorPtr AlibreX::IADExplodedViewStep::SegmentTransformations ( struct IADOccurrence * Occurrence ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = raw_SegmentTransformations(Occurrence, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(796)
inline long AlibreX::IADExplodedViewStep::SegmentCount ( struct IADOccurrence * Occurrence ) {
    long _result = 0;
    HRESULT _hr = raw_SegmentCount(Occurrence, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(797)
inline _bstr_t AlibreX::IADExplodedViewStep::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(798)
inline AlibreX::IADTransformationPtr AlibreX::IADExplodedViewStep::InitialTransform ( struct IADOccurrence * pOccurrence ) {
    struct IADTransformation * _result = 0;
    HRESULT _hr = raw_InitialTransform(pOccurrence, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTransformationPtr(_result, false);
}

#pragma implementation_key(799)
inline _bstr_t AlibreX::IADExplodedViewStep::SegmentMemberName ( struct IADOccurrence * Occurrence ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SegmentMemberName(Occurrence, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IADExplodedViewSteps wrapper method implementations
//

#pragma implementation_key(800)
inline IEnumVARIANTPtr AlibreX::IADExplodedViewSteps::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(801)
inline AlibreX::IADExplodedViewStepPtr AlibreX::IADExplodedViewSteps::GetItem ( const _variant_t & index ) {
    struct IADExplodedViewStep * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADExplodedViewStepPtr(_result, false);
}

#pragma implementation_key(802)
inline long AlibreX::IADExplodedViewSteps::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(803)
inline AlibreX::DIEnumPtr AlibreX::IADExplodedViewSteps::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

//
// interface IADExternalThreadFeature wrapper method implementations
//

#pragma implementation_key(804)
inline double AlibreX::IADExternalThreadFeature::GetMajorDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(805)
inline AlibreX::IADParameterPtr AlibreX::IADExternalThreadFeature::GetMinorDiameter ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_MinorDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(806)
inline AlibreX::IADParameterPtr AlibreX::IADExternalThreadFeature::GetThreadLength ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_ThreadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(807)
inline VARIANT_BOOL AlibreX::IADExternalThreadFeature::GetHasEdgeChamfer ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasEdgeChamfer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(808)
inline _bstr_t AlibreX::IADExternalThreadFeature::GetCallout ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(809)
inline _bstr_t AlibreX::IADExternalThreadFeature::GetCalloutRTF ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CalloutRTF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IADExtrusionFeature wrapper method implementations
//

#pragma implementation_key(810)
inline VARIANT_BOOL AlibreX::IADExtrusionFeature::GetIsCutout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCutout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(811)
inline AlibreX::IADSketchPtr AlibreX::IADExtrusionFeature::GetSketch ( ) {
    struct IADSketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPtr(_result, false);
}

#pragma implementation_key(812)
inline AlibreX::IADParameterPtr AlibreX::IADExtrusionFeature::GetDepthParameter ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_DepthParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(813)
inline AlibreX::IADParameterPtr AlibreX::IADExtrusionFeature::GetDraftParameter ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_DraftParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(814)
inline VARIANT_BOOL AlibreX::IADExtrusionFeature::GetIsOutwardDraft ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOutwardDraft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(815)
inline void AlibreX::IADExtrusionFeature::PutIsOutwardDraft ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_IsOutwardDraft(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(816)
inline AlibreX::IADTargetProxyPtr AlibreX::IADExtrusionFeature::GetEndCondition ( ) {
    struct IADTargetProxy * _result = 0;
    HRESULT _hr = get_EndCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTargetProxyPtr(_result, false);
}

#pragma implementation_key(817)
inline enum AlibreX::ADPartFeatureEndCondition AlibreX::IADExtrusionFeature::GetEndConditionType ( ) {
    enum ADPartFeatureEndCondition _result;
    HRESULT _hr = get_EndConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(818)
inline AlibreX::IADTargetProxyPtr AlibreX::IADExtrusionFeature::GetDirection ( ) {
    struct IADTargetProxy * _result = 0;
    HRESULT _hr = get_Direction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTargetProxyPtr(_result, false);
}

#pragma implementation_key(819)
inline AlibreX::IADVectorPtr AlibreX::IADExtrusionFeature::GetDirectionVector ( ) {
    struct IADVector * _result = 0;
    HRESULT _hr = get_DirectionVector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(820)
inline VARIANT_BOOL AlibreX::IADExtrusionFeature::GetIsDirectionReversed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsDirectionReversed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(821)
inline enum AlibreX::ADDirectionType AlibreX::IADExtrusionFeature::GetDirectionType ( ) {
    enum ADDirectionType _result;
    HRESULT _hr = get_DirectionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(822)
inline double AlibreX::IADExtrusionFeature::GetToGeometryOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_ToGeometryOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADFace wrapper method implementations
//

#pragma implementation_key(823)
inline enum AlibreX::ADObjectType AlibreX::IADFace::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(824)
inline enum AlibreX::ADTopologyType AlibreX::IADFace::GetTopologyType ( ) {
    enum ADTopologyType _result;
    HRESULT _hr = get_TopologyType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(825)
inline AlibreX::IADPartSessionPtr AlibreX::IADFace::GetPart ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Part(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

#pragma implementation_key(826)
inline AlibreX::IADBodyPtr AlibreX::IADFace::GetBody ( ) {
    struct IADBody * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBodyPtr(_result, false);
}

#pragma implementation_key(827)
inline AlibreX::IADShellPtr AlibreX::IADFace::GetShell ( ) {
    struct IADShell * _result = 0;
    HRESULT _hr = get_Shell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADShellPtr(_result, false);
}

#pragma implementation_key(828)
inline AlibreX::IADLoopsPtr AlibreX::IADFace::GetLoops ( ) {
    struct IADLoops * _result = 0;
    HRESULT _hr = get_Loops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADLoopsPtr(_result, false);
}

#pragma implementation_key(829)
inline AlibreX::IADEdgesPtr AlibreX::IADFace::GetEdges ( ) {
    struct IADEdges * _result = 0;
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADEdgesPtr(_result, false);
}

#pragma implementation_key(830)
inline AlibreX::IADVerticesPtr AlibreX::IADFace::GetVertices ( ) {
    struct IADVertices * _result = 0;
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVerticesPtr(_result, false);
}

#pragma implementation_key(831)
inline SAFEARRAY * AlibreX::IADFace::GetKey ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(832)
inline AlibreX::IADSurfacePtr AlibreX::IADFace::GetGeometry ( ) {
    struct IADSurface * _result = 0;
    HRESULT _hr = get_Geometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSurfacePtr(_result, false);
}

#pragma implementation_key(833)
inline HRESULT AlibreX::IADFace::GetExtents ( struct IADPoint * * ppLower, struct IADPoint * * ppUpper ) {
    HRESULT _hr = raw_GetExtents(ppLower, ppUpper);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(834)
inline VARIANT_BOOL AlibreX::IADFace::GetIsSenseReversed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSenseReversed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(835)
inline enum AlibreX::ADEntityPointRelation AlibreX::IADFace::PointOnFace ( struct IADPoint * pPoint ) {
    enum ADEntityPointRelation _result;
    HRESULT _hr = raw_PointOnFace(pPoint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(836)
inline SAFEARRAY * AlibreX::IADFace::FacetData ( double surfaceTol ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_FacetData(surfaceTol, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(837)
inline long AlibreX::IADFace::GetTimeStamp ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeStamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(838)
inline SAFEARRAY * AlibreX::IADFace::FacetDataEx ( double surfaceTol, double normalTol, double maxEdgeLength ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_FacetDataEx(surfaceTol, normalTol, maxEdgeLength, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(839)
inline HRESULT AlibreX::IADFace::GetBSplineCurvesData ( SAFEARRAY * * surfaceOrderUVArray, SAFEARRAY * * surfaceInfoArray, SAFEARRAY * * surfaceNumControlPointsUV, SAFEARRAY * * surfaceNoOfKnotsUV, SAFEARRAY * * surfaceControlPoints, SAFEARRAY * * surfaceWeights, SAFEARRAY * * surfaceKnotVectorU, SAFEARRAY * * surfaceKnotVectorV, SAFEARRAY * * regionInfoForLoopsArray, SAFEARRAY * * noOfTrimmedCurvesForLoopsArray, SAFEARRAY * * noOfControlPointsArray, SAFEARRAY * * noOfKnotsArray, SAFEARRAY * * surfaceIndicesArray, SAFEARRAY * * controlPointsArray, SAFEARRAY * * knotsArray, SAFEARRAY * * weightsArray ) {
    HRESULT _hr = raw_GetBSplineCurvesData(surfaceOrderUVArray, surfaceInfoArray, surfaceNumControlPointsUV, surfaceNoOfKnotsUV, surfaceControlPoints, surfaceWeights, surfaceKnotVectorU, surfaceKnotVectorV, regionInfoForLoopsArray, noOfTrimmedCurvesForLoopsArray, noOfControlPointsArray, noOfKnotsArray, surfaceIndicesArray, controlPointsArray, knotsArray, weightsArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(840)
inline HRESULT AlibreX::IADFace::GetMeshData ( double surfaceTol, double normalTol, double maxEdgeLength, SAFEARRAY * * faceArray, SAFEARRAY * * normalArray, SAFEARRAY * * vertexArray ) {
    HRESULT _hr = raw_GetMeshData(surfaceTol, normalTol, maxEdgeLength, faceArray, normalArray, vertexArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(841)
inline long AlibreX::IADFace::GetColor ( ) {
    long _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(842)
inline long AlibreX::IADFace::GetColorForConfiguration ( struct IADConfiguration * pConfiguration ) {
    long _result = 0;
    HRESULT _hr = raw_GetColorForConfiguration(pConfiguration, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(843)
inline _bstr_t AlibreX::IADFace::GetAppearanceID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AppearanceID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(844)
inline HRESULT AlibreX::IADFace::GetAlibreMeshData ( SAFEARRAY * * faceArray, SAFEARRAY * * normalArray, SAFEARRAY * * vertexArray ) {
    HRESULT _hr = raw_GetAlibreMeshData(faceArray, normalArray, vertexArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IADFaces wrapper method implementations
//

#pragma implementation_key(845)
inline IEnumVARIANTPtr AlibreX::IADFaces::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(846)
inline AlibreX::IADFacePtr AlibreX::IADFaces::GetItem ( long index ) {
    struct IADFace * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFacePtr(_result, false);
}

#pragma implementation_key(847)
inline long AlibreX::IADFaces::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(848)
inline AlibreX::DIEnumPtr AlibreX::IADFaces::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(849)
inline AlibreX::IADPartSessionPtr AlibreX::IADFaces::GetSession ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

//
// interface IADFastenerConstraint wrapper method implementations
//

#pragma implementation_key(850)
inline AlibreX::IADParameterPtr AlibreX::IADFastenerConstraint::GetOffset ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(851)
inline AlibreX::IADParameterPtr AlibreX::IADFastenerConstraint::GetMaximumOffset ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_MaximumOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(852)
inline AlibreX::IADParameterPtr AlibreX::IADFastenerConstraint::GetMinimumOffset ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_MinimumOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

//
// interface IADFilletFeature wrapper method implementations
//

#pragma implementation_key(853)
inline AlibreX::IObjectCollectorPtr AlibreX::IADFilletFeature::GetEdgesOrFaces ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_EdgesOrFaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(854)
inline VARIANT_BOOL AlibreX::IADFilletFeature::GetIsConstantRadius ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConstantRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(855)
inline AlibreX::IADParameterPtr AlibreX::IADFilletFeature::GetConstantRadius ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_ConstantRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(856)
inline AlibreX::IObjectCollectorPtr AlibreX::IADFilletFeature::GetStartRadiusParams ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_StartRadiusParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(857)
inline AlibreX::IObjectCollectorPtr AlibreX::IADFilletFeature::GetEndRadiusParams ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_EndRadiusParams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(858)
inline VARIANT_BOOL AlibreX::IADFilletFeature::GetTangentPropagate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TangentPropagate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADFolder wrapper method implementations
//

#pragma implementation_key(859)
inline enum AlibreX::ADObjectType AlibreX::IADFolder::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(860)
inline _bstr_t AlibreX::IADFolder::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(861)
inline _bstr_t AlibreX::IADFolder::GetReference ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(862)
inline AlibreX::IADFoldersPtr AlibreX::IADFolder::GetSubFolders ( ) {
    struct IADFolders * _result = 0;
    HRESULT _hr = get_SubFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFoldersPtr(_result, false);
}

#pragma implementation_key(863)
inline AlibreX::IADFolderItemsPtr AlibreX::IADFolder::GetFolderItems ( ) {
    struct IADFolderItems * _result = 0;
    HRESULT _hr = get_FolderItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFolderItemsPtr(_result, false);
}

#pragma implementation_key(864)
inline AlibreX::IADFolderPtr AlibreX::IADFolder::GetParentFolder ( ) {
    struct IADFolder * _result = 0;
    HRESULT _hr = get_ParentFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFolderPtr(_result, false);
}

#pragma implementation_key(865)
inline AlibreX::IADRepositoryPtr AlibreX::IADFolder::GetRepository ( ) {
    struct IADRepository * _result = 0;
    HRESULT _hr = get_Repository(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRepositoryPtr(_result, false);
}

#pragma implementation_key(866)
inline AlibreX::IADRootPtr AlibreX::IADFolder::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(867)
inline VARIANT_BOOL AlibreX::IADFolder::IsRecycleBin ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsRecycleBin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(868)
inline HRESULT AlibreX::IADFolder::Deposit ( _bstr_t fileName, VARIANT_BOOL checkInFlag ) {
    HRESULT _hr = raw_Deposit(fileName, checkInFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(869)
inline AlibreX::IADFolderPtr AlibreX::IADFolder::Copy ( struct IADFolder * pDestination, _bstr_t newName ) {
    struct IADFolder * _result = 0;
    HRESULT _hr = raw_Copy(pDestination, newName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFolderPtr(_result, false);
}

#pragma implementation_key(870)
inline AlibreX::IADFolderPtr AlibreX::IADFolder::Move ( struct IADFolder * pDestination, _bstr_t newName ) {
    struct IADFolder * _result = 0;
    HRESULT _hr = raw_Move(pDestination, newName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFolderPtr(_result, false);
}

#pragma implementation_key(871)
inline HRESULT AlibreX::IADFolder::Rename ( _bstr_t folderName ) {
    HRESULT _hr = raw_Rename(folderName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(872)
inline HRESULT AlibreX::IADFolder::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(873)
inline AlibreX::IADFolderPtr AlibreX::IADFolder::CreateSubFolder ( _bstr_t folderName ) {
    struct IADFolder * _result = 0;
    HRESULT _hr = raw_CreateSubFolder(folderName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFolderPtr(_result, false);
}

#pragma implementation_key(874)
inline HRESULT AlibreX::IADFolder::setPermission ( enum ADSecureObjectType secureObjectType, struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles, struct IPermissionSelector * pPermissions, VARIANT_BOOL applyToAllSubFolders, VARIANT_BOOL applyToAllItems, VARIANT_BOOL publishingRepository ) {
    HRESULT _hr = raw_setPermission(secureObjectType, pUsers, pTeams, pRoles, pPermissions, applyToAllSubFolders, applyToAllItems, publishingRepository);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(875)
inline HRESULT AlibreX::IADFolder::setNotification ( enum ADSecureObjectType secureObjectType, struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles, struct INotificationSelector * pNotification, VARIANT_BOOL applyToAllSubFolders, VARIANT_BOOL applyToAllItems ) {
    HRESULT _hr = raw_setNotification(secureObjectType, pUsers, pTeams, pRoles, pNotification, applyToAllSubFolders, applyToAllItems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(876)
inline HRESULT AlibreX::IADFolder::ClearPermission ( enum ADSecureObjectType secureObjectType, struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles, VARIANT_BOOL applyToAllSubFolders, VARIANT_BOOL applyToAllItems, VARIANT_BOOL unPublishingRepository ) {
    HRESULT _hr = raw_ClearPermission(secureObjectType, pUsers, pTeams, pRoles, applyToAllSubFolders, applyToAllItems, unPublishingRepository);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(877)
inline HRESULT AlibreX::IADFolder::ClearPermissionToAll ( enum ADSecureObjectType secureObjectType, VARIANT_BOOL applyToAllSubFolders, VARIANT_BOOL applyToAllItems, VARIANT_BOOL unPublishingRepository ) {
    HRESULT _hr = raw_ClearPermissionToAll(secureObjectType, applyToAllSubFolders, applyToAllItems, unPublishingRepository);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(878)
inline HRESULT AlibreX::IADFolder::ClearNotification ( enum ADSecureObjectType secureObjectType, struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles, VARIANT_BOOL applyToAllSubFolders, VARIANT_BOOL applyToAllItems ) {
    HRESULT _hr = raw_ClearNotification(secureObjectType, pUsers, pTeams, pRoles, applyToAllSubFolders, applyToAllItems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(879)
inline HRESULT AlibreX::IADFolder::ClearNotificationToAll ( enum ADSecureObjectType secureObjectType, VARIANT_BOOL applyToAllSubFolders, VARIANT_BOOL applyToAllItems ) {
    HRESULT _hr = raw_ClearNotificationToAll(secureObjectType, applyToAllSubFolders, applyToAllItems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(880)
inline VARIANT_BOOL AlibreX::IADFolder::IsAccessibleToTeam ( struct IADTeam * pTeam, struct IPermissionSelector * * ppPermissions, struct INotificationSelector * * ppNotifications ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessibleToTeam(pTeam, ppPermissions, ppNotifications, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(881)
inline VARIANT_BOOL AlibreX::IADFolder::IsAccessibleToUser ( struct IADUser * pUser, struct IPermissionSelector * * ppPermissions, struct INotificationSelector * * ppNotifications ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessibleToUser(pUser, ppPermissions, ppNotifications, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(882)
inline VARIANT_BOOL AlibreX::IADFolder::IsAccessibleToRole ( struct IADTeamRole * pRole, struct IPermissionSelector * * ppPermissions, struct INotificationSelector * * ppNotifications ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessibleToRole(pRole, ppPermissions, ppNotifications, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADFolders wrapper method implementations
//

#pragma implementation_key(883)
inline IEnumVARIANTPtr AlibreX::IADFolders::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(884)
inline AlibreX::IADFolderPtr AlibreX::IADFolders::GetItem ( const _variant_t & index ) {
    struct IADFolder * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFolderPtr(_result, false);
}

#pragma implementation_key(885)
inline long AlibreX::IADFolders::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(886)
inline AlibreX::DIEnumPtr AlibreX::IADFolders::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

//
// interface IADFolderItem wrapper method implementations
//

#pragma implementation_key(887)
inline enum AlibreX::ADObjectType AlibreX::IADFolderItem::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(888)
inline _bstr_t AlibreX::IADFolderItem::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(889)
inline enum AlibreX::ADObjectSubType AlibreX::IADFolderItem::GetItemType ( ) {
    enum ADObjectSubType _result;
    HRESULT _hr = get_ItemType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(890)
inline _bstr_t AlibreX::IADFolderItem::GetReference ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Reference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(891)
inline AlibreX::IADFolderPtr AlibreX::IADFolderItem::GetParentFolder ( ) {
    struct IADFolder * _result = 0;
    HRESULT _hr = get_ParentFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFolderPtr(_result, false);
}

#pragma implementation_key(892)
inline AlibreX::IADRepositoryPtr AlibreX::IADFolderItem::GetRepository ( ) {
    struct IADRepository * _result = 0;
    HRESULT _hr = get_Repository(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRepositoryPtr(_result, false);
}

#pragma implementation_key(893)
inline AlibreX::IADRootPtr AlibreX::IADFolderItem::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(894)
inline long AlibreX::IADFolderItem::GetCurrentVersionID ( ) {
    long _result = 0;
    HRESULT _hr = get_CurrentVersionID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(895)
inline HRESULT AlibreX::IADFolderItem::Withdraw ( _bstr_t destPath, VARIANT_BOOL checkOutFlag ) {
    HRESULT _hr = raw_Withdraw(destPath, checkOutFlag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(896)
inline HRESULT AlibreX::IADFolderItem::CheckOut ( ) {
    HRESULT _hr = raw_CheckOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(897)
inline HRESULT AlibreX::IADFolderItem::CheckIn ( _bstr_t comment ) {
    HRESULT _hr = raw_CheckIn(comment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(898)
inline VARIANT_BOOL AlibreX::IADFolderItem::IsCheckedIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsCheckedIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(899)
inline HRESULT AlibreX::IADFolderItem::UndoCheckOut ( ) {
    HRESULT _hr = raw_UndoCheckOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(900)
inline AlibreX::IADFolderItemPtr AlibreX::IADFolderItem::Copy ( struct IADFolder * pDestination, _bstr_t newName ) {
    struct IADFolderItem * _result = 0;
    HRESULT _hr = raw_Copy(pDestination, newName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFolderItemPtr(_result, false);
}

#pragma implementation_key(901)
inline AlibreX::IADFolderItemPtr AlibreX::IADFolderItem::Move ( struct IADFolder * pDestination, _bstr_t newName ) {
    struct IADFolderItem * _result = 0;
    HRESULT _hr = raw_Move(pDestination, newName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFolderItemPtr(_result, false);
}

#pragma implementation_key(902)
inline HRESULT AlibreX::IADFolderItem::Rename ( _bstr_t newName ) {
    HRESULT _hr = raw_Rename(newName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(903)
inline HRESULT AlibreX::IADFolderItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(904)
inline AlibreX::IADFolderItemsPtr AlibreX::IADFolderItem::EnumConstituents ( ) {
    struct IADFolderItems * _result = 0;
    HRESULT _hr = raw_EnumConstituents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFolderItemsPtr(_result, false);
}

#pragma implementation_key(905)
inline HRESULT AlibreX::IADFolderItem::Label ( _bstr_t Label ) {
    HRESULT _hr = raw_Label(Label);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(906)
inline HRESULT AlibreX::IADFolderItem::Share ( struct IADFolder * pDestination, _bstr_t newName ) {
    HRESULT _hr = raw_Share(pDestination, newName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(907)
inline HRESULT AlibreX::IADFolderItem::AddNote ( _bstr_t subject, _bstr_t noteDescription ) {
    HRESULT _hr = raw_AddNote(subject, noteDescription);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(908)
inline AlibreX::IADSessionPtr AlibreX::IADFolderItem::Open ( ) {
    struct IADSession * _result = 0;
    HRESULT _hr = raw_Open(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(909)
inline HRESULT AlibreX::IADFolderItem::setPermission ( struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles, struct IPermissionSelector * pPermission, VARIANT_BOOL publishingRepository ) {
    HRESULT _hr = raw_setPermission(pUsers, pTeams, pRoles, pPermission, publishingRepository);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(910)
inline HRESULT AlibreX::IADFolderItem::setNotification ( struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles, struct INotificationSelector * pNotification ) {
    HRESULT _hr = raw_setNotification(pUsers, pTeams, pRoles, pNotification);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(911)
inline HRESULT AlibreX::IADFolderItem::ClearPermission ( struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles, VARIANT_BOOL unPublishingRepository ) {
    HRESULT _hr = raw_ClearPermission(pUsers, pTeams, pRoles, unPublishingRepository);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(912)
inline HRESULT AlibreX::IADFolderItem::ClearPermissionToAll ( VARIANT_BOOL unPublishingRepository ) {
    HRESULT _hr = raw_ClearPermissionToAll(unPublishingRepository);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(913)
inline HRESULT AlibreX::IADFolderItem::ClearNotification ( struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles ) {
    HRESULT _hr = raw_ClearNotification(pUsers, pTeams, pRoles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(914)
inline HRESULT AlibreX::IADFolderItem::ClearNotificationToAll ( ) {
    HRESULT _hr = raw_ClearNotificationToAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(915)
inline VARIANT_BOOL AlibreX::IADFolderItem::IsAccessibleToTeam ( struct IADTeam * pTeam, struct IPermissionSelector * * ppPermissions, struct INotificationSelector * * ppNotifications ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessibleToTeam(pTeam, ppPermissions, ppNotifications, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(916)
inline VARIANT_BOOL AlibreX::IADFolderItem::IsAccessibleToUser ( struct IADUser * pUser, struct IPermissionSelector * * ppPermissions, struct INotificationSelector * * ppNotifications ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessibleToUser(pUser, ppPermissions, ppNotifications, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(917)
inline VARIANT_BOOL AlibreX::IADFolderItem::IsAccessibleToRole ( struct IADTeamRole * pRole, struct IPermissionSelector * * ppPermissions, struct INotificationSelector * * ppNotifications ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsAccessibleToRole(pRole, ppPermissions, ppNotifications, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADFolderItems wrapper method implementations
//

#pragma implementation_key(918)
inline IEnumVARIANTPtr AlibreX::IADFolderItems::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(919)
inline AlibreX::IADFolderItemPtr AlibreX::IADFolderItems::GetItem ( const _variant_t & index ) {
    struct IADFolderItem * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFolderItemPtr(_result, false);
}

#pragma implementation_key(920)
inline long AlibreX::IADFolderItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(921)
inline AlibreX::DIEnumPtr AlibreX::IADFolderItems::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

//
// interface IADGearConstraint wrapper method implementations
//

#pragma implementation_key(922)
inline AlibreX::IADParameterPtr AlibreX::IADGearConstraint::GetRatio1 ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Ratio1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(923)
inline AlibreX::IADParameterPtr AlibreX::IADGearConstraint::GetRatio2 ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Ratio2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

//
// interface IADHelicalFeature wrapper method implementations
//

#pragma implementation_key(924)
inline VARIANT_BOOL AlibreX::IADHelicalFeature::GetIsCutout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCutout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(925)
inline AlibreX::IADSketchPtr AlibreX::IADHelicalFeature::GetSketch ( ) {
    struct IADSketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPtr(_result, false);
}

#pragma implementation_key(926)
inline AlibreX::IADSketchLinePtr AlibreX::IADHelicalFeature::GetAxis ( ) {
    struct IADSketchLine * _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchLinePtr(_result, false);
}

#pragma implementation_key(927)
inline VARIANT_BOOL AlibreX::IADHelicalFeature::GetIsClockwise ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsClockwise(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(928)
inline VARIANT_BOOL AlibreX::IADHelicalFeature::GetIsReverse ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(929)
inline VARIANT_BOOL AlibreX::IADHelicalFeature::GetIsParallelOriented ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsParallelOriented(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(930)
inline AlibreX::IADParameterPtr AlibreX::IADHelicalFeature::GetHeight ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(931)
inline AlibreX::IADParameterPtr AlibreX::IADHelicalFeature::GetPitch ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Pitch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(932)
inline AlibreX::IADParameterPtr AlibreX::IADHelicalFeature::GetRevolutions ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Revolutions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(933)
inline AlibreX::IADParameterPtr AlibreX::IADHelicalFeature::GetPitchRatio ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_PitchRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(934)
inline AlibreX::IADParameterPtr AlibreX::IADHelicalFeature::GetPitchEnd ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_PitchEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(935)
inline AlibreX::IADParameterPtr AlibreX::IADHelicalFeature::GetTaper ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Taper(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(936)
inline AlibreX::IADParameterPtr AlibreX::IADHelicalFeature::GetStartTransitionAngle ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_StartTransitionAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(937)
inline AlibreX::IADParameterPtr AlibreX::IADHelicalFeature::GetEndTransitionAngle ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_EndTransitionAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(938)
inline AlibreX::IADParameterPtr AlibreX::IADHelicalFeature::GetStartFlatAngle ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_StartFlatAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(939)
inline AlibreX::IADParameterPtr AlibreX::IADHelicalFeature::GetEndFlatAngle ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_EndFlatAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(940)
inline enum AlibreX::ADHelixType AlibreX::IADHelicalFeature::GetHelixType ( ) {
    enum ADHelixType _result;
    HRESULT _hr = get_HelixType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(941)
inline enum AlibreX::ADPitchType AlibreX::IADHelicalFeature::GetPitchType ( ) {
    enum ADPitchType _result;
    HRESULT _hr = get_PitchType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(942)
inline enum AlibreX::ADHelixConditionType AlibreX::IADHelicalFeature::GetStartConditionType ( ) {
    enum ADHelixConditionType _result;
    HRESULT _hr = get_StartConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(943)
inline enum AlibreX::ADHelixConditionType AlibreX::IADHelicalFeature::GetEndConditionType ( ) {
    enum ADHelixConditionType _result;
    HRESULT _hr = get_EndConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADHoleFeature wrapper method implementations
//

#pragma implementation_key(944)
inline enum AlibreX::ADHoleType AlibreX::IADHoleFeature::GetHoleType ( ) {
    enum ADHoleType _result;
    HRESULT _hr = get_HoleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(945)
inline enum AlibreX::ADHoleDepthCondition AlibreX::IADHoleFeature::GetDepthConditionType ( ) {
    enum ADHoleDepthCondition _result;
    HRESULT _hr = get_DepthConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(946)
inline IDispatchPtr AlibreX::IADHoleFeature::GetStartPlane ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_StartPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(947)
inline long AlibreX::IADHoleFeature::GetNumberOfHoles ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfHoles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(948)
inline SAFEARRAY * AlibreX::IADHoleFeature::GetStartPoints ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_StartPoints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(949)
inline double AlibreX::IADHoleFeature::GetDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_Diameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(950)
inline double AlibreX::IADHoleFeature::GetDepth ( ) {
    double _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(951)
inline double AlibreX::IADHoleFeature::GetCounterBoreDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_CounterBoreDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(952)
inline double AlibreX::IADHoleFeature::GetCounterBoreDepth ( ) {
    double _result = 0;
    HRESULT _hr = get_CounterBoreDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(953)
inline double AlibreX::IADHoleFeature::GetDrillAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_DrillAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(954)
inline double AlibreX::IADHoleFeature::GetCounterDrillDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_CounterDrillDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(955)
inline double AlibreX::IADHoleFeature::GetCounterDrillDepth ( ) {
    double _result = 0;
    HRESULT _hr = get_CounterDrillDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(956)
inline double AlibreX::IADHoleFeature::GetCounterDrillAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_CounterDrillAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(957)
inline double AlibreX::IADHoleFeature::GetCounterSinkDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_CounterSinkDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(958)
inline double AlibreX::IADHoleFeature::GetCounterSinkAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_CounterSinkAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(959)
inline double AlibreX::IADHoleFeature::GetMajorDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(960)
inline double AlibreX::IADHoleFeature::GetMinorDiameter ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorDiameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(961)
inline AlibreX::IADFacePtr AlibreX::IADHoleFeature::GetLimitingGeometry ( ) {
    struct IADFace * _result = 0;
    HRESULT _hr = get_LimitingGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFacePtr(_result, false);
}

#pragma implementation_key(962)
inline double AlibreX::IADHoleFeature::GetOffsetFromLimitingGeometry ( ) {
    double _result = 0;
    HRESULT _hr = get_OffsetFromLimitingGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(963)
inline VARIANT_BOOL AlibreX::IADHoleFeature::GetHasThread ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasThread(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(964)
inline AlibreX::IADTappedThreadInfoPtr AlibreX::IADHoleFeature::GetTappedThread ( ) {
    struct IADTappedThreadInfo * _result = 0;
    HRESULT _hr = get_TappedThread(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTappedThreadInfoPtr(_result, false);
}

#pragma implementation_key(965)
inline AlibreX::IADSketchPtr AlibreX::IADHoleFeature::GetSketch ( ) {
    struct IADSketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPtr(_result, false);
}

//
// interface IADInterference wrapper method implementations
//

#pragma implementation_key(966)
inline AlibreX::IADOccurrencePtr AlibreX::IADInterference::GetPart1 ( ) {
    struct IADOccurrence * _result = 0;
    HRESULT _hr = get_Part1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencePtr(_result, false);
}

#pragma implementation_key(967)
inline AlibreX::IADOccurrencePtr AlibreX::IADInterference::GetPart2 ( ) {
    struct IADOccurrence * _result = 0;
    HRESULT _hr = get_Part2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencePtr(_result, false);
}

#pragma implementation_key(968)
inline double AlibreX::IADInterference::GetInterferenceVolume ( ) {
    double _result = 0;
    HRESULT _hr = get_InterferenceVolume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(969)
inline HRESULT AlibreX::IADInterference::GetExtents ( struct IADPoint * * ppLower, struct IADPoint * * ppUpper ) {
    HRESULT _hr = raw_GetExtents(ppLower, ppUpper);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IADInterferences wrapper method implementations
//

#pragma implementation_key(970)
inline IEnumVARIANTPtr AlibreX::IADInterferences::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(971)
inline long AlibreX::IADInterferences::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(972)
inline AlibreX::IADInterferencePtr AlibreX::IADInterferences::GetItem ( long index ) {
    struct IADInterference * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADInterferencePtr(_result, false);
}

#pragma implementation_key(973)
inline AlibreX::DIEnumPtr AlibreX::IADInterferences::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

//
// interface IADMaterialLibraries wrapper method implementations
//

#pragma implementation_key(974)
inline IEnumVARIANTPtr AlibreX::IADMaterialLibraries::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(975)
inline AlibreX::IADMaterialLibraryPtr AlibreX::IADMaterialLibraries::GetItem ( const _variant_t & index ) {
    struct IADMaterialLibrary * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADMaterialLibraryPtr(_result, false);
}

#pragma implementation_key(976)
inline long AlibreX::IADMaterialLibraries::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(977)
inline AlibreX::DIEnumPtr AlibreX::IADMaterialLibraries::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

//
// interface IADMaterialLibrary wrapper method implementations
//

#pragma implementation_key(978)
inline enum AlibreX::ADObjectType AlibreX::IADMaterialLibrary::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(979)
inline AlibreX::IADRootPtr AlibreX::IADMaterialLibrary::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(980)
inline _bstr_t AlibreX::IADMaterialLibrary::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(981)
inline AlibreX::IADMaterialLibraryFoldersPtr AlibreX::IADMaterialLibrary::GetFolders ( ) {
    struct IADMaterialLibraryFolders * _result = 0;
    HRESULT _hr = get_Folders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADMaterialLibraryFoldersPtr(_result, false);
}

#pragma implementation_key(982)
inline AlibreX::IADMaterialLibraryFolderPtr AlibreX::IADMaterialLibrary::createFolder ( _bstr_t folderName ) {
    struct IADMaterialLibraryFolder * _result = 0;
    HRESULT _hr = raw_createFolder(folderName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADMaterialLibraryFolderPtr(_result, false);
}

#pragma implementation_key(983)
inline AlibreX::IADMaterialPtr AlibreX::IADMaterialLibrary::createMaterial ( _bstr_t materialName ) {
    struct IADMaterial * _result = 0;
    HRESULT _hr = raw_createMaterial(materialName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADMaterialPtr(_result, false);
}

#pragma implementation_key(984)
inline AlibreX::IADMaterialsPtr AlibreX::IADMaterialLibrary::GetMaterials ( ) {
    struct IADMaterials * _result = 0;
    HRESULT _hr = get_Materials(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADMaterialsPtr(_result, false);
}

//
// interface IADMaterialLibraryFolder wrapper method implementations
//

#pragma implementation_key(985)
inline enum AlibreX::ADObjectType AlibreX::IADMaterialLibraryFolder::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(986)
inline AlibreX::IADRootPtr AlibreX::IADMaterialLibraryFolder::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(987)
inline _bstr_t AlibreX::IADMaterialLibraryFolder::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(988)
inline AlibreX::IADMaterialsPtr AlibreX::IADMaterialLibraryFolder::GetMaterials ( ) {
    struct IADMaterials * _result = 0;
    HRESULT _hr = get_Materials(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADMaterialsPtr(_result, false);
}

#pragma implementation_key(989)
inline AlibreX::IADMaterialLibraryFolderPtr AlibreX::IADMaterialLibraryFolder::CreateSubFolder ( _bstr_t folderName ) {
    struct IADMaterialLibraryFolder * _result = 0;
    HRESULT _hr = raw_CreateSubFolder(folderName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADMaterialLibraryFolderPtr(_result, false);
}

#pragma implementation_key(990)
inline AlibreX::IADMaterialPtr AlibreX::IADMaterialLibraryFolder::createMaterial ( _bstr_t materialName ) {
    struct IADMaterial * _result = 0;
    HRESULT _hr = raw_createMaterial(materialName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADMaterialPtr(_result, false);
}

#pragma implementation_key(991)
inline AlibreX::IADMaterialLibraryFoldersPtr AlibreX::IADMaterialLibraryFolder::GetSubFolders ( ) {
    struct IADMaterialLibraryFolders * _result = 0;
    HRESULT _hr = get_SubFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADMaterialLibraryFoldersPtr(_result, false);
}

//
// interface IADMaterialLibraryFolders wrapper method implementations
//

#pragma implementation_key(992)
inline IEnumVARIANTPtr AlibreX::IADMaterialLibraryFolders::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(993)
inline AlibreX::IADMaterialLibraryFolderPtr AlibreX::IADMaterialLibraryFolders::GetItem ( const _variant_t & index ) {
    struct IADMaterialLibraryFolder * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADMaterialLibraryFolderPtr(_result, false);
}

#pragma implementation_key(994)
inline long AlibreX::IADMaterialLibraryFolders::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(995)
inline AlibreX::DIEnumPtr AlibreX::IADMaterialLibraryFolders::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

//
// interface IADLoop wrapper method implementations
//

#pragma implementation_key(996)
inline enum AlibreX::ADObjectType AlibreX::IADLoop::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(997)
inline enum AlibreX::ADTopologyType AlibreX::IADLoop::GetTopologyType ( ) {
    enum ADTopologyType _result;
    HRESULT _hr = get_TopologyType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(998)
inline AlibreX::IADPartSessionPtr AlibreX::IADLoop::GetPart ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Part(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

#pragma implementation_key(999)
inline AlibreX::IADBodyPtr AlibreX::IADLoop::GetBody ( ) {
    struct IADBody * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBodyPtr(_result, false);
}

#pragma implementation_key(1000)
inline AlibreX::IADFacePtr AlibreX::IADLoop::Getface ( ) {
    struct IADFace * _result = 0;
    HRESULT _hr = get_face(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFacePtr(_result, false);
}

#pragma implementation_key(1001)
inline AlibreX::IADEdgesPtr AlibreX::IADLoop::GetEdges ( ) {
    struct IADEdges * _result = 0;
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADEdgesPtr(_result, false);
}

#pragma implementation_key(1002)
inline AlibreX::IADCoedgesPtr AlibreX::IADLoop::GetCoedges ( ) {
    struct IADCoedges * _result = 0;
    HRESULT _hr = get_Coedges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADCoedgesPtr(_result, false);
}

#pragma implementation_key(1003)
inline VARIANT_BOOL AlibreX::IADLoop::GetIsOuter ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOuter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADLoops wrapper method implementations
//

#pragma implementation_key(1004)
inline IEnumVARIANTPtr AlibreX::IADLoops::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1005)
inline AlibreX::IADLoopPtr AlibreX::IADLoops::GetItem ( long index ) {
    struct IADLoop * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADLoopPtr(_result, false);
}

#pragma implementation_key(1006)
inline long AlibreX::IADLoops::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1007)
inline AlibreX::DIEnumPtr AlibreX::IADLoops::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(1008)
inline AlibreX::IADPartSessionPtr AlibreX::IADLoops::GetSession ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

//
// interface IADLump wrapper method implementations
//

#pragma implementation_key(1009)
inline enum AlibreX::ADObjectType AlibreX::IADLump::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1010)
inline enum AlibreX::ADTopologyType AlibreX::IADLump::GetTopologyType ( ) {
    enum ADTopologyType _result;
    HRESULT _hr = get_TopologyType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1011)
inline AlibreX::IADPartSessionPtr AlibreX::IADLump::GetPart ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Part(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

#pragma implementation_key(1012)
inline AlibreX::IADBodyPtr AlibreX::IADLump::GetBody ( ) {
    struct IADBody * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBodyPtr(_result, false);
}

#pragma implementation_key(1013)
inline AlibreX::IADShellsPtr AlibreX::IADLump::GetShells ( ) {
    struct IADShells * _result = 0;
    HRESULT _hr = get_Shells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADShellsPtr(_result, false);
}

#pragma implementation_key(1014)
inline AlibreX::IADFacesPtr AlibreX::IADLump::GetFaces ( ) {
    struct IADFaces * _result = 0;
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFacesPtr(_result, false);
}

#pragma implementation_key(1015)
inline AlibreX::IADEdgesPtr AlibreX::IADLump::GetEdges ( ) {
    struct IADEdges * _result = 0;
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADEdgesPtr(_result, false);
}

//
// interface IADLumps wrapper method implementations
//

#pragma implementation_key(1016)
inline IEnumVARIANTPtr AlibreX::IADLumps::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1017)
inline AlibreX::IADLumpPtr AlibreX::IADLumps::GetItem ( long index ) {
    struct IADLump * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADLumpPtr(_result, false);
}

#pragma implementation_key(1018)
inline long AlibreX::IADLumps::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1019)
inline AlibreX::DIEnumPtr AlibreX::IADLumps::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(1020)
inline AlibreX::IADPartSessionPtr AlibreX::IADLumps::GetSession ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

//
// interface IADMateConstraint wrapper method implementations
//

#pragma implementation_key(1021)
inline AlibreX::IADParameterPtr AlibreX::IADMateConstraint::GetOffset ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(1022)
inline AlibreX::IADParameterPtr AlibreX::IADMateConstraint::GetMaximumOffset ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_MaximumOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(1023)
inline AlibreX::IADParameterPtr AlibreX::IADMateConstraint::GetMinimumOffset ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_MinimumOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

//
// interface IADMaterial wrapper method implementations
//

#pragma implementation_key(1024)
inline enum AlibreX::ADObjectType AlibreX::IADMaterial::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1025)
inline AlibreX::IADRootPtr AlibreX::IADMaterial::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(1026)
inline _bstr_t AlibreX::IADMaterial::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1027)
inline double AlibreX::IADMaterial::GetDensity ( ) {
    double _result = 0;
    HRESULT _hr = get_Density(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1028)
inline double AlibreX::IADMaterial::getMaterialPropertyValue ( enum ADMaterialPropertyKey materialAPIPropertyKey ) {
    double _result = 0;
    HRESULT _hr = raw_getMaterialPropertyValue(materialAPIPropertyKey, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADMaterials wrapper method implementations
//

#pragma implementation_key(1029)
inline IEnumVARIANTPtr AlibreX::IADMaterials::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1030)
inline AlibreX::IADMaterialPtr AlibreX::IADMaterials::GetItem ( const _variant_t & index ) {
    struct IADMaterial * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADMaterialPtr(_result, false);
}

#pragma implementation_key(1031)
inline long AlibreX::IADMaterials::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1032)
inline AlibreX::DIEnumPtr AlibreX::IADMaterials::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

//
// interface IADOccurrence wrapper method implementations
//

#pragma implementation_key(1033)
inline enum AlibreX::ADObjectType AlibreX::IADOccurrence::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1034)
inline _bstr_t AlibreX::IADOccurrence::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1035)
inline long AlibreX::IADOccurrence::GetColor ( ) {
    long _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1036)
inline void AlibreX::IADOccurrence::PutColor ( long pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1037)
inline long AlibreX::IADOccurrence::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1038)
inline void AlibreX::IADOccurrence::PutTransparency ( long pRetVal ) {
    HRESULT _hr = put_Transparency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1039)
inline long AlibreX::IADOccurrence::GetReflectivity ( ) {
    long _result = 0;
    HRESULT _hr = get_Reflectivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1040)
inline void AlibreX::IADOccurrence::PutReflectivity ( long pRetVal ) {
    HRESULT _hr = put_Reflectivity(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1041)
inline AlibreX::IADAssemblyPathPtr AlibreX::IADOccurrence::GetPath ( ) {
    struct IADAssemblyPath * _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADAssemblyPathPtr(_result, false);
}

#pragma implementation_key(1042)
inline AlibreX::IADOccurrencesPtr AlibreX::IADOccurrence::GetOccurrences ( ) {
    struct IADOccurrences * _result = 0;
    HRESULT _hr = get_Occurrences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencesPtr(_result, false);
}

#pragma implementation_key(1043)
inline AlibreX::IADOccurrencePtr AlibreX::IADOccurrence::GetParentOccurrence ( ) {
    struct IADOccurrence * _result = 0;
    HRESULT _hr = get_ParentOccurrence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencePtr(_result, false);
}

#pragma implementation_key(1044)
inline long AlibreX::IADOccurrence::GetNestLevel ( ) {
    long _result = 0;
    HRESULT _hr = get_NestLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1045)
inline long AlibreX::IADOccurrence::GetTotalLeafNodes ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalLeafNodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1046)
inline AlibreX::IADTransformationPtr AlibreX::IADOccurrence::GetWorldTransform ( ) {
    struct IADTransformation * _result = 0;
    HRESULT _hr = get_WorldTransform(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTransformationPtr(_result, false);
}

#pragma implementation_key(1047)
inline AlibreX::IADTransformationPtr AlibreX::IADOccurrence::GetLocalTransform ( ) {
    struct IADTransformation * _result = 0;
    HRESULT _hr = get_LocalTransform(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTransformationPtr(_result, false);
}

#pragma implementation_key(1048)
inline HRESULT AlibreX::IADOccurrence::ApplyTransform ( struct IADTransformation * pTransform ) {
    HRESULT _hr = raw_ApplyTransform(pTransform);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1049)
inline AlibreX::IADOccurrencePtr AlibreX::IADOccurrence::GetRootOccurrence ( ) {
    struct IADOccurrence * _result = 0;
    HRESULT _hr = get_RootOccurrence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencePtr(_result, false);
}

#pragma implementation_key(1050)
inline AlibreX::IADDesignSessionPtr AlibreX::IADOccurrence::GetDesignSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_DesignSession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

#pragma implementation_key(1051)
inline VARIANT_BOOL AlibreX::IADOccurrence::GetIsAnchored ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsAnchored(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1052)
inline void AlibreX::IADOccurrence::PutIsAnchored ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_IsAnchored(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1053)
inline VARIANT_BOOL AlibreX::IADOccurrence::GetIsHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1054)
inline void AlibreX::IADOccurrence::PutIsHidden ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_IsHidden(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1055)
inline HRESULT AlibreX::IADOccurrence::GetExtents ( struct IADPoint * * ppLower, struct IADPoint * * ppUpper ) {
    HRESULT _hr = raw_GetExtents(ppLower, ppUpper);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1056)
inline SAFEARRAY * AlibreX::IADOccurrence::GetKey ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1057)
inline AlibreX::IADAssemblySessionPtr AlibreX::IADOccurrence::GetParentAssemblySession ( ) {
    struct IADAssemblySession * _result = 0;
    HRESULT _hr = get_ParentAssemblySession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADAssemblySessionPtr(_result, false);
}

#pragma implementation_key(1058)
inline AlibreX::IADAssemblySessionPtr AlibreX::IADOccurrence::GetRootAssemblySession ( ) {
    struct IADAssemblySession * _result = 0;
    HRESULT _hr = get_RootAssemblySession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADAssemblySessionPtr(_result, false);
}

#pragma implementation_key(1059)
inline VARIANT_BOOL AlibreX::IADOccurrence::GetIsFlexible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFlexible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1060)
inline void AlibreX::IADOccurrence::PutIsFlexible ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_IsFlexible(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1061)
inline VARIANT_BOOL AlibreX::IADOccurrence::GetIsSuppressed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSuppressed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1062)
inline void AlibreX::IADOccurrence::PutIsSuppressed ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_IsSuppressed(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1063)
inline AlibreX::IADConfigurationPtr AlibreX::IADOccurrence::GetConfiguration ( ) {
    struct IADConfiguration * _result = 0;
    HRESULT _hr = get_Configuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADConfigurationPtr(_result, false);
}

#pragma implementation_key(1064)
inline void AlibreX::IADOccurrence::PutRefConfiguration ( struct IADConfiguration * pRetVal ) {
    HRESULT _hr = putref_Configuration(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1065)
inline HRESULT AlibreX::IADOccurrence::GetMeshDefinitionForSectionView ( long * faceDataSize, long * vertexDataSize ) {
    HRESULT _hr = raw_GetMeshDefinitionForSectionView(faceDataSize, vertexDataSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1066)
inline HRESULT AlibreX::IADOccurrence::GetMeshDataForSectionView ( SAFEARRAY * * faceData, SAFEARRAY * * vertexData ) {
    HRESULT _hr = raw_GetMeshDataForSectionView(faceData, vertexData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1067)
inline HRESULT AlibreX::IADOccurrence::GetMeshDefinitionForSectionViewEx ( long minCircularFacets, long * faceDataSize, long * vertexDataSize, long * normalDataSize ) {
    HRESULT _hr = raw_GetMeshDefinitionForSectionViewEx(minCircularFacets, faceDataSize, vertexDataSize, normalDataSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1068)
inline HRESULT AlibreX::IADOccurrence::GetMeshDataForSectionViewEx ( SAFEARRAY * * faceData, SAFEARRAY * * vertexData, SAFEARRAY * * normalData ) {
    HRESULT _hr = raw_GetMeshDataForSectionViewEx(faceData, vertexData, normalData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1069)
inline AlibreX::IADBodyPtr AlibreX::IADOccurrence::GetSectionBody ( ) {
    struct IADBody * _result = 0;
    HRESULT _hr = get_SectionBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBodyPtr(_result, false);
}

#pragma implementation_key(1070)
inline VARIANT_BOOL AlibreX::IADOccurrence::GetShowFeatureColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowFeatureColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADOccurrences wrapper method implementations
//

#pragma implementation_key(1071)
inline IEnumVARIANTPtr AlibreX::IADOccurrences::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1072)
inline AlibreX::IADOccurrencePtr AlibreX::IADOccurrences::GetItem ( const _variant_t & index ) {
    struct IADOccurrence * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencePtr(_result, false);
}

#pragma implementation_key(1073)
inline long AlibreX::IADOccurrences::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1074)
inline AlibreX::DIEnumPtr AlibreX::IADOccurrences::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(1075)
inline AlibreX::IADOccurrencePtr AlibreX::IADOccurrences::AddEmptyPart ( _bstr_t Name, VARIANT_BOOL isSheetMetal, struct IADTransformation * pTransform ) {
    struct IADOccurrence * _result = 0;
    HRESULT _hr = raw_AddEmptyPart(Name, isSheetMetal, pTransform, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencePtr(_result, false);
}

#pragma implementation_key(1076)
inline AlibreX::IADOccurrencePtr AlibreX::IADOccurrences::AddEmptyAssembly ( _bstr_t Name, struct IADTransformation * pTransform ) {
    struct IADOccurrence * _result = 0;
    HRESULT _hr = raw_AddEmptyAssembly(Name, pTransform, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencePtr(_result, false);
}

#pragma implementation_key(1077)
inline AlibreX::IADOccurrencePtr AlibreX::IADOccurrences::Add ( VARIANT * designObject, struct IADTransformation * pTransform ) {
    struct IADOccurrence * _result = 0;
    HRESULT _hr = raw_Add(designObject, pTransform, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencePtr(_result, false);
}

//
// interface IADTargetProxy wrapper method implementations
//

#pragma implementation_key(1078)
inline AlibreX::IADOccurrencePtr AlibreX::IADTargetProxy::GetOccurrence ( ) {
    struct IADOccurrence * _result = 0;
    HRESULT _hr = get_Occurrence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOccurrencePtr(_result, false);
}

#pragma implementation_key(1079)
inline IDispatchPtr AlibreX::IADTargetProxy::GetTarget ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1080)
inline _bstr_t AlibreX::IADTargetProxy::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IADOffsetFaceFeature wrapper method implementations
//

#pragma implementation_key(1081)
inline AlibreX::IObjectCollectorPtr AlibreX::IADOffsetFaceFeature::GetOffsetFaces ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_OffsetFaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(1082)
inline AlibreX::IADParameterPtr AlibreX::IADOffsetFaceFeature::GetOffsetParameter ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_OffsetParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

//
// interface IADParameter wrapper method implementations
//

#pragma implementation_key(1083)
inline enum AlibreX::ADObjectType AlibreX::IADParameter::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1084)
inline enum AlibreX::ADParameterType AlibreX::IADParameter::GetParameterType ( ) {
    enum ADParameterType _result;
    HRESULT _hr = get_ParameterType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1085)
inline AlibreX::IADRootPtr AlibreX::IADParameter::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(1086)
inline _bstr_t AlibreX::IADParameter::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1087)
inline void AlibreX::IADParameter::PutName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Name(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1088)
inline double AlibreX::IADParameter::GetValue ( ) {
    double _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1089)
inline void AlibreX::IADParameter::PutValue ( double pRetVal ) {
    HRESULT _hr = put_Value(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1090)
inline _bstr_t AlibreX::IADParameter::GetEquation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Equation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1091)
inline void AlibreX::IADParameter::PutEquation ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Equation(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1092)
inline VARIANT_BOOL AlibreX::IADParameter::GetExternallyDriven ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ExternallyDriven(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1093)
inline void AlibreX::IADParameter::PutExternallyDriven ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_ExternallyDriven(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1094)
inline enum AlibreX::ADUnits AlibreX::IADParameter::GetUnits ( ) {
    enum ADUnits _result;
    HRESULT _hr = get_Units(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1095)
inline void AlibreX::IADParameter::PutUnits ( enum ADUnits pRetVal ) {
    HRESULT _hr = put_Units(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1096)
inline _bstr_t AlibreX::IADParameter::Getcomment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1097)
inline void AlibreX::IADParameter::Putcomment ( _bstr_t pRetVal ) {
    HRESULT _hr = put_comment(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1098)
inline _bstr_t AlibreX::IADParameter::GetSourceDocumentID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceDocumentID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1099)
inline void AlibreX::IADParameter::PutSourceDocumentID ( _bstr_t pRetVal ) {
    HRESULT _hr = put_SourceDocumentID(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1100)
inline _bstr_t AlibreX::IADParameter::GetSourceItemID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceItemID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1101)
inline void AlibreX::IADParameter::PutSourceItemID ( _bstr_t pRetVal ) {
    HRESULT _hr = put_SourceItemID(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1102)
inline HRESULT AlibreX::IADParameter::Remove ( ) {
    HRESULT _hr = raw_Remove();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1103)
inline VARIANT_BOOL AlibreX::IADParameter::GetIsMissingGlobal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsMissingGlobal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1104)
inline VARIANT_BOOL AlibreX::IADParameter::GetIsConflictingGlobal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflictingGlobal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADParameters wrapper method implementations
//

#pragma implementation_key(1105)
inline IEnumVARIANTPtr AlibreX::IADParameters::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1106)
inline AlibreX::IADParameterPtr AlibreX::IADParameters::GetItem ( const _variant_t & index ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(1107)
inline long AlibreX::IADParameters::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1108)
inline AlibreX::DIEnumPtr AlibreX::IADParameters::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(1109)
inline AlibreX::IADParameterPtr AlibreX::IADParameters::NewParameter ( _bstr_t Name, enum ADParameterType Type ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = raw_NewParameter(Name, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(1110)
inline HRESULT AlibreX::IADParameters::OpenParameterTransaction ( ) {
    HRESULT _hr = raw_OpenParameterTransaction();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1111)
inline HRESULT AlibreX::IADParameters::CloseParameterTransaction ( ) {
    HRESULT _hr = raw_CloseParameterTransaction();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1112)
inline HRESULT AlibreX::IADParameters::CancelParameterTransaction ( ) {
    HRESULT _hr = raw_CancelParameterTransaction();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IADRackConstraint wrapper method implementations
//

#pragma implementation_key(1113)
inline AlibreX::IADParameterPtr AlibreX::IADRackConstraint::GetPinionRadius ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_PinionRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

//
// interface IADScaleFeature wrapper method implementations
//

#pragma implementation_key(1114)
inline VARIANT_BOOL AlibreX::IADScaleFeature::GetscaleAboutCenteroid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_scaleAboutCenteroid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1115)
inline VARIANT_BOOL AlibreX::IADScaleFeature::GetIsUniformScaling ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUniformScaling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1116)
inline AlibreX::IADParameterPtr AlibreX::IADScaleFeature::GetuniformScaleFactor ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_uniformScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(1117)
inline AlibreX::IADParameterPtr AlibreX::IADScaleFeature::GetUniformScaleFactorX ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_UniformScaleFactorX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(1118)
inline AlibreX::IADParameterPtr AlibreX::IADScaleFeature::GetUniformScaleFactorY ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_UniformScaleFactorY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(1119)
inline AlibreX::IADParameterPtr AlibreX::IADScaleFeature::GetUniformScaleFactorZ ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_UniformScaleFactorZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

//
// interface IADScrewConstraint wrapper method implementations
//

#pragma implementation_key(1120)
inline AlibreX::IADParameterPtr AlibreX::IADScrewConstraint::GetPitch ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Pitch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

//
// interface IADShellFeature wrapper method implementations
//

#pragma implementation_key(1121)
inline AlibreX::IObjectCollectorPtr AlibreX::IADShellFeature::GetRemovedFaces ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_RemovedFaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(1122)
inline AlibreX::IObjectCollectorPtr AlibreX::IADShellFeature::GetMultiThicknessFaces ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_MultiThicknessFaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(1123)
inline AlibreX::IADParameterPtr AlibreX::IADShellFeature::GetStandardThickness ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_StandardThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(1124)
inline SAFEARRAY * AlibreX::IADShellFeature::GetmultiThicknesses ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_multiThicknesses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1125)
inline VARIANT_BOOL AlibreX::IADShellFeature::GetisShellOutward ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_isShellOutward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADTangentInsideConstraint wrapper method implementations
//

#pragma implementation_key(1126)
inline AlibreX::IADParameterPtr AlibreX::IADTangentInsideConstraint::GetOffset ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

//
// interface IADTangentOutsideConstraint wrapper method implementations
//

#pragma implementation_key(1127)
inline AlibreX::IADParameterPtr AlibreX::IADTangentOutsideConstraint::GetOffset ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

//
// interface IADVertexChamferFeature wrapper method implementations
//

#pragma implementation_key(1128)
inline AlibreX::IObjectCollectorPtr AlibreX::IADVertexChamferFeature::GetVertices ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(1129)
inline AlibreX::IADParameterPtr AlibreX::IADVertexChamferFeature::GetDistance1 ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Distance1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(1130)
inline AlibreX::IADParameterPtr AlibreX::IADVertexChamferFeature::GetDistance2 ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Distance2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(1131)
inline AlibreX::IADParameterPtr AlibreX::IADVertexChamferFeature::GetDistance3 ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_Distance3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

//
// interface IADPartFeature wrapper method implementations
//

#pragma implementation_key(1132)
inline enum AlibreX::ADObjectType AlibreX::IADPartFeature::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1133)
inline _bstr_t AlibreX::IADPartFeature::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1134)
inline void AlibreX::IADPartFeature::PutName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Name(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1135)
inline AlibreX::IADRootPtr AlibreX::IADPartFeature::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(1136)
inline AlibreX::IADSessionPtr AlibreX::IADPartFeature::GetSession ( ) {
    struct IADSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(1137)
inline enum AlibreX::ADPartFeatureType AlibreX::IADPartFeature::GetFeatureType ( ) {
    enum ADPartFeatureType _result;
    HRESULT _hr = get_FeatureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1138)
inline VARIANT_BOOL AlibreX::IADPartFeature::GetIsSuppressed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSuppressed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1139)
inline void AlibreX::IADPartFeature::PutIsSuppressed ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_IsSuppressed(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1140)
inline HRESULT AlibreX::IADPartFeature::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1141)
inline VARIANT_BOOL AlibreX::IADPartFeature::GetHasError ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1142)
inline HRESULT AlibreX::IADPartFeature::GetExtents ( struct IADPoint * * ppLower, struct IADPoint * * ppUpper ) {
    HRESULT _hr = raw_GetExtents(ppLower, ppUpper);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1143)
inline VARIANT_BOOL AlibreX::IADPartFeature::GetIsSheetMetalFeature ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSheetMetalFeature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1144)
inline AlibreX::IADFacesPtr AlibreX::IADPartFeature::GetFaces ( ) {
    struct IADFaces * _result = 0;
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFacesPtr(_result, false);
}

#pragma implementation_key(1145)
inline VARIANT_BOOL AlibreX::IADPartFeature::GetIsActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1146)
inline void AlibreX::IADPartFeature::PutIsActive ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_IsActive(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1147)
inline long AlibreX::IADPartFeature::GetFaceColor ( ) {
    long _result = 0;
    HRESULT _hr = get_FaceColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1148)
inline void AlibreX::IADPartFeature::PutFaceColor ( long pRetVal ) {
    HRESULT _hr = put_FaceColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1149)
inline long AlibreX::IADPartFeature::GetEdgeColor ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1150)
inline void AlibreX::IADPartFeature::PutEdgeColor ( long pRetVal ) {
    HRESULT _hr = put_EdgeColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1151)
inline long AlibreX::IADPartFeature::GetOpacity ( ) {
    long _result = 0;
    HRESULT _hr = get_Opacity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1152)
inline void AlibreX::IADPartFeature::PutOpacity ( long pRetVal ) {
    HRESULT _hr = put_Opacity(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1153)
inline long AlibreX::IADPartFeature::GetReflectivity ( ) {
    long _result = 0;
    HRESULT _hr = get_Reflectivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1154)
inline void AlibreX::IADPartFeature::PutReflectivity ( long pRetVal ) {
    HRESULT _hr = put_Reflectivity(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1155)
inline VARIANT_BOOL AlibreX::IADPartFeature::GetUsePartColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UsePartColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1156)
inline void AlibreX::IADPartFeature::PutUsePartColor ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_UsePartColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IADPartFeatures wrapper method implementations
//

#pragma implementation_key(1157)
inline IEnumVARIANTPtr AlibreX::IADPartFeatures::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1158)
inline AlibreX::IADPartFeaturePtr AlibreX::IADPartFeatures::GetItem ( const _variant_t & index ) {
    struct IADPartFeature * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartFeaturePtr(_result, false);
}

#pragma implementation_key(1159)
inline long AlibreX::IADPartFeatures::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1160)
inline AlibreX::DIEnumPtr AlibreX::IADPartFeatures::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(1161)
inline AlibreX::IADPartSessionPtr AlibreX::IADPartFeatures::GetSession ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

#pragma implementation_key(1162)
inline AlibreX::IADPartFeaturePtr AlibreX::IADPartFeatures::GetCurrentFeature ( ) {
    struct IADPartFeature * _result = 0;
    HRESULT _hr = get_CurrentFeature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartFeaturePtr(_result, false);
}

#pragma implementation_key(1163)
inline void AlibreX::IADPartFeatures::PutRefCurrentFeature ( struct IADPartFeature * pRetVal ) {
    HRESULT _hr = putref_CurrentFeature(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1164)
inline AlibreX::IADExtrusionFeaturePtr AlibreX::IADPartFeatures::AddExtrudedBoss ( struct IADSketch * pSketch, const _variant_t & Depth, enum ADPartFeatureEndCondition EndCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, enum ADDirectionType Direction, struct IADOccurrence * pDirectionOcc, IDispatch * pDirectionObject, VARIANT_BOOL IsDirectionReversed, const _variant_t & draftAngle, VARIANT_BOOL IsOutwardDraft, _bstr_t Name, _bstr_t depthParameterName, _bstr_t angleParameterName ) {
    struct IADExtrusionFeature * _result = 0;
    HRESULT _hr = raw_AddExtrudedBoss(pSketch, Depth, EndCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Direction, pDirectionOcc, pDirectionObject, IsDirectionReversed, draftAngle, IsOutwardDraft, Name, depthParameterName, angleParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADExtrusionFeaturePtr(_result, false);
}

#pragma implementation_key(1165)
inline AlibreX::IADExtrusionFeaturePtr AlibreX::IADPartFeatures::AddExtrudedCutout ( struct IADSketch * pSketch, const _variant_t & Depth, enum ADPartFeatureEndCondition EndCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, enum ADDirectionType Direction, struct IADOccurrence * pDirectionOcc, IDispatch * pDirectionObject, VARIANT_BOOL IsDirectionReversed, const _variant_t & draftAngle, VARIANT_BOOL IsOutwardDraft, _bstr_t Name, _bstr_t depthParameterName, _bstr_t angleParameterName ) {
    struct IADExtrusionFeature * _result = 0;
    HRESULT _hr = raw_AddExtrudedCutout(pSketch, Depth, EndCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Direction, pDirectionOcc, pDirectionObject, IsDirectionReversed, draftAngle, IsOutwardDraft, Name, depthParameterName, angleParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADExtrusionFeaturePtr(_result, false);
}

#pragma implementation_key(1166)
inline AlibreX::IADRevolutionFeaturePtr AlibreX::IADPartFeatures::AddRevolvedBoss ( struct IADSketch * pSketch, struct IADOccurrence * axisOcc, IDispatch * axisObject, const _variant_t & revolveAngle, _bstr_t Name ) {
    struct IADRevolutionFeature * _result = 0;
    HRESULT _hr = raw_AddRevolvedBoss(pSketch, axisOcc, axisObject, revolveAngle, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRevolutionFeaturePtr(_result, false);
}

#pragma implementation_key(1167)
inline AlibreX::IADRevolutionFeaturePtr AlibreX::IADPartFeatures::AddRevolvedCutout ( struct IADSketch * pSketch, struct IADOccurrence * axisOcc, IDispatch * axisObject, const _variant_t & revolveAngle, _bstr_t Name ) {
    struct IADRevolutionFeature * _result = 0;
    HRESULT _hr = raw_AddRevolvedCutout(pSketch, axisOcc, axisObject, revolveAngle, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRevolutionFeaturePtr(_result, false);
}

#pragma implementation_key(1168)
inline AlibreX::IADSweepFeaturePtr AlibreX::IADPartFeatures::AddSweptBoss ( struct IADSketch * pProfileSketch, struct IObjectCollector * pPathSketch, VARIANT_BOOL IsRigid, enum ADPartFeatureEndCondition EndCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, const _variant_t & draftAngle, VARIANT_BOOL IsOutwardDraft, _bstr_t Name ) {
    struct IADSweepFeature * _result = 0;
    HRESULT _hr = raw_AddSweptBoss(pProfileSketch, pPathSketch, IsRigid, EndCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, draftAngle, IsOutwardDraft, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSweepFeaturePtr(_result, false);
}

#pragma implementation_key(1169)
inline AlibreX::IADSweepFeaturePtr AlibreX::IADPartFeatures::AddSweptCutout ( struct IADSketch * pProfileSketch, struct IObjectCollector * pPathSketch, VARIANT_BOOL IsRigid, enum ADPartFeatureEndCondition EndCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, const _variant_t & draftAngle, VARIANT_BOOL IsOutwardDraft, _bstr_t Name ) {
    struct IADSweepFeature * _result = 0;
    HRESULT _hr = raw_AddSweptCutout(pProfileSketch, pPathSketch, IsRigid, EndCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, draftAngle, IsOutwardDraft, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSweepFeaturePtr(_result, false);
}

#pragma implementation_key(1170)
inline AlibreX::IADPartFeaturePtr AlibreX::IADPartFeatures::GetCurrentState ( ) {
    struct IADPartFeature * _result = 0;
    HRESULT _hr = get_CurrentState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartFeaturePtr(_result, false);
}

#pragma implementation_key(1171)
inline void AlibreX::IADPartFeatures::PutRefCurrentState ( struct IADPartFeature * pRetVal ) {
    HRESULT _hr = putref_CurrentState(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1172)
inline AlibreX::IADChamferFeaturePtr AlibreX::IADPartFeatures::AddEdgeChamferFeature ( struct IObjectCollector * colEdgesAndFaces, enum ADEdgeChamferType chamferType, const _variant_t & chamferDistance1, const _variant_t & chamferDistance2, const _variant_t & chamferAngle, VARIANT_BOOL TangentPropagate, _bstr_t dist1ParameterName, _bstr_t dist2ParameterName, _bstr_t chamferAngleParameterName, _bstr_t Name ) {
    struct IADChamferFeature * _result = 0;
    HRESULT _hr = raw_AddEdgeChamferFeature(colEdgesAndFaces, chamferType, chamferDistance1, chamferDistance2, chamferAngle, TangentPropagate, dist1ParameterName, dist2ParameterName, chamferAngleParameterName, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADChamferFeaturePtr(_result, false);
}

#pragma implementation_key(1173)
inline AlibreX::IADVertexChamferFeaturePtr AlibreX::IADPartFeatures::AddVertexChamferFeature ( struct IObjectCollector * colVertices, const _variant_t & Distance1, const _variant_t & Distance2, const _variant_t & Distance3, _bstr_t dist1ParameterName, _bstr_t dist2ParameterName, _bstr_t dist3ParameterName, _bstr_t Name ) {
    struct IADVertexChamferFeature * _result = 0;
    HRESULT _hr = raw_AddVertexChamferFeature(colVertices, Distance1, Distance2, Distance3, dist1ParameterName, dist2ParameterName, dist3ParameterName, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVertexChamferFeaturePtr(_result, false);
}

#pragma implementation_key(1174)
inline AlibreX::IADFilletFeaturePtr AlibreX::IADPartFeatures::AddConstantRadiusFilletFeature ( struct IObjectCollector * colEdgesAndFaces, const _variant_t & vConstantRadius, VARIANT_BOOL bTangentPropagate, _bstr_t strConstRadParameterName, _bstr_t Name ) {
    struct IADFilletFeature * _result = 0;
    HRESULT _hr = raw_AddConstantRadiusFilletFeature(colEdgesAndFaces, vConstantRadius, bTangentPropagate, strConstRadParameterName, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFilletFeaturePtr(_result, false);
}

#pragma implementation_key(1175)
inline AlibreX::IADFilletFeaturePtr AlibreX::IADPartFeatures::AddVariableRadiusFilletFeature ( struct IObjectCollector * colEdgesAndFaces, SAFEARRAY * * pStartRadiui, SAFEARRAY * * pEndRadiui, VARIANT_BOOL bTangentPropagate, _bstr_t Name ) {
    struct IADFilletFeature * _result = 0;
    HRESULT _hr = raw_AddVariableRadiusFilletFeature(colEdgesAndFaces, pStartRadiui, pEndRadiui, bTangentPropagate, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFilletFeaturePtr(_result, false);
}

#pragma implementation_key(1176)
inline AlibreX::IADOffsetFaceFeaturePtr AlibreX::IADPartFeatures::AddOffsetFaceFeature ( struct IObjectCollector * pFaces, const _variant_t & vOffset, _bstr_t Name, _bstr_t strOffsetParameterName ) {
    struct IADOffsetFaceFeature * _result = 0;
    HRESULT _hr = raw_AddOffsetFaceFeature(pFaces, vOffset, Name, strOffsetParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADOffsetFaceFeaturePtr(_result, false);
}

#pragma implementation_key(1177)
inline AlibreX::IADScaleFeaturePtr AlibreX::IADPartFeatures::AddScaleFeature ( VARIANT_BOOL scaleAboutCenteroid, VARIANT_BOOL uniformScaling, const _variant_t & uniformScaleFactor, const _variant_t & scaleFactorX, const _variant_t & scaleFactorY, const _variant_t & scaleFactorZ, _bstr_t uniformScaleParamName, _bstr_t scaleFactorXParameterName, _bstr_t scaleFactorYParameterName, _bstr_t scaleFactorZParameterName, _bstr_t Name ) {
    struct IADScaleFeature * _result = 0;
    HRESULT _hr = raw_AddScaleFeature(scaleAboutCenteroid, uniformScaling, uniformScaleFactor, scaleFactorX, scaleFactorY, scaleFactorZ, uniformScaleParamName, scaleFactorXParameterName, scaleFactorYParameterName, scaleFactorZParameterName, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADScaleFeaturePtr(_result, false);
}

#pragma implementation_key(1178)
inline AlibreX::IADDraftFeaturePtr AlibreX::IADPartFeatures::AddDraftFeature ( struct IObjectCollector * DraftFaces, struct IADOccurrence * toDraftPlaneOcc, IDispatch * DraftNeutralPlane, const _variant_t & draftAngle, VARIANT_BOOL IsOutwardDraft, _bstr_t angleParameterName, _bstr_t Name ) {
    struct IADDraftFeature * _result = 0;
    HRESULT _hr = raw_AddDraftFeature(DraftFaces, toDraftPlaneOcc, DraftNeutralPlane, draftAngle, IsOutwardDraft, angleParameterName, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDraftFeaturePtr(_result, false);
}

#pragma implementation_key(1179)
inline AlibreX::IADShellFeaturePtr AlibreX::IADPartFeatures::AddShellFeature ( struct IObjectCollector * colFacesToRemove, const _variant_t & vStandardThickness, VARIANT_BOOL isShellOutward, struct IObjectCollector * colMultiThickFaces, SAFEARRAY * * multiThicknesses, _bstr_t thicknessParameterName, _bstr_t Name ) {
    struct IADShellFeature * _result = 0;
    HRESULT _hr = raw_AddShellFeature(colFacesToRemove, vStandardThickness, isShellOutward, colMultiThickFaces, multiThicknesses, thicknessParameterName, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADShellFeaturePtr(_result, false);
}

#pragma implementation_key(1180)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddSimpleHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddSimpleHole(pSketch, Depth, Diameter, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1181)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddDrilledHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & DrillAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddDrilledHole(pSketch, Depth, Diameter, DrillAngle, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1182)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddTaperedHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & MajorDiameter, const _variant_t & MinorDiameter, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddTaperedHole(pSketch, Depth, MajorDiameter, MinorDiameter, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1183)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddTaperedDrilledHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & MajorDiameter, const _variant_t & MinorDiameter, const _variant_t & DrillAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddTaperedDrilledHole(pSketch, Depth, MajorDiameter, MinorDiameter, DrillAngle, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1184)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddCounterSunkHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & CounterSinkDiameter, const _variant_t & CounterSinkAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddCounterSunkHole(pSketch, Depth, Diameter, CounterSinkDiameter, CounterSinkAngle, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1185)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddCounterSunkDrilledHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & DrillAngle, const _variant_t & CounterSinkDiameter, const _variant_t & CounterSinkAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddCounterSunkDrilledHole(pSketch, Depth, Diameter, DrillAngle, CounterSinkDiameter, CounterSinkAngle, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1186)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddCounterBoredHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & CounterBoreDepth, const _variant_t & CounterBoreDiameter, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddCounterBoredHole(pSketch, Depth, Diameter, CounterBoreDepth, CounterBoreDiameter, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1187)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddCounterBoredDrilledHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & DrillAngle, const _variant_t & CounterBoreDepth, const _variant_t & CounterBoreDiameter, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddCounterBoredDrilledHole(pSketch, Depth, Diameter, DrillAngle, CounterBoreDepth, CounterBoreDiameter, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1188)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddCounterDrilledHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & CounterDrillDepth, const _variant_t & CounterDrillDiameter, const _variant_t & CounterDrillAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddCounterDrilledHole(pSketch, Depth, Diameter, CounterDrillDepth, CounterDrillDiameter, CounterDrillAngle, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1189)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddCounterDrilledDrilledHole ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & DrillAngle, const _variant_t & CounterDrillDepth, const _variant_t & CounterDrillDiameter, const _variant_t & CounterDrillAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddCounterDrilledDrilledHole(pSketch, Depth, Diameter, DrillAngle, CounterDrillDepth, CounterDrillDiameter, CounterDrillAngle, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1190)
inline AlibreX::IADTappedThreadInfoPtr AlibreX::IADPartFeatures::CreateTappedThreadInfo ( enum ADTappedThreadType threadType, _bstr_t Name, _bstr_t threadClass, double Pitch, double tapDrillDiameter, double MajorDiameter, double MinorDiameter, double pitchDiameter, double ThreadLength ) {
    struct IADTappedThreadInfo * _result = 0;
    HRESULT _hr = raw_CreateTappedThreadInfo(threadType, Name, threadClass, Pitch, tapDrillDiameter, MajorDiameter, MinorDiameter, pitchDiameter, ThreadLength, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTappedThreadInfoPtr(_result, false);
}

#pragma implementation_key(1191)
inline AlibreX::IADMeshBooleanFeaturePtr AlibreX::IADPartFeatures::AddMeshBooleanFeature ( struct IADDesignMesh * designMesh, struct IADOccurrence * designMeshOcc, enum ADBooleanOperator ADBooleanOperator, _bstr_t Name ) {
    struct IADMeshBooleanFeature * _result = 0;
    HRESULT _hr = raw_AddMeshBooleanFeature(designMesh, designMeshOcc, ADBooleanOperator, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADMeshBooleanFeaturePtr(_result, false);
}

#pragma implementation_key(1192)
inline AlibreX::IADLoftFeaturePtr AlibreX::IADPartFeatures::AddLoftBoss ( struct IObjectCollector * CrossSections, struct IObjectCollector * Tangents, struct IObjectCollector * TangentMagnitudes, struct IObjectCollector * TangentAngles, struct IObjectCollector * GuideCurves, enum ADLoftGuideType GuideCurveType, VARIANT_BOOL MinimizeTwist, VARIANT_BOOL MinimizeCurvature, VARIANT_BOOL SimplifySurface, VARIANT_BOOL ConnectEnds, _bstr_t Name ) {
    struct IADLoftFeature * _result = 0;
    HRESULT _hr = raw_AddLoftBoss(CrossSections, Tangents, TangentMagnitudes, TangentAngles, GuideCurves, GuideCurveType, MinimizeTwist, MinimizeCurvature, SimplifySurface, ConnectEnds, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADLoftFeaturePtr(_result, false);
}

#pragma implementation_key(1193)
inline AlibreX::IADLoftFeaturePtr AlibreX::IADPartFeatures::AddLoftCut ( struct IObjectCollector * CrossSections, struct IObjectCollector * Tangents, struct IObjectCollector * TangentMagnitudes, struct IObjectCollector * TangentAngles, struct IObjectCollector * GuideCurves, enum ADLoftGuideType GuideCurveType, VARIANT_BOOL MinimizeTwist, VARIANT_BOOL MinimizeCurvature, VARIANT_BOOL SimplifySurface, VARIANT_BOOL ConnectEnds, _bstr_t Name ) {
    struct IADLoftFeature * _result = 0;
    HRESULT _hr = raw_AddLoftCut(CrossSections, Tangents, TangentMagnitudes, TangentAngles, GuideCurves, GuideCurveType, MinimizeTwist, MinimizeCurvature, SimplifySurface, ConnectEnds, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADLoftFeaturePtr(_result, false);
}

#pragma implementation_key(1194)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddSimpleHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t diameterParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddSimpleHoleEx(pSketch, Depth, Diameter, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, diameterParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1195)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddDrilledHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & DrillAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t diameterParameterName, _bstr_t drillAngleParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddDrilledHoleEx(pSketch, Depth, Diameter, DrillAngle, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, diameterParameterName, drillAngleParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1196)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddTaperedHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & MajorDiameter, const _variant_t & MinorDiameter, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t majorDiameterParameterName, _bstr_t minorDiameterParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddTaperedHoleEx(pSketch, Depth, MajorDiameter, MinorDiameter, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, majorDiameterParameterName, minorDiameterParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1197)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddTaperedDrilledHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & MajorDiameter, const _variant_t & MinorDiameter, const _variant_t & DrillAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t majorDiameterParameterName, _bstr_t minorDiameterParameterName, _bstr_t drillAngleParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddTaperedDrilledHoleEx(pSketch, Depth, MajorDiameter, MinorDiameter, DrillAngle, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, majorDiameterParameterName, minorDiameterParameterName, drillAngleParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1198)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddCounterSunkHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & CounterSinkDiameter, const _variant_t & CounterSinkAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t diameterParameterName, _bstr_t counterSinkDiameterParameterName, _bstr_t counterSinkAngleParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddCounterSunkHoleEx(pSketch, Depth, Diameter, CounterSinkDiameter, CounterSinkAngle, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, diameterParameterName, counterSinkDiameterParameterName, counterSinkAngleParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1199)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddCounterSunkDrilledHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & DrillAngle, const _variant_t & CounterSinkDiameter, const _variant_t & CounterSinkAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t diameterParameterName, _bstr_t drillAngleParameterName, _bstr_t counterSinkDiameterParameterName, _bstr_t counterSinkAngleParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddCounterSunkDrilledHoleEx(pSketch, Depth, Diameter, DrillAngle, CounterSinkDiameter, CounterSinkAngle, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, diameterParameterName, drillAngleParameterName, counterSinkDiameterParameterName, counterSinkAngleParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1200)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddCounterBoredHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & CounterBoreDepth, const _variant_t & CounterBoreDiameter, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t diameterParameterName, _bstr_t counterBoreDepthParameterName, _bstr_t counterBoreDiameterParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddCounterBoredHoleEx(pSketch, Depth, Diameter, CounterBoreDepth, CounterBoreDiameter, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, diameterParameterName, counterBoreDepthParameterName, counterBoreDiameterParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1201)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddCounterBoredDrilledHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & DrillAngle, const _variant_t & CounterBoreDepth, const _variant_t & CounterBoreDiameter, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t diameterParameterName, _bstr_t drillAngleParameterName, _bstr_t counterBoreDepthParameterName, _bstr_t counterBoreDiameterParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddCounterBoredDrilledHoleEx(pSketch, Depth, Diameter, DrillAngle, CounterBoreDepth, CounterBoreDiameter, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, diameterParameterName, drillAngleParameterName, counterBoreDepthParameterName, counterBoreDiameterParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1202)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddCounterDrilledHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & CounterDrillDepth, const _variant_t & CounterDrillDiameter, const _variant_t & CounterDrillAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t diameterParameterName, _bstr_t counterDrillDepthParameterName, _bstr_t counterDrillDiameterParameterName, _bstr_t counterDrillAngleParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddCounterDrilledHoleEx(pSketch, Depth, Diameter, CounterDrillDepth, CounterDrillDiameter, CounterDrillAngle, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, diameterParameterName, counterDrillDepthParameterName, counterDrillDiameterParameterName, counterDrillAngleParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1203)
inline AlibreX::IADHoleFeaturePtr AlibreX::IADPartFeatures::AddCounterDrilledDrilledHoleEx ( struct IADSketch * pSketch, const _variant_t & Depth, const _variant_t & Diameter, const _variant_t & DrillAngle, const _variant_t & CounterDrillDepth, const _variant_t & CounterDrillDiameter, const _variant_t & CounterDrillAngle, VARIANT_BOOL isReversed, struct IADTappedThreadInfo * TappedThread, enum ADHoleDepthCondition depthCondition, struct IADOccurrence * toGeometryOcc, IDispatch * toGeometryObject, double ToGeometryOffset, _bstr_t Name, _bstr_t depthParameterName, _bstr_t diameterParameterName, _bstr_t drillAngleParameterName, _bstr_t counterDrillDepthParameterName, _bstr_t counterDrillDiameterParameterName, _bstr_t counterDrillAngleParameterName ) {
    struct IADHoleFeature * _result = 0;
    HRESULT _hr = raw_AddCounterDrilledDrilledHoleEx(pSketch, Depth, Diameter, DrillAngle, CounterDrillDepth, CounterDrillDiameter, CounterDrillAngle, isReversed, TappedThread, depthCondition, toGeometryOcc, toGeometryObject, ToGeometryOffset, Name, depthParameterName, diameterParameterName, drillAngleParameterName, counterDrillDepthParameterName, counterDrillDiameterParameterName, counterDrillAngleParameterName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADHoleFeaturePtr(_result, false);
}

#pragma implementation_key(1204)
inline AlibreX::IADWrapFeaturePtr AlibreX::IADPartFeatures::AddWrap ( struct IADSketch * pSketch, IDispatch * targetFaceObject, const _variant_t & Depth, enum ADWrapFocusType FocusType, enum ADBooleanOperator BooleanOperator, _bstr_t Name ) {
    struct IADWrapFeature * _result = 0;
    HRESULT _hr = raw_AddWrap(pSketch, targetFaceObject, Depth, FocusType, BooleanOperator, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADWrapFeaturePtr(_result, false);
}

#pragma implementation_key(1205)
inline AlibreX::IADProjectFeaturePtr AlibreX::IADPartFeatures::AddProject ( struct IADSketch * pSketch, const _variant_t & Depth, enum ADBooleanOperator BooleanOperator, VARIANT_BOOL IsIntoSketchPlane, _bstr_t Name ) {
    struct IADProjectFeature * _result = 0;
    HRESULT _hr = raw_AddProject(pSketch, Depth, BooleanOperator, IsIntoSketchPlane, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADProjectFeaturePtr(_result, false);
}

//
// interface IADPartSession wrapper method implementations
//

#pragma implementation_key(1206)
inline SAFEARRAY * AlibreX::IADPartSession::GetFacetData ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_FacetData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1207)
inline long AlibreX::IADPartSession::GetColor ( ) {
    long _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1208)
inline void AlibreX::IADPartSession::PutColor ( long pRetVal ) {
    HRESULT _hr = put_Color(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1209)
inline long AlibreX::IADPartSession::GetTransparency ( ) {
    long _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1210)
inline void AlibreX::IADPartSession::PutTransparency ( long pRetVal ) {
    HRESULT _hr = put_Transparency(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1211)
inline long AlibreX::IADPartSession::GetReflectivity ( ) {
    long _result = 0;
    HRESULT _hr = get_Reflectivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1212)
inline void AlibreX::IADPartSession::PutReflectivity ( long pRetVal ) {
    HRESULT _hr = put_Reflectivity(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1213)
inline long AlibreX::IADPartSession::GetFeatureCount ( ) {
    long _result = 0;
    HRESULT _hr = get_FeatureCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1214)
inline AlibreX::IADSketchesPtr AlibreX::IADPartSession::GetSketches ( ) {
    struct IADSketches * _result = 0;
    HRESULT _hr = get_Sketches(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchesPtr(_result, false);
}

#pragma implementation_key(1215)
inline AlibreX::IADPartFeaturesPtr AlibreX::IADPartSession::GetFeatures ( ) {
    struct IADPartFeatures * _result = 0;
    HRESULT _hr = get_Features(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartFeaturesPtr(_result, false);
}

#pragma implementation_key(1216)
inline HRESULT AlibreX::IADPartSession::RegenerateAll ( ) {
    HRESULT _hr = raw_RegenerateAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1217)
inline HRESULT AlibreX::IADPartSession::UnSuppressAll ( ) {
    HRESULT _hr = raw_UnSuppressAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1218)
inline AlibreX::IADBodiesPtr AlibreX::IADPartSession::GetBodies ( ) {
    struct IADBodies * _result = 0;
    HRESULT _hr = get_Bodies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBodiesPtr(_result, false);
}

#pragma implementation_key(1219)
inline AlibreX::IADDesignSurfacesPtr AlibreX::IADPartSession::GetDesignSurfaces ( ) {
    struct IADDesignSurfaces * _result = 0;
    HRESULT _hr = get_DesignSurfaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSurfacesPtr(_result, false);
}

#pragma implementation_key(1220)
inline AlibreX::IAD3DSketchesPtr AlibreX::IADPartSession::GetSketches3D ( ) {
    struct IAD3DSketches * _result = 0;
    HRESULT _hr = get_Sketches3D(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAD3DSketchesPtr(_result, false);
}

#pragma implementation_key(1221)
inline SAFEARRAY * AlibreX::IADPartSession::FacetDataForConfiguration ( struct IADConfiguration * pConfiguration ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_FacetDataForConfiguration(pConfiguration, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1222)
inline HRESULT AlibreX::IADPartSession::GetMeshDefinition ( struct IADConfiguration * pConfiguration, long * pFaceDataSize, long * pVertexDataSize ) {
    HRESULT _hr = raw_GetMeshDefinition(pConfiguration, pFaceDataSize, pVertexDataSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1223)
inline HRESULT AlibreX::IADPartSession::GetMeshData ( struct IADConfiguration * pConfiguration, SAFEARRAY * * faceData, SAFEARRAY * * vertexData ) {
    HRESULT _hr = raw_GetMeshData(pConfiguration, faceData, vertexData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1224)
inline HRESULT AlibreX::IADPartSession::GetMeshDefinitionEx ( struct IADConfiguration * pConfiguration, long minCircularFacets, long * pFaceDataSize, long * pVertexDataSize, long * pNormalDataSize ) {
    HRESULT _hr = raw_GetMeshDefinitionEx(pConfiguration, minCircularFacets, pFaceDataSize, pVertexDataSize, pNormalDataSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1225)
inline HRESULT AlibreX::IADPartSession::GetMeshDataEx ( struct IADConfiguration * pConfiguration, SAFEARRAY * * faceData, SAFEARRAY * * vertexData, SAFEARRAY * * normalData ) {
    HRESULT _hr = raw_GetMeshDataEx(pConfiguration, faceData, vertexData, normalData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1226)
inline HRESULT AlibreX::IADPartSession::Suppress ( struct IObjectCollector * states ) {
    HRESULT _hr = raw_Suppress(states);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1227)
inline HRESULT AlibreX::IADPartSession::Unsuppress ( struct IObjectCollector * states ) {
    HRESULT _hr = raw_Unsuppress(states);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1228)
inline AlibreX::IADBodiesPtr AlibreX::IADPartSession::GetBodiesForConfiguration ( struct IADConfiguration * pConfiguration ) {
    struct IADBodies * _result = 0;
    HRESULT _hr = raw_GetBodiesForConfiguration(pConfiguration, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBodiesPtr(_result, false);
}

#pragma implementation_key(1229)
inline long AlibreX::IADPartSession::GetEdgeColor ( ) {
    long _result = 0;
    HRESULT _hr = get_EdgeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1230)
inline void AlibreX::IADPartSession::PutEdgeColor ( long pRetVal ) {
    HRESULT _hr = put_EdgeColor(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1231)
inline AlibreX::IADBodyPtr AlibreX::IADPartSession::GetSectionBody ( ) {
    struct IADBody * _result = 0;
    HRESULT _hr = get_SectionBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBodyPtr(_result, false);
}

#pragma implementation_key(1232)
inline VARIANT_BOOL AlibreX::IADPartSession::GetShowFeatureColor ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowFeatureColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADShell wrapper method implementations
//

#pragma implementation_key(1233)
inline enum AlibreX::ADObjectType AlibreX::IADShell::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1234)
inline enum AlibreX::ADTopologyType AlibreX::IADShell::GetTopologyType ( ) {
    enum ADTopologyType _result;
    HRESULT _hr = get_TopologyType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1235)
inline AlibreX::IADPartSessionPtr AlibreX::IADShell::GetPart ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Part(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

#pragma implementation_key(1236)
inline AlibreX::IADBodyPtr AlibreX::IADShell::GetBody ( ) {
    struct IADBody * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBodyPtr(_result, false);
}

#pragma implementation_key(1237)
inline AlibreX::IADFacesPtr AlibreX::IADShell::GetFaces ( ) {
    struct IADFaces * _result = 0;
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFacesPtr(_result, false);
}

#pragma implementation_key(1238)
inline AlibreX::IADEdgesPtr AlibreX::IADShell::GetEdges ( ) {
    struct IADEdges * _result = 0;
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADEdgesPtr(_result, false);
}

#pragma implementation_key(1239)
inline AlibreX::IADLumpPtr AlibreX::IADShell::GetLump ( ) {
    struct IADLump * _result = 0;
    HRESULT _hr = get_Lump(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADLumpPtr(_result, false);
}

//
// interface IADShells wrapper method implementations
//

#pragma implementation_key(1240)
inline IEnumVARIANTPtr AlibreX::IADShells::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1241)
inline AlibreX::IADShellPtr AlibreX::IADShells::GetItem ( long index ) {
    struct IADShell * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADShellPtr(_result, false);
}

#pragma implementation_key(1242)
inline long AlibreX::IADShells::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1243)
inline AlibreX::DIEnumPtr AlibreX::IADShells::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(1244)
inline AlibreX::IADPartSessionPtr AlibreX::IADShells::GetSession ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

//
// interface IADVertex wrapper method implementations
//

#pragma implementation_key(1245)
inline enum AlibreX::ADObjectType AlibreX::IADVertex::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1246)
inline enum AlibreX::ADTopologyType AlibreX::IADVertex::GetTopologyType ( ) {
    enum ADTopologyType _result;
    HRESULT _hr = get_TopologyType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1247)
inline AlibreX::IADPartSessionPtr AlibreX::IADVertex::GetPart ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Part(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

#pragma implementation_key(1248)
inline AlibreX::IADBodyPtr AlibreX::IADVertex::GetBody ( ) {
    struct IADBody * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADBodyPtr(_result, false);
}

#pragma implementation_key(1249)
inline AlibreX::IADEdgesPtr AlibreX::IADVertex::GetEdges ( ) {
    struct IADEdges * _result = 0;
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADEdgesPtr(_result, false);
}

#pragma implementation_key(1250)
inline AlibreX::IADFacesPtr AlibreX::IADVertex::GetFaces ( ) {
    struct IADFaces * _result = 0;
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFacesPtr(_result, false);
}

#pragma implementation_key(1251)
inline AlibreX::IADPointPtr AlibreX::IADVertex::GetPoint ( ) {
    struct IADPoint * _result = 0;
    HRESULT _hr = get_Point(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPointPtr(_result, false);
}

#pragma implementation_key(1252)
inline SAFEARRAY * AlibreX::IADVertex::GetKey ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADVertices wrapper method implementations
//

#pragma implementation_key(1253)
inline IEnumVARIANTPtr AlibreX::IADVertices::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1254)
inline AlibreX::IADVertexPtr AlibreX::IADVertices::GetItem ( long index ) {
    struct IADVertex * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVertexPtr(_result, false);
}

#pragma implementation_key(1255)
inline long AlibreX::IADVertices::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1256)
inline AlibreX::DIEnumPtr AlibreX::IADVertices::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(1257)
inline AlibreX::IADPartSessionPtr AlibreX::IADVertices::GetSession ( ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

//
// interface IADProjectFeature wrapper method implementations
//

#pragma implementation_key(1258)
inline VARIANT_BOOL AlibreX::IADProjectFeature::GetIsCutout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCutout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1259)
inline AlibreX::IADSketchPtr AlibreX::IADProjectFeature::GetSketch ( ) {
    struct IADSketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPtr(_result, false);
}

#pragma implementation_key(1260)
inline AlibreX::IADParameterPtr AlibreX::IADProjectFeature::GetDepthParameter ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_DepthParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(1261)
inline VARIANT_BOOL AlibreX::IADProjectFeature::GetIsIntoSketchPlane ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsIntoSketchPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADRepositories wrapper method implementations
//

#pragma implementation_key(1262)
inline IEnumVARIANTPtr AlibreX::IADRepositories::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1263)
inline AlibreX::IADRepositoryPtr AlibreX::IADRepositories::GetItem ( const _variant_t & index ) {
    struct IADRepository * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRepositoryPtr(_result, false);
}

#pragma implementation_key(1264)
inline long AlibreX::IADRepositories::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1265)
inline AlibreX::DIEnumPtr AlibreX::IADRepositories::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

//
// interface IADRepository wrapper method implementations
//

#pragma implementation_key(1266)
inline enum AlibreX::ADObjectType AlibreX::IADRepository::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1267)
inline _bstr_t AlibreX::IADRepository::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1268)
inline AlibreX::IADFolderPtr AlibreX::IADRepository::GetRootFolder ( ) {
    struct IADFolder * _result = 0;
    HRESULT _hr = get_RootFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADFolderPtr(_result, false);
}

#pragma implementation_key(1269)
inline AlibreX::IADRootPtr AlibreX::IADRepository::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(1270)
inline HRESULT AlibreX::IADRepository::Publish ( struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles ) {
    HRESULT _hr = raw_Publish(pUsers, pTeams, pRoles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1271)
inline HRESULT AlibreX::IADRepository::UnPublish ( struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, struct IObjectCollector * pRoles ) {
    HRESULT _hr = raw_UnPublish(pUsers, pTeams, pRoles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1272)
inline HRESULT AlibreX::IADRepository::UnPublishToAll ( ) {
    HRESULT _hr = raw_UnPublishToAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1273)
inline VARIANT_BOOL AlibreX::IADRepository::IsPublished ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPublished(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1274)
inline VARIANT_BOOL AlibreX::IADRepository::IsPublishedToTeam ( struct IADTeam * pTeam ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPublishedToTeam(pTeam, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1275)
inline VARIANT_BOOL AlibreX::IADRepository::IsPublishedToUser ( struct IADUser * pUser ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPublishedToUser(pUser, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1276)
inline VARIANT_BOOL AlibreX::IADRepository::IsPublishedToRole ( struct IADTeamRole * pRole ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPublishedToRole(pRole, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADRevolutionFeature wrapper method implementations
//

#pragma implementation_key(1277)
inline VARIANT_BOOL AlibreX::IADRevolutionFeature::GetIsCutout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCutout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1278)
inline AlibreX::IADSketchPtr AlibreX::IADRevolutionFeature::GetSketch ( ) {
    struct IADSketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPtr(_result, false);
}

#pragma implementation_key(1279)
inline AlibreX::IADParameterPtr AlibreX::IADRevolutionFeature::GetAngleParameter ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_AngleParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(1280)
inline AlibreX::IADTargetProxyPtr AlibreX::IADRevolutionFeature::GetAxis ( ) {
    struct IADTargetProxy * _result = 0;
    HRESULT _hr = get_Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTargetProxyPtr(_result, false);
}

//
// interface IADRoot wrapper method implementations
//

#pragma implementation_key(1281)
inline enum AlibreX::ADObjectType AlibreX::IADRoot::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1282)
inline AlibreX::IADRepositoriesPtr AlibreX::IADRoot::GetRepositories ( ) {
    struct IADRepositories * _result = 0;
    HRESULT _hr = get_Repositories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRepositoriesPtr(_result, false);
}

#pragma implementation_key(1283)
inline AlibreX::IADRepositoryPtr AlibreX::IADRoot::GetRepositoryByName ( _bstr_t Name ) {
    struct IADRepository * _result = 0;
    HRESULT _hr = raw_GetRepositoryByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRepositoryPtr(_result, false);
}

#pragma implementation_key(1284)
inline IDispatchPtr AlibreX::IADRoot::BindReferenceToObject ( _bstr_t referenceString, enum ADObjectType objectType ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_BindReferenceToObject(referenceString, objectType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1285)
inline AlibreX::IADSessionPtr AlibreX::IADRoot::ImportSTEPFile ( _bstr_t filePath ) {
    struct IADSession * _result = 0;
    HRESULT _hr = raw_ImportSTEPFile(filePath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(1286)
inline AlibreX::IADSessionPtr AlibreX::IADRoot::ImportSATFile ( _bstr_t filePath ) {
    struct IADSession * _result = 0;
    HRESULT _hr = raw_ImportSATFile(filePath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(1287)
inline AlibreX::IADSessionPtr AlibreX::IADRoot::ImportIGESFile ( _bstr_t filePath ) {
    struct IADSession * _result = 0;
    HRESULT _hr = raw_ImportIGESFile(filePath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(1288)
inline AlibreX::IADSessionPtr AlibreX::IADRoot::ImportDWGFile ( _bstr_t filePath, enum ADUnits overridingUnit, VARIANT_BOOL maintainProjection ) {
    struct IADSession * _result = 0;
    HRESULT _hr = raw_ImportDWGFile(filePath, overridingUnit, maintainProjection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(1289)
inline AlibreX::IADSessionPtr AlibreX::IADRoot::ImportDXFFile ( _bstr_t filePath, enum ADUnits overridingUnit, VARIANT_BOOL maintainProjection ) {
    struct IADSession * _result = 0;
    HRESULT _hr = raw_ImportDXFFile(filePath, overridingUnit, maintainProjection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(1290)
inline AlibreX::IADSessionsPtr AlibreX::IADRoot::GetSessions ( ) {
    struct IADSessions * _result = 0;
    HRESULT _hr = get_Sessions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionsPtr(_result, false);
}

#pragma implementation_key(1291)
inline HRESULT AlibreX::IADRoot::Terminate ( ) {
    HRESULT _hr = raw_Terminate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1292)
inline AlibreX::IADUserPtr AlibreX::IADRoot::GetUser ( ) {
    struct IADUser * _result = 0;
    HRESULT _hr = get_User(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADUserPtr(_result, false);
}

#pragma implementation_key(1293)
inline AlibreX::IADTeamsPtr AlibreX::IADRoot::GetTeams ( ) {
    struct IADTeams * _result = 0;
    HRESULT _hr = get_Teams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTeamsPtr(_result, false);
}

#pragma implementation_key(1294)
inline AlibreX::IADUsersPtr AlibreX::IADRoot::GetListedUsers ( ) {
    struct IADUsers * _result = 0;
    HRESULT _hr = get_ListedUsers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADUsersPtr(_result, false);
}

#pragma implementation_key(1295)
inline AlibreX::IADUserPtr AlibreX::IADRoot::CreateUser ( _bstr_t Name ) {
    struct IADUser * _result = 0;
    HRESULT _hr = raw_CreateUser(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADUserPtr(_result, false);
}

#pragma implementation_key(1296)
inline AlibreX::IADUserPtr AlibreX::IADRoot::GetUserByName ( _bstr_t Name ) {
    struct IADUser * _result = 0;
    HRESULT _hr = raw_GetUserByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADUserPtr(_result, false);
}

#pragma implementation_key(1297)
inline AlibreX::IADTeamPtr AlibreX::IADRoot::CreateTeam ( _bstr_t Name ) {
    struct IADTeam * _result = 0;
    HRESULT _hr = raw_CreateTeam(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTeamPtr(_result, false);
}

#pragma implementation_key(1298)
inline AlibreX::IADTeamPtr AlibreX::IADRoot::GetTeamByName ( _bstr_t Name ) {
    struct IADTeam * _result = 0;
    HRESULT _hr = raw_GetTeamByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTeamPtr(_result, false);
}

#pragma implementation_key(1299)
inline HRESULT AlibreX::IADRoot::SendMessage ( struct IObjectCollector * pUsers, struct IObjectCollector * pTeams, _bstr_t message ) {
    HRESULT _hr = raw_SendMessage(pUsers, pTeams, message);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1300)
inline AlibreX::IObjectCollectorPtr AlibreX::IADRoot::NewObjectCollector ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = raw_NewObjectCollector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(1301)
inline AlibreX::IPermissionSelectorPtr AlibreX::IADRoot::NewPermissionSelector ( ) {
    struct IPermissionSelector * _result = 0;
    HRESULT _hr = raw_NewPermissionSelector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPermissionSelectorPtr(_result, false);
}

#pragma implementation_key(1302)
inline AlibreX::INotificationSelectorPtr AlibreX::IADRoot::NewNotificationSelector ( ) {
    struct INotificationSelector * _result = 0;
    HRESULT _hr = raw_NewNotificationSelector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INotificationSelectorPtr(_result, false);
}

#pragma implementation_key(1303)
inline HRESULT AlibreX::IADRoot::SetAgentProperty ( _bstr_t Name, _bstr_t Value ) {
    HRESULT _hr = raw_SetAgentProperty(Name, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1304)
inline _bstr_t AlibreX::IADRoot::GetAgentProperty ( _bstr_t Name ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAgentProperty(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1305)
inline HRESULT AlibreX::IADRoot::RegisterAgent ( SAFEARRAY * * pAgentBytes ) {
    HRESULT _hr = raw_RegisterAgent(pAgentBytes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1306)
inline HRESULT AlibreX::IADRoot::RunAgent ( _bstr_t className ) {
    HRESULT _hr = raw_RunAgent(className);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1307)
inline VARIANT_BOOL AlibreX::IADRoot::IsOpenedFromRepository ( _bstr_t filePathOnDisk ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsOpenedFromRepository(filePathOnDisk, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1308)
inline _bstr_t AlibreX::IADRoot::GetRepositoryReference ( _bstr_t filePathOnDisk ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetRepositoryReference(filePathOnDisk, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1309)
inline AlibreX::IADSessionPtr AlibreX::IADRoot::OpenFile ( _bstr_t filePath ) {
    struct IADSession * _result = 0;
    HRESULT _hr = raw_OpenFile(filePath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(1310)
inline _bstr_t AlibreX::IADRoot::Getversion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1311)
inline AlibreX::IADPartSessionPtr AlibreX::IADRoot::CreateEmptyPart ( _bstr_t Name, VARIANT_BOOL isSheetMetal ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = raw_CreateEmptyPart(Name, isSheetMetal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

#pragma implementation_key(1312)
inline AlibreX::IADAssemblySessionPtr AlibreX::IADRoot::CreateEmptyAssembly ( _bstr_t Name ) {
    struct IADAssemblySession * _result = 0;
    HRESULT _hr = raw_CreateEmptyAssembly(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADAssemblySessionPtr(_result, false);
}

#pragma implementation_key(1313)
inline IUnknownPtr AlibreX::IADRoot::GetEventManager ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_EventManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1314)
inline _bstr_t AlibreX::IADRoot::EncryptPassword ( _bstr_t plainTextPassword ) {
    BSTR _result = 0;
    HRESULT _hr = raw_EncryptPassword(plainTextPassword, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1315)
inline AlibreX::IADSessionPtr AlibreX::IADRoot::Import3DMFile ( _bstr_t filePath ) {
    struct IADSession * _result = 0;
    HRESULT _hr = raw_Import3DMFile(filePath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(1316)
inline AlibreX::IADSessionPtr AlibreX::IADRoot::ImportImages ( SAFEARRAY * * pFilePaths ) {
    struct IADSession * _result = 0;
    HRESULT _hr = raw_ImportImages(pFilePaths, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(1317)
inline HRESULT AlibreX::IADRoot::OpenFileWithUI ( _bstr_t filePath ) {
    HRESULT _hr = raw_OpenFileWithUI(filePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1318)
inline _bstr_t AlibreX::IADRoot::GetLanguageForResources ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LanguageForResources(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1319)
inline AlibreX::IADSessionPtr AlibreX::IADRoot::GetTopmostSession ( ) {
    struct IADSession * _result = 0;
    HRESULT _hr = get_TopmostSession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(1320)
inline AlibreX::IADSessionPtr AlibreX::IADRoot::ImportSTEPFileEx ( _bstr_t filePath, VARIANT_BOOL applyImportOptions, VARIANT_BOOL openEditor ) {
    struct IADSession * _result = 0;
    HRESULT _hr = raw_ImportSTEPFileEx(filePath, applyImportOptions, openEditor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(1321)
inline AlibreX::IADSessionPtr AlibreX::IADRoot::ImportSATFileEx ( _bstr_t filePath, VARIANT_BOOL applyImportOptions, VARIANT_BOOL openEditor ) {
    struct IADSession * _result = 0;
    HRESULT _hr = raw_ImportSATFileEx(filePath, applyImportOptions, openEditor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(1322)
inline AlibreX::IADSessionPtr AlibreX::IADRoot::ImportIGESFileEx ( _bstr_t filePath, VARIANT_BOOL applyImportOptions, VARIANT_BOOL openEditor ) {
    struct IADSession * _result = 0;
    HRESULT _hr = raw_ImportIGESFileEx(filePath, applyImportOptions, openEditor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(1323)
inline AlibreX::IADVaultInfoPtr AlibreX::IADRoot::GetVaultInfo ( ) {
    struct IADVaultInfo * _result = 0;
    HRESULT _hr = get_VaultInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVaultInfoPtr(_result, false);
}

#pragma implementation_key(1324)
inline HRESULT AlibreX::IADRoot::TerminateAll ( ) {
    HRESULT _hr = raw_TerminateAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1325)
inline AlibreX::IADAddOnsPtr AlibreX::IADRoot::GetAlibreAddOns ( ) {
    struct IADAddOns * _result = 0;
    HRESULT _hr = get_AlibreAddOns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADAddOnsPtr(_result, false);
}

#pragma implementation_key(1326)
inline SAFEARRAY * AlibreX::IADRoot::GetInstalledDrawingTemplates ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_InstalledDrawingTemplates(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1327)
inline AlibreX::IADDrawingSessionPtr AlibreX::IADRoot::CreateEmptyDrawing ( _bstr_t Name ) {
    struct IADDrawingSession * _result = 0;
    HRESULT _hr = raw_CreateEmptyDrawing(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDrawingSessionPtr(_result, false);
}

#pragma implementation_key(1328)
inline _bstr_t AlibreX::IADRoot::RestorePackage ( _bstr_t packageFilePath, _bstr_t restoreDirectoryPath, VARIANT_BOOL overwrite ) {
    BSTR _result = 0;
    HRESULT _hr = raw_RestorePackage(packageFilePath, restoreDirectoryPath, overwrite, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1329)
inline AlibreX::IADSessionPtr AlibreX::IADRoot::ImportNonNative3DFile ( _bstr_t filePath, enum ADUnits unitCodeForMeshFile ) {
    struct IADSession * _result = 0;
    HRESULT _hr = raw_ImportNonNative3DFile(filePath, unitCodeForMeshFile, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(1330)
inline VARIANT_BOOL AlibreX::IADRoot::IsMeshTypeFile ( _bstr_t filePath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsMeshTypeFile(filePath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1331)
inline HRESULT AlibreX::IADRoot::GetGuidAndConstituentInformation ( _bstr_t filePath, BSTR * guid, struct IObjectCollector * * constituentGuids, struct IObjectCollector * * constituentNames, struct IObjectCollector * * constituentRelativeFilePaths ) {
    HRESULT _hr = raw_GetGuidAndConstituentInformation(filePath, guid, constituentGuids, constituentNames, constituentRelativeFilePaths);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1332)
inline HRESULT AlibreX::IADRoot::GetGuidAndTPConstituentsData ( _bstr_t filePath, BSTR * guid, struct IObjectCollector * * constituentGuids, struct IObjectCollector * * constituentNames, struct IObjectCollector * * constituentAbsoluteTPLocations, struct IObjectCollector * * constituentRelativeTPLocations ) {
    HRESULT _hr = raw_GetGuidAndTPConstituentsData(filePath, guid, constituentGuids, constituentNames, constituentAbsoluteTPLocations, constituentRelativeTPLocations);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1333)
inline AlibreX::IADGlobalParameterSessionPtr AlibreX::IADRoot::CreateEmptyGlobalParameters ( _bstr_t Name ) {
    struct IADGlobalParameterSession * _result = 0;
    HRESULT _hr = raw_CreateEmptyGlobalParameters(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADGlobalParameterSessionPtr(_result, false);
}

#pragma implementation_key(1334)
inline AlibreX::IADSessionPtr AlibreX::IADRoot::OpenFileEx ( _bstr_t filePath, VARIANT_BOOL openEditor ) {
    struct IADSession * _result = 0;
    HRESULT _hr = raw_OpenFileEx(filePath, openEditor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(1335)
inline AlibreX::IADPartSessionPtr AlibreX::IADRoot::CreateEmptyPartEx ( _bstr_t Name, VARIANT_BOOL isSheetMetal, VARIANT_BOOL openEditor ) {
    struct IADPartSession * _result = 0;
    HRESULT _hr = raw_CreateEmptyPartEx(Name, isSheetMetal, openEditor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartSessionPtr(_result, false);
}

#pragma implementation_key(1336)
inline AlibreX::IADAssemblySessionPtr AlibreX::IADRoot::CreateEmptyAssemblyEx ( _bstr_t Name, VARIANT_BOOL openEditor ) {
    struct IADAssemblySession * _result = 0;
    HRESULT _hr = raw_CreateEmptyAssemblyEx(Name, openEditor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADAssemblySessionPtr(_result, false);
}

#pragma implementation_key(1337)
inline AlibreX::IADDrawingSessionPtr AlibreX::IADRoot::CreateEmptyDrawingEx ( _bstr_t Name, VARIANT_BOOL openEditor ) {
    struct IADDrawingSession * _result = 0;
    HRESULT _hr = raw_CreateEmptyDrawingEx(Name, openEditor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDrawingSessionPtr(_result, false);
}

#pragma implementation_key(1338)
inline AlibreX::IADGlobalParameterSessionPtr AlibreX::IADRoot::CreateEmptyGlobalParametersEx ( _bstr_t Name, VARIANT_BOOL openEditor ) {
    struct IADGlobalParameterSession * _result = 0;
    HRESULT _hr = raw_CreateEmptyGlobalParametersEx(Name, openEditor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADGlobalParameterSessionPtr(_result, false);
}

#pragma implementation_key(1339)
inline AlibreX::IADMaterialsPtr AlibreX::IADRoot::GetMaterials ( ) {
    struct IADMaterials * _result = 0;
    HRESULT _hr = get_Materials(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADMaterialsPtr(_result, false);
}

#pragma implementation_key(1340)
inline AlibreX::IADMaterialLibrariesPtr AlibreX::IADRoot::GetMaterialLibraries ( ) {
    struct IADMaterialLibraries * _result = 0;
    HRESULT _hr = get_MaterialLibraries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADMaterialLibrariesPtr(_result, false);
}

#pragma implementation_key(1341)
inline AlibreX::IADMaterialLibraryPtr AlibreX::IADRoot::createMaterialLibrary ( _bstr_t Name ) {
    struct IADMaterialLibrary * _result = 0;
    HRESULT _hr = raw_createMaterialLibrary(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADMaterialLibraryPtr(_result, false);
}

#pragma implementation_key(1342)
inline HRESULT AlibreX::IADRoot::removeMaterialLibrary ( _bstr_t Name ) {
    HRESULT _hr = raw_removeMaterialLibrary(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1343)
inline _bstr_t AlibreX::IADRoot::GetAppTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AppTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IADSession wrapper method implementations
//

#pragma implementation_key(1344)
inline enum AlibreX::ADObjectType AlibreX::IADSession::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1345)
inline _bstr_t AlibreX::IADSession::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1346)
inline enum AlibreX::ADObjectSubType AlibreX::IADSession::GetSessionType ( ) {
    enum ADObjectSubType _result;
    HRESULT _hr = get_SessionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1347)
inline AlibreX::IADRootPtr AlibreX::IADSession::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(1348)
inline HRESULT AlibreX::IADSession::SaveAs ( VARIANT * pDestination, _bstr_t itemName ) {
    HRESULT _hr = raw_SaveAs(pDestination, itemName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1349)
inline HRESULT AlibreX::IADSession::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1350)
inline HRESULT AlibreX::IADSession::Close ( VARIANT_BOOL saveSession ) {
    HRESULT _hr = raw_Close(saveSession);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1351)
inline _bstr_t AlibreX::IADSession::GetIdentifier ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Identifier(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1352)
inline AlibreX::IADParametersPtr AlibreX::IADSession::GetParameters ( ) {
    struct IADParameters * _result = 0;
    HRESULT _hr = get_Parameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParametersPtr(_result, false);
}

#pragma implementation_key(1353)
inline AlibreX::IADGeometryFactoryPtr AlibreX::IADSession::GetGeometryFactory ( ) {
    struct IADGeometryFactory * _result = 0;
    HRESULT _hr = get_GeometryFactory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADGeometryFactoryPtr(_result, false);
}

#pragma implementation_key(1354)
inline IDispatchPtr AlibreX::IADSession::BindKeyToItem ( SAFEARRAY * * pKey, enum ADObjectType objectType ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_BindKeyToItem(pKey, objectType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1355)
inline AlibreX::IObjectCollectorPtr AlibreX::IADSession::GetSelectedObjects ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_SelectedObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(1356)
inline VARIANT_BOOL AlibreX::IADSession::GetIsGUIVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsGUIVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1357)
inline HRESULT AlibreX::IADSession::SaveNew ( VARIANT * pDestination ) {
    HRESULT _hr = raw_SaveNew(pDestination);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1358)
inline IUnknownPtr AlibreX::IADSession::GetPreviewSnapshot ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_PreviewSnapshot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1359)
inline HRESULT AlibreX::IADSession::Select ( struct IObjectCollector * pEntities ) {
    HRESULT _hr = raw_Select(pEntities);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1360)
inline AlibreX::IADTargetProxyPtr AlibreX::IADSession::NewTargetProxy ( struct IADOccurrence * pOccurrence, IDispatch * ptarget ) {
    struct IADTargetProxy * _result = 0;
    HRESULT _hr = raw_NewTargetProxy(pOccurrence, ptarget, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTargetProxyPtr(_result, false);
}

#pragma implementation_key(1361)
inline HRESULT AlibreX::IADSession::Highlight ( IDispatch * ptarget ) {
    HRESULT _hr = raw_Highlight(ptarget);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1362)
inline HRESULT AlibreX::IADSession::SaveCurrentViewSnapshot ( _bstr_t fullImagePath, long Width, long Height, VARIANT_BOOL bUseCanvasAspectRatio, VARIANT_BOOL bUseCanvasWidthAndHeight ) {
    HRESULT _hr = raw_SaveCurrentViewSnapshot(fullImagePath, Width, Height, bUseCanvasAspectRatio, bUseCanvasWidthAndHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1363)
inline AlibreX::IObjectCollectorPtr AlibreX::IADSession::SelectedObjectsEx ( struct IADPoint * * lastSelectedPoint ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = raw_SelectedObjectsEx(lastSelectedPoint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(1364)
inline HRESULT AlibreX::IADSession::SaveAll ( _bstr_t destination ) {
    HRESULT _hr = raw_SaveAll(destination);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1365)
inline long AlibreX::IADSession::GetTimeStamp ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeStamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1366)
inline _bstr_t AlibreX::IADSession::GetfilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_filePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1367)
inline HRESULT AlibreX::IADSession::CreatePackage ( _bstr_t filePath ) {
    HRESULT _hr = raw_CreatePackage(filePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1368)
inline AlibreX::IObjectCollectorPtr AlibreX::IADSession::GetConstituentFilePaths ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_ConstituentFilePaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(1369)
inline HRESULT AlibreX::IADSession::UpdatePreviewSnaphot ( VARIANT_BOOL overwriteExistingSnapshot ) {
    HRESULT _hr = raw_UpdatePreviewSnaphot(overwriteExistingSnapshot);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IADSessions wrapper method implementations
//

#pragma implementation_key(1370)
inline IEnumVARIANTPtr AlibreX::IADSessions::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1371)
inline AlibreX::IADSessionPtr AlibreX::IADSessions::GetItem ( const _variant_t & index ) {
    struct IADSession * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSessionPtr(_result, false);
}

#pragma implementation_key(1372)
inline long AlibreX::IADSessions::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1373)
inline AlibreX::DIEnumPtr AlibreX::IADSessions::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

//
// interface IADSheet wrapper method implementations
//

#pragma implementation_key(1374)
inline enum AlibreX::ADObjectType AlibreX::IADSheet::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1375)
inline _bstr_t AlibreX::IADSheet::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1376)
inline void AlibreX::IADSheet::PutName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Name(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1377)
inline AlibreX::IADRootPtr AlibreX::IADSheet::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(1378)
inline AlibreX::IADDrawingSessionPtr AlibreX::IADSheet::GetSession ( ) {
    struct IADDrawingSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDrawingSessionPtr(_result, false);
}

#pragma implementation_key(1379)
inline HRESULT AlibreX::IADSheet::GetExtents ( struct IAD2DPoint * * pLower, struct IAD2DPoint * * pUpper ) {
    HRESULT _hr = raw_GetExtents(pLower, pUpper);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1380)
inline HRESULT AlibreX::IADSheet::GetSheetSize ( double * Width, double * Height ) {
    HRESULT _hr = raw_GetSheetSize(Width, Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1381)
inline HRESULT AlibreX::IADSheet::ModifySheetBlank ( _bstr_t sheetName, double Width, double Height, enum ADUnits Units, double defaultScaleNumerator, double defaultScaleDenomenator ) {
    HRESULT _hr = raw_ModifySheetBlank(sheetName, Width, Height, Units, defaultScaleNumerator, defaultScaleDenomenator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1382)
inline HRESULT AlibreX::IADSheet::ModifySheetTemplate ( _bstr_t sheetName, _bstr_t templateName, double defaultScaleNumerator, double defaultScaleDenomenator, VARIANT_BOOL retainTemplateLayers, VARIANT_BOOL overwriteExistingDimStyles ) {
    HRESULT _hr = raw_ModifySheetTemplate(sheetName, templateName, defaultScaleNumerator, defaultScaleDenomenator, retainTemplateLayers, overwriteExistingDimStyles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1383)
inline AlibreX::IADDrawingViewsPtr AlibreX::IADSheet::GetViews ( ) {
    struct IADDrawingViews * _result = 0;
    HRESULT _hr = get_Views(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDrawingViewsPtr(_result, false);
}

#pragma implementation_key(1384)
inline AlibreX::IObjectCollectorPtr AlibreX::IADSheet::CreateStandardViews ( _bstr_t designFilePath, enum ADDrawingViewType ViewType, enum ADDetailingOption detailingOptions, double scaleNumerator, double scaleDenominator, enum ADViewOrientation viewOrientations, struct IAD2DPoint * insertionPoint, struct IADTransformation * workspaceOrientation, const _variant_t & designConfiguration, const _variant_t & ExplodedView ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = raw_CreateStandardViews(designFilePath, ViewType, detailingOptions, scaleNumerator, scaleDenominator, viewOrientations, insertionPoint, workspaceOrientation, designConfiguration, ExplodedView, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(1385)
inline long AlibreX::IADSheet::GetDissociatedDimensionCount ( ) {
    long _result = 0;
    HRESULT _hr = get_DissociatedDimensionCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADSheets wrapper method implementations
//

#pragma implementation_key(1386)
inline IEnumVARIANTPtr AlibreX::IADSheets::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1387)
inline AlibreX::IADSheetPtr AlibreX::IADSheets::GetItem ( const _variant_t & index ) {
    struct IADSheet * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSheetPtr(_result, false);
}

#pragma implementation_key(1388)
inline long AlibreX::IADSheets::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1389)
inline AlibreX::DIEnumPtr AlibreX::IADSheets::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(1390)
inline AlibreX::IADDrawingSessionPtr AlibreX::IADSheets::GetSession ( ) {
    struct IADDrawingSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDrawingSessionPtr(_result, false);
}

#pragma implementation_key(1391)
inline AlibreX::IADSheetPtr AlibreX::IADSheets::GetActiveSheet ( ) {
    struct IADSheet * _result = 0;
    HRESULT _hr = get_ActiveSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSheetPtr(_result, false);
}

#pragma implementation_key(1392)
inline void AlibreX::IADSheets::PutRefActiveSheet ( struct IADSheet * pRetVal ) {
    HRESULT _hr = putref_ActiveSheet(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1393)
inline AlibreX::IADSheetPtr AlibreX::IADSheets::CreateSheetFromTemplate ( _bstr_t sheetName, _bstr_t templateName, double defaultScaleNumerator, double defaultScaleDenomenator, VARIANT_BOOL retainTemplateLayers, VARIANT_BOOL overwriteExistingLayers, VARIANT_BOOL overwriteExistingDimStyles ) {
    struct IADSheet * _result = 0;
    HRESULT _hr = raw_CreateSheetFromTemplate(sheetName, templateName, defaultScaleNumerator, defaultScaleDenomenator, retainTemplateLayers, overwriteExistingLayers, overwriteExistingDimStyles, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSheetPtr(_result, false);
}

#pragma implementation_key(1394)
inline AlibreX::IADSheetPtr AlibreX::IADSheets::CreateBlankSheet ( _bstr_t sheetName, double Width, double Height, enum ADUnits Units, double defaultScaleNumerator, double defaultScaleDenomenator ) {
    struct IADSheet * _result = 0;
    HRESULT _hr = raw_CreateBlankSheet(sheetName, Width, Height, Units, defaultScaleNumerator, defaultScaleDenomenator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSheetPtr(_result, false);
}

//
// interface IADSketchConstraint wrapper method implementations
//

#pragma implementation_key(1395)
inline enum AlibreX::ADObjectType AlibreX::IADSketchConstraint::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1396)
inline enum AlibreX::ADSketchConstraintType AlibreX::IADSketchConstraint::GetSketchConstraintType ( ) {
    enum ADSketchConstraintType _result;
    HRESULT _hr = get_SketchConstraintType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1397)
inline AlibreX::IADRootPtr AlibreX::IADSketchConstraint::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(1398)
inline AlibreX::IADDesignSessionPtr AlibreX::IADSketchConstraint::GetSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

//
// interface IADTeamRole wrapper method implementations
//

#pragma implementation_key(1399)
inline enum AlibreX::ADObjectType AlibreX::IADTeamRole::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1400)
inline _bstr_t AlibreX::IADTeamRole::GetRoleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RoleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1401)
inline _bstr_t AlibreX::IADTeamRole::GetTeamName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TeamName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1402)
inline AlibreX::IADRootPtr AlibreX::IADTeamRole::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

//
// interface IADTeamRoles wrapper method implementations
//

#pragma implementation_key(1403)
inline IEnumVARIANTPtr AlibreX::IADTeamRoles::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1404)
inline AlibreX::IADTeamRolePtr AlibreX::IADTeamRoles::GetItem ( const _variant_t & index ) {
    struct IADTeamRole * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTeamRolePtr(_result, false);
}

#pragma implementation_key(1405)
inline long AlibreX::IADTeamRoles::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1406)
inline AlibreX::DIEnumPtr AlibreX::IADTeamRoles::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

//
// interface IADUser wrapper method implementations
//

#pragma implementation_key(1407)
inline enum AlibreX::ADObjectType AlibreX::IADUser::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1408)
inline _bstr_t AlibreX::IADUser::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1409)
inline AlibreX::IADRootPtr AlibreX::IADUser::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

//
// interface IADUsers wrapper method implementations
//

#pragma implementation_key(1410)
inline IEnumVARIANTPtr AlibreX::IADUsers::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1411)
inline AlibreX::IADUserPtr AlibreX::IADUsers::GetItem ( const _variant_t & index ) {
    struct IADUser * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADUserPtr(_result, false);
}

#pragma implementation_key(1412)
inline long AlibreX::IADUsers::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1413)
inline AlibreX::DIEnumPtr AlibreX::IADUsers::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

//
// interface IADTeam wrapper method implementations
//

#pragma implementation_key(1414)
inline enum AlibreX::ADObjectType AlibreX::IADTeam::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1415)
inline _bstr_t AlibreX::IADTeam::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1416)
inline AlibreX::IADUsersPtr AlibreX::IADTeam::GetTeamMembers ( ) {
    struct IADUsers * _result = 0;
    HRESULT _hr = get_TeamMembers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADUsersPtr(_result, false);
}

#pragma implementation_key(1417)
inline AlibreX::IADRootPtr AlibreX::IADTeam::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(1418)
inline HRESULT AlibreX::IADTeam::AddMember ( struct IADUser * pUser ) {
    HRESULT _hr = raw_AddMember(pUser);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1419)
inline VARIANT_BOOL AlibreX::IADTeam::IsMember ( struct IADUser * pUser ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsMember(pUser, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1420)
inline HRESULT AlibreX::IADTeam::Remove ( ) {
    HRESULT _hr = raw_Remove();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1421)
inline AlibreX::IADTeamRolePtr AlibreX::IADTeam::AddRole ( _bstr_t RoleName ) {
    struct IADTeamRole * _result = 0;
    HRESULT _hr = raw_AddRole(RoleName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTeamRolePtr(_result, false);
}

#pragma implementation_key(1422)
inline HRESULT AlibreX::IADTeam::AssigneRoleToMember ( struct IADUser * pUser, _bstr_t RoleName ) {
    HRESULT _hr = raw_AssigneRoleToMember(pUser, RoleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1423)
inline AlibreX::IADTeamRolesPtr AlibreX::IADTeam::GetRoles ( ) {
    struct IADTeamRoles * _result = 0;
    HRESULT _hr = get_Roles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTeamRolesPtr(_result, false);
}

//
// interface IADTeams wrapper method implementations
//

#pragma implementation_key(1424)
inline IEnumVARIANTPtr AlibreX::IADTeams::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1425)
inline AlibreX::IADTeamPtr AlibreX::IADTeams::GetItem ( const _variant_t & index ) {
    struct IADTeam * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTeamPtr(_result, false);
}

#pragma implementation_key(1426)
inline long AlibreX::IADTeams::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1427)
inline AlibreX::DIEnumPtr AlibreX::IADTeams::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

//
// interface IADVaultInfo wrapper method implementations
//

#pragma implementation_key(1428)
inline VARIANT_BOOL AlibreX::IADVaultInfo::GetIsUsingVault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUsingVault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1429)
inline _bstr_t AlibreX::IADVaultInfo::GetVaultDriveLetter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VaultDriveLetter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1430)
inline _bstr_t AlibreX::IADVaultInfo::GetSelectedVaultName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SelectedVaultName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1431)
inline AlibreX::IADRootPtr AlibreX::IADVaultInfo::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

//
// interface IADSketch wrapper method implementations
//

#pragma implementation_key(1432)
inline enum AlibreX::ADObjectType AlibreX::IADSketch::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1433)
inline _bstr_t AlibreX::IADSketch::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1434)
inline void AlibreX::IADSketch::PutName ( _bstr_t pRetVal ) {
    HRESULT _hr = put_Name(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1435)
inline AlibreX::IADRootPtr AlibreX::IADSketch::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(1436)
inline AlibreX::IADDesignSessionPtr AlibreX::IADSketch::GetSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

#pragma implementation_key(1437)
inline AlibreX::IADSketchFiguresPtr AlibreX::IADSketch::GetFigures ( ) {
    struct IADSketchFigures * _result = 0;
    HRESULT _hr = get_Figures(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchFiguresPtr(_result, false);
}

#pragma implementation_key(1438)
inline VARIANT_BOOL AlibreX::IADSketch::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsClosed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1439)
inline AlibreX::IADVectorPtr AlibreX::IADSketch::GetSketchPlaneNormal ( ) {
    struct IADVector * _result = 0;
    HRESULT _hr = get_SketchPlaneNormal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADVectorPtr(_result, false);
}

#pragma implementation_key(1440)
inline AlibreX::IADTargetProxyPtr AlibreX::IADSketch::GetSketchPlane ( ) {
    struct IADTargetProxy * _result = 0;
    HRESULT _hr = get_SketchPlane(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTargetProxyPtr(_result, false);
}

#pragma implementation_key(1441)
inline VARIANT_BOOL AlibreX::IADSketch::GetIsConsumed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConsumed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1442)
inline AlibreX::IADPartFeaturePtr AlibreX::IADSketch::GetConsumingFeature ( ) {
    struct IADPartFeature * _result = 0;
    HRESULT _hr = get_ConsumingFeature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADPartFeaturePtr(_result, false);
}

#pragma implementation_key(1443)
inline HRESULT AlibreX::IADSketch::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1444)
inline HRESULT AlibreX::IADSketch::BeginChange ( ) {
    HRESULT _hr = raw_BeginChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1445)
inline HRESULT AlibreX::IADSketch::BeginChangeEx ( struct IADPoint * pOrigin, struct IADVector * pXAxis, struct IADVector * pYDirection ) {
    HRESULT _hr = raw_BeginChangeEx(pOrigin, pXAxis, pYDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1446)
inline HRESULT AlibreX::IADSketch::EndChange ( ) {
    HRESULT _hr = raw_EndChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1447)
inline HRESULT AlibreX::IADSketch::MapFromWorldToSketch ( struct IADPoint * xyzPoint, double * uCoord, double * vCoord ) {
    HRESULT _hr = raw_MapFromWorldToSketch(xyzPoint, uCoord, vCoord);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1448)
inline AlibreX::IADDimensionsPtr AlibreX::IADSketch::GetDimensions ( ) {
    struct IADDimensions * _result = 0;
    HRESULT _hr = get_Dimensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDimensionsPtr(_result, false);
}

#pragma implementation_key(1449)
inline HRESULT AlibreX::IADSketch::GetExtents ( struct IAD2DPoint * * ppLower, struct IAD2DPoint * * ppUpper ) {
    HRESULT _hr = raw_GetExtents(ppLower, ppUpper);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1450)
inline AlibreX::IAnalyzedSketchDataPtr AlibreX::IADSketch::Analyze ( VARIANT_BOOL bDisjointEnds, VARIANT_BOOL bOpenLoops, VARIANT_BOOL bOverLaps, VARIANT_BOOL bSelfIntersections, VARIANT_BOOL bDegenerateFigures, VARIANT_BOOL bHealSketch, double dblHealingTolerance ) {
    struct IAnalyzedSketchData * _result = 0;
    HRESULT _hr = raw_Analyze(bDisjointEnds, bOpenLoops, bOverLaps, bSelfIntersections, bDegenerateFigures, bHealSketch, dblHealingTolerance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAnalyzedSketchDataPtr(_result, false);
}

#pragma implementation_key(1451)
inline HRESULT AlibreX::IADSketch::MapFromSketchToWorld ( double uCoord, double vCoord, struct IADPoint * * xyzPoint ) {
    HRESULT _hr = raw_MapFromSketchToWorld(uCoord, vCoord, xyzPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1452)
inline SAFEARRAY * AlibreX::IADSketch::GetKey ( ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1453)
inline VARIANT_BOOL AlibreX::IADSketch::GetIsSuppressed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSuppressed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1454)
inline VARIANT_BOOL AlibreX::IADSketch::GetIsActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1455)
inline AlibreX::IADSketchConstraintsPtr AlibreX::IADSketch::GetSketchConstraints ( ) {
    struct IADSketchConstraints * _result = 0;
    HRESULT _hr = get_SketchConstraints(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchConstraintsPtr(_result, false);
}

#pragma implementation_key(1456)
inline AlibreX::IADSketchPointPtr AlibreX::IADSketch::GetOriginPoint ( ) {
    struct IADSketchPoint * _result = 0;
    HRESULT _hr = get_OriginPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPointPtr(_result, false);
}

//
// interface IADSketchConstraints wrapper method implementations
//

#pragma implementation_key(1457)
inline IEnumVARIANTPtr AlibreX::IADSketchConstraints::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1458)
inline AlibreX::IADSketchConstraintPtr AlibreX::IADSketchConstraints::GetItem ( long index ) {
    struct IADSketchConstraint * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchConstraintPtr(_result, false);
}

#pragma implementation_key(1459)
inline long AlibreX::IADSketchConstraints::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1460)
inline AlibreX::DIEnumPtr AlibreX::IADSketchConstraints::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(1461)
inline AlibreX::IADSketchPtr AlibreX::IADSketchConstraints::GetSketch ( ) {
    struct IADSketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPtr(_result, false);
}

#pragma implementation_key(1462)
inline VARIANT_BOOL AlibreX::IADSketchConstraints::AddConstraint ( struct IObjectCollector * targets, enum ADSketchConstraintType Type ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_AddConstraint(targets, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADSketches wrapper method implementations
//

#pragma implementation_key(1463)
inline IEnumVARIANTPtr AlibreX::IADSketches::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1464)
inline AlibreX::IADSketchPtr AlibreX::IADSketches::GetItem ( const _variant_t & index ) {
    struct IADSketch * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPtr(_result, false);
}

#pragma implementation_key(1465)
inline long AlibreX::IADSketches::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1466)
inline AlibreX::DIEnumPtr AlibreX::IADSketches::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(1467)
inline AlibreX::IADDesignSessionPtr AlibreX::IADSketches::GetSession ( ) {
    struct IADDesignSession * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADDesignSessionPtr(_result, false);
}

#pragma implementation_key(1468)
inline AlibreX::IADSketchPtr AlibreX::IADSketches::AddSketch ( struct IADOccurrence * pOccurrence, IDispatch * pSketchPlane, _bstr_t Name ) {
    struct IADSketch * _result = 0;
    HRESULT _hr = raw_AddSketch(pOccurrence, pSketchPlane, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPtr(_result, false);
}

//
// interface IADSketchFigure wrapper method implementations
//

#pragma implementation_key(1469)
inline enum AlibreX::ADObjectType AlibreX::IADSketchFigure::GetType ( ) {
    enum ADObjectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1470)
inline enum AlibreX::ADGeometryType AlibreX::IADSketchFigure::GetFigureType ( ) {
    enum ADGeometryType _result;
    HRESULT _hr = get_FigureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1471)
inline AlibreX::IADRootPtr AlibreX::IADSketchFigure::GetRoot ( ) {
    struct IADRoot * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADRootPtr(_result, false);
}

#pragma implementation_key(1472)
inline AlibreX::IADSketchPtr AlibreX::IADSketchFigure::GetSketch ( ) {
    struct IADSketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPtr(_result, false);
}

#pragma implementation_key(1473)
inline VARIANT_BOOL AlibreX::IADSketchFigure::GetIsReference ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReference(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1474)
inline void AlibreX::IADSketchFigure::PutIsReference ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_IsReference(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1475)
inline VARIANT_BOOL AlibreX::IADSketchFigure::GetIsAnchored ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsAnchored(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1476)
inline void AlibreX::IADSketchFigure::PutIsAnchored ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_IsAnchored(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1477)
inline HRESULT AlibreX::IADSketchFigure::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1478)
inline VARIANT_BOOL AlibreX::IADSketchFigure::GetIsOwned ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOwned(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1479)
inline _bstr_t AlibreX::IADSketchFigure::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IADSketchFigures wrapper method implementations
//

#pragma implementation_key(1480)
inline IEnumVARIANTPtr AlibreX::IADSketchFigures::GetEnumerator ( ) {
    struct IEnumVARIANT * _result = 0;
    HRESULT _hr = raw_GetEnumerator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IEnumVARIANTPtr(_result, false);
}

#pragma implementation_key(1481)
inline AlibreX::IADSketchFigurePtr AlibreX::IADSketchFigures::GetItem ( const _variant_t & index ) {
    struct IADSketchFigure * _result = 0;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchFigurePtr(_result, false);
}

#pragma implementation_key(1482)
inline long AlibreX::IADSketchFigures::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1483)
inline AlibreX::DIEnumPtr AlibreX::IADSketchFigures::GetEnum ( ) {
    struct DIEnum * _result = 0;
    HRESULT _hr = get_Enum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DIEnumPtr(_result, false);
}

#pragma implementation_key(1484)
inline AlibreX::IADSketchPtr AlibreX::IADSketchFigures::GetSketch ( ) {
    struct IADSketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPtr(_result, false);
}

#pragma implementation_key(1485)
inline AlibreX::IADSketchPointPtr AlibreX::IADSketchFigures::AddSketchPoint ( double XCoord, double YCoord ) {
    struct IADSketchPoint * _result = 0;
    HRESULT _hr = raw_AddSketchPoint(XCoord, YCoord, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPointPtr(_result, false);
}

#pragma implementation_key(1486)
inline AlibreX::IADSketchLinePtr AlibreX::IADSketchFigures::AddLine ( double x1, double y1, double x2, double y2 ) {
    struct IADSketchLine * _result = 0;
    HRESULT _hr = raw_AddLine(x1, y1, x2, y2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchLinePtr(_result, false);
}

#pragma implementation_key(1487)
inline AlibreX::IADSketchCirclePtr AlibreX::IADSketchFigures::AddCircle ( double XCenter, double YCenter, const _variant_t & Radius ) {
    struct IADSketchCircle * _result = 0;
    HRESULT _hr = raw_AddCircle(XCenter, YCenter, Radius, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchCirclePtr(_result, false);
}

#pragma implementation_key(1488)
inline AlibreX::IADSketchCircularArcPtr AlibreX::IADSketchFigures::AddCircularArcByCenterStartAngle ( double XCenter, double YCenter, double XStartPt, double YStartPt, double ArcAngle ) {
    struct IADSketchCircularArc * _result = 0;
    HRESULT _hr = raw_AddCircularArcByCenterStartAngle(XCenter, YCenter, XStartPt, YStartPt, ArcAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchCircularArcPtr(_result, false);
}

#pragma implementation_key(1489)
inline AlibreX::IADSketchCircularArcPtr AlibreX::IADSketchFigures::AddCircularArcByCenterStartEnd ( double XCenter, double YCenter, double XStartPt, double YStartPt, double XEndPt, double YEndPt ) {
    struct IADSketchCircularArc * _result = 0;
    HRESULT _hr = raw_AddCircularArcByCenterStartEnd(XCenter, YCenter, XStartPt, YStartPt, XEndPt, YEndPt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchCircularArcPtr(_result, false);
}

#pragma implementation_key(1490)
inline AlibreX::IObjectCollectorPtr AlibreX::IADSketchFigures::AddRectangle ( double Xlow, double Ylow, double Xhigh, double Yhigh ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = raw_AddRectangle(Xlow, Ylow, Xhigh, Yhigh, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(1491)
inline AlibreX::IADSketchBsplinePtr AlibreX::IADSketchFigures::AddBspline ( long order, long numCtlPoints, SAFEARRAY * * pCtlPoints, SAFEARRAY * * pKnotVector, SAFEARRAY * * pWeights ) {
    struct IADSketchBspline * _result = 0;
    HRESULT _hr = raw_AddBspline(order, numCtlPoints, pCtlPoints, pKnotVector, pWeights, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchBsplinePtr(_result, false);
}

#pragma implementation_key(1492)
inline AlibreX::IADSketchCircularArcPtr AlibreX::IADSketchFigures::AddCircularArcBy3Points ( double XCenter, double YCenter, double XStartPt, double YStartPt, double XEndPt, double YEndPt ) {
    struct IADSketchCircularArc * _result = 0;
    HRESULT _hr = raw_AddCircularArcBy3Points(XCenter, YCenter, XStartPt, YStartPt, XEndPt, YEndPt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchCircularArcPtr(_result, false);
}

#pragma implementation_key(1493)
inline AlibreX::IADSketchCircularArcPtr AlibreX::IADSketchFigures::AddCircularArc ( double XCenter, double YCenter, double XStartPt, double YStartPt, double ArcAngle ) {
    struct IADSketchCircularArc * _result = 0;
    HRESULT _hr = raw_AddCircularArc(XCenter, YCenter, XStartPt, YStartPt, ArcAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchCircularArcPtr(_result, false);
}

#pragma implementation_key(1494)
inline AlibreX::IADSketchFigurePtr AlibreX::IADSketchFigures::GetFigureByID ( _bstr_t ID ) {
    struct IADSketchFigure * _result = 0;
    HRESULT _hr = raw_GetFigureByID(ID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchFigurePtr(_result, false);
}

#pragma implementation_key(1495)
inline AlibreX::IADSketchBsplinePtr AlibreX::IADSketchFigures::AddBsplineByInterpolation ( SAFEARRAY * * pInterpolationPoints ) {
    struct IADSketchBspline * _result = 0;
    HRESULT _hr = raw_AddBsplineByInterpolation(pInterpolationPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchBsplinePtr(_result, false);
}

#pragma implementation_key(1496)
inline AlibreX::IADSketchEllipsePtr AlibreX::IADSketchFigures::AddEllipse ( double XCenter, double YCenter, double MajorAxis, double MinorMajorRatio, double MajorAxisAngle ) {
    struct IADSketchEllipse * _result = 0;
    HRESULT _hr = raw_AddEllipse(XCenter, YCenter, MajorAxis, MinorMajorRatio, MajorAxisAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchEllipsePtr(_result, false);
}

#pragma implementation_key(1497)
inline AlibreX::IADSketchEllipsePtr AlibreX::IADSketchFigures::AddEllipseBy3Points ( double XCenter, double YCenter, double XMajor, double YMajor, double XMinor, double YMinor ) {
    struct IADSketchEllipse * _result = 0;
    HRESULT _hr = raw_AddEllipseBy3Points(XCenter, YCenter, XMajor, YMajor, XMinor, YMinor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchEllipsePtr(_result, false);
}

#pragma implementation_key(1498)
inline AlibreX::IADSketchEllipticArcPtr AlibreX::IADSketchFigures::AddEllipticArc ( double XCenter, double YCenter, double MajorAxis, double MinorMajorRatio, double XStart, double YStart, double XEnd, double YEnd, double MajorAxisAngle ) {
    struct IADSketchEllipticArc * _result = 0;
    HRESULT _hr = raw_AddEllipticArc(XCenter, YCenter, MajorAxis, MinorMajorRatio, XStart, YStart, XEnd, YEnd, MajorAxisAngle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchEllipticArcPtr(_result, false);
}

//
// interface IADSweepFeature wrapper method implementations
//

#pragma implementation_key(1499)
inline VARIANT_BOOL AlibreX::IADSweepFeature::GetIsCutout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCutout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1500)
inline AlibreX::IADSketchPtr AlibreX::IADSweepFeature::GetSketch ( ) {
    struct IADSketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPtr(_result, false);
}

#pragma implementation_key(1501)
inline AlibreX::IObjectCollectorPtr AlibreX::IADSweepFeature::GetPath ( ) {
    struct IObjectCollector * _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectCollectorPtr(_result, false);
}

#pragma implementation_key(1502)
inline AlibreX::IADParameterPtr AlibreX::IADSweepFeature::GetDraftParameter ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_DraftParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(1503)
inline VARIANT_BOOL AlibreX::IADSweepFeature::GetIsOutwardDraft ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOutwardDraft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1504)
inline void AlibreX::IADSweepFeature::PutIsOutwardDraft ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_IsOutwardDraft(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1505)
inline VARIANT_BOOL AlibreX::IADSweepFeature::GetIsRigid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRigid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1506)
inline void AlibreX::IADSweepFeature::PutIsRigid ( VARIANT_BOOL pRetVal ) {
    HRESULT _hr = put_IsRigid(pRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1507)
inline AlibreX::IADTargetProxyPtr AlibreX::IADSweepFeature::GetEndCondition ( ) {
    struct IADTargetProxy * _result = 0;
    HRESULT _hr = get_EndCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTargetProxyPtr(_result, false);
}

#pragma implementation_key(1508)
inline enum AlibreX::ADPartFeatureEndCondition AlibreX::IADSweepFeature::GetEndConditionType ( ) {
    enum ADPartFeatureEndCondition _result;
    HRESULT _hr = get_EndConditionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1509)
inline double AlibreX::IADSweepFeature::GetToGeometryOffset ( ) {
    double _result = 0;
    HRESULT _hr = get_ToGeometryOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IADWrapFeature wrapper method implementations
//

#pragma implementation_key(1510)
inline VARIANT_BOOL AlibreX::IADWrapFeature::GetIsCutout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCutout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1511)
inline AlibreX::IADSketchPtr AlibreX::IADWrapFeature::GetSketch ( ) {
    struct IADSketch * _result = 0;
    HRESULT _hr = get_Sketch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADSketchPtr(_result, false);
}

#pragma implementation_key(1512)
inline AlibreX::IADParameterPtr AlibreX::IADWrapFeature::GetDepthParameter ( ) {
    struct IADParameter * _result = 0;
    HRESULT _hr = get_DepthParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADParameterPtr(_result, false);
}

#pragma implementation_key(1513)
inline AlibreX::IADTargetProxyPtr AlibreX::IADWrapFeature::GetTargetFace ( ) {
    struct IADTargetProxy * _result = 0;
    HRESULT _hr = get_TargetFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IADTargetProxyPtr(_result, false);
}

#pragma implementation_key(1514)
inline enum AlibreX::ADWrapFocusType AlibreX::IADWrapFeature::GetFocusType ( ) {
    enum ADWrapFocusType _result;
    HRESULT _hr = get_FocusType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}
